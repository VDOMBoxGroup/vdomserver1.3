<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>uploader_2</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_uploader_2</ClassName>
    <ID>aff988ba-4efa-e9d2-b354-04431dce1092</ID>
    <Icon>#Res(d3b7faa2-c2a1-5433-c92e-16f5bde8b918)</Icon>
    <EditorIcon>#Res(e1a89747-a860-32ae-4819-16f5e721b6ea)</EditorIcon>
    <StructureIcon>#Res(e120cfa3-382b-dec8-dd33-16f6162944fa)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Additional</Category>
    <Dynamic>0</Dynamic>
    <Version>2.28.8400</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer,dialog,dialog_2,container,tablecell,vdomclass, accordeon</Containers>
    <Languages>en_US ,ru_RU ,fr_FR</Languages>
    <Handlers/>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>visible</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zindex</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue>150</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue>70</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>mode</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>[01]</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>pageurl</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>ObjectList(6cd1ad90-ca33-4a08-a3d0-ed60309db88b)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>formdata</Name>
      <DisplayName>#Lang(111)</DisplayName>
      <DefaultValue/>
      <Visible>0</Visible>
      <Help>#Lang(211)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(50000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(311)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>classname</Name>
      <DisplayName>#Lang(112)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(212)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(50)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(312)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">Async file uploader</Sentence>
      <Sentence ID="002">The Uploader v2 type produces an object that allows user to choose one or more files from file local computer to upload them. The files for uploading can be dragged and dropped onto the Uploader v2 object. It allows interrupting the process of uploading files.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Hierarchy</Sentence>
      <Sentence ID="102">Visibility</Sentence>
      <Sentence ID="103">Z-Index</Sentence>
      <Sentence ID="104">Top</Sentence>
      <Sentence ID="105">Left</Sentence>
      <Sentence ID="106">Width</Sentence>
      <Sentence ID="107">Height</Sentence>
      <Sentence ID="108">Mode</Sentence>
      <Sentence ID="109">URL</Sentence>
      <Sentence ID="111">Data</Sentence>
      <Sentence ID="112">CSS Class</Sentence>
      <Sentence ID="201">Order of rendering the object on the page</Sentence>
      <Sentence ID="202">Visibility of the object</Sentence>
      <Sentence ID="203">Position in visual hierarchy of objects</Sentence>
      <Sentence ID="204">Spacing between the top edge of the container and the object in pixels</Sentence>
      <Sentence ID="205">Spacing between the left edge of the container and the object in pixels</Sentence>
      <Sentence ID="206">Width of the object in pixels</Sentence>
      <Sentence ID="207">Height of the object in pixels</Sentence>
      <Sentence ID="208">Send file to custom XML page or use standard VDOM gateway upload.py (URL property will be ignored)</Sentence>
      <Sentence ID="209">onload on this page must be catch the uploaded data (use in custom mode)</Sentence>
      <Sentence ID="211">Additional data (JSON) to send with files (use in custom mode)</Sentence>
      <Sentence ID="212">Names of CSS classes</Sentence>
      <Sentence ID="301">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="302">Incorrect value, must be either 0 or 1</Sentence>
      <Sentence ID="303">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="304">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="305">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="306">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="307">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="308">incorrect value</Sentence>
      <Sentence ID="309">Invalid value</Sentence>
      <Sentence ID="311">Invalid value, must be JSON</Sentence>
      <Sentence ID="312">Incorrect value</Sentence>
      <Sentence ID="401">Invisible</Sentence>
      <Sentence ID="402">Visible</Sentence>
      <Sentence ID="403">custom xml page</Sentence>
      <Sentence ID="404">upload.py</Sentence>
      <Sentence ID="501">Hide the object</Sentence>
      <Sentence ID="502">Move the object to a new position</Sentence>
      <Sentence ID="503">Set new CSS style of the object</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505">Start upload</Sentence>
      <Sentence ID="506">Start upload</Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508"></Sentence>
      <Sentence ID="509"></Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="601">Hide</Sentence>
      <Sentence ID="602">moveTo</Sentence>
      <Sentence ID="603">setStyle</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605">Start upload</Sentence>
      <Sentence ID="606">Start upload</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">cssStyleValue</Sentence>
      <Sentence ID="706">Fade</Sentence>
      <Sentence ID="801">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="802">X-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="803">Y-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="804">Visual effect of moving, time is indicated in milliseconds</Sentence>
      <Sentence ID="805">CSS style value</Sentence>
      <Sentence ID="806">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="901">percent</Sentence>
      <Sentence ID="902">percent</Sentence>
      <Sentence ID="903">percent</Sentence>
      <Sentence ID="904">percent</Sentence>
      <Sentence ID="905">percent</Sentence>
    </Language>
    <Language Code="ru_RU">
      <Sentence ID="001">Загрузчик</Sentence>
      <Sentence ID="002">Загрузчик файлов</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Иерархия</Sentence>
      <Sentence ID="102">Отображение</Sentence>
      <Sentence ID="103">Позиция</Sentence>
      <Sentence ID="104">Сверху</Sentence>
      <Sentence ID="105">Слева</Sentence>
      <Sentence ID="106">Ширина</Sentence>
      <Sentence ID="107">Высота</Sentence>
      <Sentence ID="108"></Sentence>
      <Sentence ID="109"></Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112">Класс CSS</Sentence>
      <Sentence ID="201">Порядок визуализации объекта в ходе загрузки страницы</Sentence>
      <Sentence ID="202">Режим отображения объекта</Sentence>
      <Sentence ID="203">Положение в визуальной иерархии объектов</Sentence>
      <Sentence ID="204">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="205">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="206">Ширина объекта в пикселях</Sentence>
      <Sentence ID="207">Высота объекта в пикселях</Sentence>
      <Sentence ID="208"></Sentence>
      <Sentence ID="209"></Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212">Имя класса CSS</Sentence>
      <Sentence ID="301">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="302">Неправильное значение, должен быть указан 0 или 1</Sentence>
      <Sentence ID="303">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="304">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="305">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="306">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="307">Неправильное значение, должно быть указано целое положительное число</Sentence>
      <Sentence ID="308"></Sentence>
      <Sentence ID="309"></Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312">Неправильное значение</Sentence>
      <Sentence ID="401">Не отображать</Sentence>
      <Sentence ID="402">Отображать</Sentence>
      <Sentence ID="403"></Sentence>
      <Sentence ID="404"></Sentence>
      <Sentence ID="501">Скрыть объект</Sentence>
      <Sentence ID="502">Сдвинуть объект в заданную точку</Sentence>
      <Sentence ID="503">Установить новый стиль CSS</Sentence>
      <Sentence ID="504">Показать объект</Sentence>
      <Sentence ID="505"></Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508"></Sentence>
      <Sentence ID="509"></Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="601">Скрыть</Sentence>
      <Sentence ID="602">Сдвинуть</Sentence>
      <Sentence ID="603">Установить стиль</Sentence>
      <Sentence ID="604">Показать</Sentence>
      <Sentence ID="605"></Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="701">Исчезновение</Sentence>
      <Sentence ID="702">Координата новой точки по оси X</Sentence>
      <Sentence ID="703">Координата новой точки по оси Y</Sentence>
      <Sentence ID="704">Эффект</Sentence>
      <Sentence ID="705">Установить стиль CSS</Sentence>
      <Sentence ID="706">Появление</Sentence>
      <Sentence ID="801">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="802">Координата новой точки по оси X</Sentence>
      <Sentence ID="803">Координата новой точки по оси Y</Sentence>
      <Sentence ID="804">Визуальный эффект при перетаскивании</Sentence>
      <Sentence ID="805">Новое значение стиля CSS</Sentence>
      <Sentence ID="806">Время появления в миллисекундах</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
      <Sentence ID="904"></Sentence>
      <Sentence ID="905"></Sentence>
    </Language>
    <Language Code="fr_FR">
      <Sentence ID="001">Envoi de fichier</Sentence>
      <Sentence ID="002">Champs de formulaire permettant l'envpoi de fichier</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Hiérarchie</Sentence>
      <Sentence ID="102">Visibilité</Sentence>
      <Sentence ID="103">Z-Index</Sentence>
      <Sentence ID="104">Haut</Sentence>
      <Sentence ID="105">Gauche</Sentence>
      <Sentence ID="106">Largeur</Sentence>
      <Sentence ID="107">Hauteur</Sentence>
      <Sentence ID="108"></Sentence>
      <Sentence ID="109"></Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112">CSS Class</Sentence>
      <Sentence ID="201">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
      <Sentence ID="202">Afficher ou cacher l'objet</Sentence>
      <Sentence ID="203">Niveau de superposition de l'objet par rapport aux autres</Sentence>
      <Sentence ID="204">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
      <Sentence ID="205">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
      <Sentence ID="206">Largeur de l'objet en pixels</Sentence>
      <Sentence ID="207">Hauteur de l'objet en pixels</Sentence>
      <Sentence ID="208"></Sentence>
      <Sentence ID="209"></Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212">CSS class name</Sentence>
      <Sentence ID="301">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="302">Valeur Incorrecte, doit être 0 ou 1</Sentence>
      <Sentence ID="303">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="304">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="305">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="306">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="307">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="308"></Sentence>
      <Sentence ID="309"></Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312">Incorrect value</Sentence>
      <Sentence ID="401">Invisible</Sentence>
      <Sentence ID="402">Visible</Sentence>
      <Sentence ID="403"></Sentence>
      <Sentence ID="404"></Sentence>
      <Sentence ID="501">Hide the object</Sentence>
      <Sentence ID="502">Move object to selected point</Sentence>
      <Sentence ID="503">Set new CSS style</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505"></Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="508"></Sentence>
      <Sentence ID="509"></Sentence>
      <Sentence ID="511"></Sentence>
      <Sentence ID="512"></Sentence>
      <Sentence ID="601">Hide</Sentence>
      <Sentence ID="602">moveTo</Sentence>
      <Sentence ID="603">setStyle</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605"></Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">cssStyleValue</Sentence>
      <Sentence ID="706">Fade</Sentence>
      <Sentence ID="801">Fade time</Sentence>
      <Sentence ID="802">X-coordinate of new point</Sentence>
      <Sentence ID="803">Y-coordinate of new point</Sentence>
      <Sentence ID="804">Visual effect by moving</Sentence>
      <Sentence ID="805">New CSS style value</Sentence>
      <Sentence ID="806">Time of appearance</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
      <Sentence ID="904"></Sentence>
      <Sentence ID="905"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="d3b7faa2-c2a1-5433-c92e-16f5bde8b918" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6QjdBRTY3NjFFQzE5MTFFMTg5NDY4NjgzOEIzNkZFNjMiIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6QjdBRTY3NjJFQzE5MTFFMTg5NDY4NjgzOEIzNkZFNjMiPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpCN0FFNjc1RkVDMTkxMUUxODk0
Njg2ODM4QjM2RkU2MyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDpCN0FFNjc2MEVDMTkxMUUx
ODk0Njg2ODM4QjM2RkU2MyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PtIsm/IAAAv3SURBVHja3FpLbB1XGf7PPO7MvXbq2I7t
CJUKkBCqAKmgqghBnISWkjQotiNg0U2lsmMBqBUsqiCxSB02KRvUTRHLViAlbSHEaStC0pCiCgTZ
gIAGmjR+24mf9zlz5vD//znzvHb8arLoTX7NzL1zzz3f+b7/dcZCKQUfhZez0wHOvfJ9XgnXLYEQ
AkBYfBR0tCw+pu/ZjQjvjSRAEEZ+vRHC0kodFhercHupCisrDWg2W2eeevp7L//ypV+ctug7th4j
Hg+U0OPqsfFgWz9/4VfS2vFSKJwasqqiCCKcobqD4ee+ktLHC18A4Y/AEgoYP10rGUgpH7z//gde
OvmzFz4byBCCIIQwlBBKNDqXdB2g0WeBQuCSprFjICRNpQwIc2RTMjlXmSMBV0rfa1kKHEdAybXA
c208t8G2RV+zsdq9sDB59sTzo5/H0fleWigVLxq5gzLXIFNpffGhT9NBZOYnMtfiTkB++syj6Zci
khFST/+siKSER4Wrjj+I56SMiD7je/DHbQEuSscr2VAic4VVt4XbbNRgdWXqE0Fr9ezo86NDhw8d
u0rjP/zI52jp+LsMBseJfdwpTFYYlrImCsByr6AV8EfSkhoEmYWTZn1LBoMy1mBoOOHgjwuWE62u
beMkHAtBEBjHwv9ehHObnZ0Bb3n2AXSD82PnXz18+NDI32nSJEE9dX0ev6wCC3Rtk++ieWhltA60
TrRdaPcVrd5oQaPZgnojADqnY6PRxPcCdFzUcoCGYCOUBmk9ktJIRPsHYgQX5eV7DplAMG65UsH7
FYzfnIAPrl8bWFyYfGPsjdce1vKSiby0tFQbEMswRCB8A4Am34XWbaynaLVaE6poq7U60Hmt1oBa
VR8bdQSE4MhhWwhKStJ6aPSuV5SAxH5CYMqeY1XKZeju3o0TUjA5QWD+04dgzo6OnnxEEV2GDRX7
S0FaMRueAUIsVMy1a+5tCw7L1YbWndDqs9ARyGycoYvOW/Jcjji+R36ieBiHFKZwmspivyFfcVxi
xYVyuSRs24Genl5Y7d8Dc3O3YXJ8kqQ6gLe+fuLEyW8d/8lzVwRFO8tOFM9Azo29KLMKQ5RNMzNz
rV04zp20KER9EEio14mBBtxaWIJb84swN78AC0srEFSX4DOfHICl+evg+yVeOV/pMWhk8g3tJkI7
veug00tihMd3Sx707unn35+fvw1Tk9OUj/Z+7OPq9IkTo98+fvy5y4IilwFiVljlDH/IQyuRWWi2
JVxcOWMiMXRSt1Qq4WrSJFyejOM4PNFWaMHXjjwFpXIP1Ootlliz2dS5IIzYZxRolkgmHkvLRdAu
TN58D5myodzRCXv6BqCvr5cDwuz0DEx88L+B+bmbv3v22R8f0vlLZoFEGSDmPInZ5gc1QL4WHERj
0BH/iFtCMLjytPolBGVjFBLomAcOH8MJ7QYdFAJoofMHFADI8U0+wEXhKOcgmLLvwL//+S77mGP7
4Jc7oBfB7OnrYcnOzc/C/NxEly0aYz/44TNPnjr1op8CMQOmgArHDCARZ2JB+QElQjThpImRsu9p
ILiyruNCs1HFIeqw/xtHoNLZm4AJDJgILV4YG8dzbR29gsYC/OPqFZhGBlooX8t2obNzN3T37IaK
56vVpcVoeuqmrNcWTl24cG4k4+yRdhoVy0wYx4xThzlnQKATEWgwpHWUngZDUccneXjgIhgMUjiZ
aejYZcPBJ47ApbEx9KdbvPqx/5GGI/IXwVldx5uyQBmuwLV//RUlGUKzhVGvheEbB8QaTQWhDMJQ
YTCUFSnV00PD333F0dNU7dkuzjU5QDo66dBJ9ZtKwLgoLw8nX6n40IFWr+Gxs8IrPn5jEmRIMnsC
3n7zPFRX5jOBBcNiCdnFMSwqMA0oAktRz0O/w8mjz1EeUshQZCEAD5kqITjRaoWPZRhRoAqZcT1A
cdzmDE4RiPRtx/Jy2GErFY8BVTCx9fTuhqWFKZjA5EbyHXz8cbj81luwujxraibF0R3LE7AcAmNT
NcPObptoFkqF7Co8AoMJJAEKRb1J+UlCDkhx7u0MCePcWTAaH2doSmolLa+ODh8lUeYisKcXo9Zq
L8xMz8PE+ASP+5VHH4N3LlyA5YVpzUikJVui8R3dAlAecpBqye8LBhLhHFBKDIgY8n2JfpgFEvuG
iPlIGVpLcjp6xU6vWSGnd5AVv+yhnkMGw5PDfNDX388Sm53B5DYxxUL+0v4D8OdLF2Hp9iRHLxqP
8oeH5rgu9xtUnxEYmoXLNRoX/syQRywhhqYfrcGIWXUQqZMbbzDhVuTTjgAOnSw5k6EpD4QhggnK
MDMzBV1dCK7SAf0De7kqnsekOT01zQn1ywcOwjsXL8Li/DiueGSSpR6YmLeQHSpTdBMF3KDpBGrz
jGSEAMMI1uhHYkAqIzeVMKTySTNpqGKH53xCDupRuPRhYvK/mAwxtNoeg+kbwOTW34MyxHwwNwcr
y3Pw9SPfhL69n8IoJfFeqs0Crs2kDJP+hRaRepe4LqN8Q9Wy79lU0qzX6qp8KM7ILef7kCHOOD/r
2lHs8FTcrVbr8P7716Gnuwt2daJUHB+6untQQhaG4ToCWcYBb8CDD30B3v1TFWrL08wwhXNydBqP
6ilbdzGaLQRjKWWaDPQlJe7Us2emq2DNnBKLLnZ+ozBmhYaNA0IV67CpqSm4hkcqVepY4rc4L4Rc
sjSb1/mcdH8fBMiWg6w6HCh0xyhRQhY3aBwlWX9a6iQ7pinvIwK2zk4+ktFq0u9wBFO65qKyooSR
zPNKUOF6Syc47LVNz6LrsHody5cFlFUL80aAITd0UF66f7FJt8gitcs0eYsSJ1cidtJcORsE3fz7
d5KbiWQkCYFOiGUlgnAZCEUzF0uYSktqJlp6U6GBoKgJoz6mjjY+G1J+0HUYb2YoHdHo3JKsJnJ2
+kwvmtRi2Xg7SOUmvBGgpEOzLMOU0kCciOUSYpnuY5QJAsrUWLK3CAgmznILauUG3MDPqPkKjSW7
MhQSqX8R1JhRJNNlqy51rLWArJvf230nA+jolUH47VcvZ6J2pDM+MWOyNDdQWFRFWI6UQp0HiBXf
kxBUEFTZ16V93MZGMrkmvWpZ6ZwVS4DUFQkBG2wHqTtsoKTh+ejlQa45j769L5cxLfYPXVCSDCgI
xOG55JlSBpPnLqzHOndVMN/sYhlF8bYPQGa/LDJFeGS2gZRhKir2I9t7DV0aBN7pMTZ0cR9ka7c4
8yegbNMC6x0T9htKoASIKgFQaQrjSapMNjMAIrMBwX2/sU0AUW36T0Bc2K/3xgo29Id9uSSaFJgG
GLFD/yjyEEMErISFYbnspYugUkQqkVu6SRfF13webYWRfCs89NbaIBIwbw5mmEkrgbgpI3YsA8pm
ydlc5XInqsy3FCSAVNEK4LYlreHzB0DQXtwGNjy2rwAGdHZOVh0yLIFuqhTkQrpKdZayFG+XRjLd
Rt0qkOHfH8QVF5u24bODGU6zdZrItMxpHIwFmZ10shGXk5faPiPDryOIELZsw68NFqQJ+WM2J6lM
jloTUOobuY3tzQIZOXNwU3Jaz0ZOD+br6EwvAyKtpHMQY2dXscyihC1VALYpICO/2R4TRRv59b58
SRNvZBQDSoa4HCjuqmJnVzlWNvXE6tXv/DF3fezlg5v2qTNPXixs9LcXnNTMqbbqOpVYErnMLo72
KaVrRitFvfVHb+FOngpli4VMHacK5VEim8y9dC0gfy+xYW3zGaLYCZA1wbQXnqogtziniOTpiMp8
bZuMiEDsYOaqvW9r2yfIf1VF8aMD08wl9ytTFUf3Slpi/R40s7OZPiZXSXYvPKzM9T46YqcLcA+l
lTKj2j5Ra5Z0KpNvVLEqEMIAvmeM5NuBoiekDi3g0l+mf4QnM2gTaLNot9FW0Or0y3+7+t6H9wcD
Qu7Mz7N7aKrwmPve/uVDuBMQRX/PsiLuMRApPkQQ6eM8w4gsPHW6e0C2Ki3VFqYyGT3jvObVpEf3
hvcsqLvByE50tca+v9kpNIyQUzcyYDbNzl0FotZLiirO0CIpIM3nFKGqBkzMyt1hRETbZ2O9zzK3
LGbCbSvDysbz+qj84dn/BRgAQ87h/YoJjhIAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="e1a89747-a860-32ae-4819-16f5e721b6ea" Name="Icon" Type="jpg"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6NDAyNEQ0OURFQzE5MTFFMTkzMTNEOTkyNDE5OTBCMzciIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6NDAyNEQ0OUVFQzE5MTFFMTkzMTNEOTkyNDE5OTBCMzciPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MDI0RDQ5QkVDMTkxMUUxOTMx
M0Q5OTI0MTk5MEIzNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MDI0RDQ5Q0VDMTkxMUUx
OTMxM0Q5OTI0MTk5MEIzNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PlPjWRUAAAHzSURBVHjahFM7T1RREP7muH9AfoAFjdhI
JZWNxS4IQVcDcbGyICQSE3tCYwtGExMLi22MDyAxKxgkGyFxW0PiP7Cy0Wi2E/bee844M+feu7tZ
jGf3u+c1883zEDOjc/AY+eD4lYmo2PWHnO21ntDgkev++orJqaqgBiUzFCSIKH/B283cbLUkqPQF
Ca3XT3HWqN99OOgf9j9+igpGQGKTg20fPTuQyZmrxaxYX72G+tKDQmcwXKLfP74wyMmKTIBkPTwT
jjsbeL/dxs3GKoYZGC6IdeYsxmfrPoq9hXFnGq23zxFENoisgkMQP3Nl5hwhg55Vjy6IcBQsxu3G
DHa3XuSySpSCfn7/LH4UMZ8zl68fTpRK7dq3mAsNR3Mg/7X7NdxYvGdJcNGqWhJPOMXs/gSohxIz
H8YRfCoyae5+ZiWOYadwXi8MGeZbk6BTGsHcu4t5zAkgckEIfJYYsWOfGMGt7SugP/gn5l9dgvcZ
MiNhU1Y9p5+Fl1dBJ/gv6s3Lkt8epDbRayGseGHaarTLXl9qTo904s5Kx/pCk+aDpFvkhKAL6wNh
8hKGJpCF7Cz3g9x7tex7tl7fbJJYHwvej1U0m0odmGJvntKIB4GTWEaJnaXUOhaW38THFELS1R5g
ju9DSnd+hCBLuv0X7Ybu/gowAMUkYJuZo2aTAAAAAElFTkSuQmCC]]></Resource>
    <Resource ID="e120cfa3-382b-dec8-dd33-16f6162944fa" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6NDAyNEQ0OURFQzE5MTFFMTkzMTNEOTkyNDE5OTBCMzciIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6NDAyNEQ0OUVFQzE5MTFFMTkzMTNEOTkyNDE5OTBCMzciPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MDI0RDQ5QkVDMTkxMUUxOTMx
M0Q5OTI0MTk5MEIzNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo0MDI0RDQ5Q0VDMTkxMUUx
OTMxM0Q5OTI0MTk5MEIzNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PlPjWRUAAAHzSURBVHjahFM7T1RREP7muH9AfoAFjdhI
JZWNxS4IQVcDcbGyICQSE3tCYwtGExMLi22MDyAxKxgkGyFxW0PiP7Cy0Wi2E/bee844M+feu7tZ
jGf3u+c1883zEDOjc/AY+eD4lYmo2PWHnO21ntDgkev++orJqaqgBiUzFCSIKH/B283cbLUkqPQF
Ca3XT3HWqN99OOgf9j9+igpGQGKTg20fPTuQyZmrxaxYX72G+tKDQmcwXKLfP74wyMmKTIBkPTwT
jjsbeL/dxs3GKoYZGC6IdeYsxmfrPoq9hXFnGq23zxFENoisgkMQP3Nl5hwhg55Vjy6IcBQsxu3G
DHa3XuSySpSCfn7/LH4UMZ8zl68fTpRK7dq3mAsNR3Mg/7X7NdxYvGdJcNGqWhJPOMXs/gSohxIz
H8YRfCoyae5+ZiWOYadwXi8MGeZbk6BTGsHcu4t5zAkgckEIfJYYsWOfGMGt7SugP/gn5l9dgvcZ
MiNhU1Y9p5+Fl1dBJ/gv6s3Lkt8epDbRayGseGHaarTLXl9qTo904s5Kx/pCk+aDpFvkhKAL6wNh
8hKGJpCF7Cz3g9x7tex7tl7fbJJYHwvej1U0m0odmGJvntKIB4GTWEaJnaXUOhaW38THFELS1R5g
ju9DSnd+hCBLuv0X7Ybu/gowAMUkYJuZo2aTAAAAAElFTkSuQmCC]]></Resource>
    <Resource ID="b4993ec8-6d66-8240-22a7-48fbbedfe371" Name="jquery.fileupload-n-plugins.js" Type="js"><![CDATA[Ci8qCiAqIGpRdWVyeSBGaWxlIFVwbG9hZCBQbHVnaW4gNC41LjEKICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvalF1ZXJ5LUZpbGUtVXBsb2FkCiAqCiAqIENvcHlyaWdodCAyMDEwLCBTZWJhc3RpYW4gVHNjaGFuCiAqIGh0dHBzOi8vYmx1ZWltcC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOgogKiBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9NSVQvCiAqLwoKLypqc2xpbnQgYnJvd3NlcjogdHJ1ZSwgdW5wYXJhbTogdHJ1ZSAqLwovKmdsb2JhbCBYTUxIdHRwUmVxdWVzdFVwbG9hZCwgRmlsZSwgRmlsZVJlYWRlciwgRm9ybURhdGEsIFByb2dyZXNzRXZlbnQsIHVuZXNjYXBlLCBqUXVlcnksIHVwbG9hZCAqLwoKKGZ1bmN0aW9uICgkKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIGRlZmF1bHROYW1lc3BhY2UgPSAnZmlsZV91cGxvYWQnLAogICAgICAgIHVuZGVmID0gJ3VuZGVmaW5lZCcsCiAgICAgICAgZnVuYyA9ICdmdW5jdGlvbicsCiAgICAgICAgRmlsZVVwbG9hZCwKICAgICAgICBtZXRob2RzLAoKICAgICAgICBNdWx0aUxvYWRlciA9IGZ1bmN0aW9uIChjYWxsQmFjaywgbnVtT3JMaXN0KSB7CiAgICAgICAgICAgIHZhciBsb2FkZWQgPSAwLAogICAgICAgICAgICAgICAgbGlzdCA9IFtdOwogICAgICAgICAgICBpZiAobnVtT3JMaXN0KSB7CiAgICAgICAgICAgICAgICBpZiAobnVtT3JMaXN0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGxpc3QgPSBudW1Pckxpc3Q7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGxpc3RbbnVtT3JMaXN0IC0gMV0gPSBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBsb2FkZWQgKz0gMTsKICAgICAgICAgICAgICAgIGlmIChsb2FkZWQgPT09IGxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2sobGlzdCk7CiAgICAgICAgICAgICAgICAgICAgbG9hZGVkID0gMDsKICAgICAgICAgICAgICAgICAgICBsaXN0ID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuZ2V0TGlzdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0OwogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgU2VxdWVuY2VIYW5kbGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2VxdWVuY2UgPSBbXTsKICAgICAgICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKGNhbGxCYWNrKSB7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZS5wdXNoKGNhbGxCYWNrKTsKICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZS5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsQmFjaygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZS5zaGlmdCgpOwogICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlWzBdKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKICAgICAgICAKICAgIEZpbGVVcGxvYWQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7CiAgICAgICAgdmFyIGZpbGVVcGxvYWQgPSB0aGlzLAogICAgICAgICAgICB1cGxvYWRGb3JtLAogICAgICAgICAgICBmaWxlSW5wdXQsCiAgICAgICAgICAgIHNldHRpbmdzID0gewogICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBkZWZhdWx0TmFtZXNwYWNlLAogICAgICAgICAgICAgICAgdXBsb2FkRm9ybUZpbHRlcjogZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZmlsZUlucHV0RmlsdGVyOiBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjc3NDbGFzczogZGVmYXVsdE5hbWVzcGFjZSwKICAgICAgICAgICAgICAgIGRyYWdEcm9wU3VwcG9ydDogdHJ1ZSwKICAgICAgICAgICAgICAgIGRyb3Bab25lOiBjb250YWluZXIsCiAgICAgICAgICAgICAgICB1cmw6IGZ1bmN0aW9uIChmb3JtKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm0uYXR0cignYWN0aW9uJyk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoZm9ybSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtLmF0dHIoJ21ldGhvZCcpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZpZWxkTmFtZTogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LmF0dHIoJ25hbWUnKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmb3JtRGF0YTogZnVuY3Rpb24gKGZvcm0pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybS5zZXJpYWxpemVBcnJheSgpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiBudWxsLAogICAgICAgICAgICAgICAgbXVsdGlwYXJ0OiB0cnVlLAogICAgICAgICAgICAgICAgbXVsdGlGaWxlUmVxdWVzdDogZmFsc2UsCiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLAogICAgICAgICAgICAgICAgZm9yY2VJZnJhbWVVcGxvYWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgc2VxdWVudGlhbFVwbG9hZHM6IGZhbHNlLAogICAgICAgICAgICAgICAgbWF4Q2h1bmtTaXplOiBudWxsLAogICAgICAgICAgICAgICAgbWF4RmlsZVJlYWRlclNpemU6IDUwMDAwMDAwLAogICAgICAgICAgICAgICAgcmVwbGFjZUZpbGVJbnB1dDogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICBkb2N1bWVudExpc3RlbmVycyA9IHt9LAogICAgICAgICAgICBkcm9wWm9uZUxpc3RlbmVycyA9IHt9LAogICAgICAgICAgICBwcm90b2NvbFJlZ0V4cCA9IC9eaHR0cChzKT86XC9cLy8sCiAgICAgICAgICAgIG9wdGlvbnNSZWZlcmVuY2UsCiAgICAgICAgICAgIG11bHRpTG9hZGVyID0gbmV3IE11bHRpTG9hZGVyKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uTG9hZEFsbCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uTG9hZEFsbChsaXN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIHNlcXVlbmNlSGFuZGxlciA9IG5ldyBTZXF1ZW5jZUhhbmRsZXIoKSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbXBsZXRlTmV4dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG11bHRpTG9hZGVyLmNvbXBsZXRlKCk7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZUhhbmRsZXIubmV4dCgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaXNYSFJVcGxvYWRDYXBhYmxlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gdW5kZWYgJiYgdHlwZW9mIFhNTEh0dHBSZXF1ZXN0VXBsb2FkICE9PSB1bmRlZiAmJgogICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSB1bmRlZiAmJiAoIXNldHRpbmdzLm11bHRpcGFydCB8fCB0eXBlb2YgRm9ybURhdGEgIT09IHVuZGVmIHx8CiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBGaWxlUmVhZGVyICE9PSB1bmRlZiAmJiB0eXBlb2YgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmRBc0JpbmFyeSA9PT0gZnVuYykpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaW5pdEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MuZHJhZ0Ryb3BTdXBwb3J0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkRvY3VtZW50RHJhZ0VudGVyID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TGlzdGVuZXJzWydkcmFnZW50ZXIuJyArIHNldHRpbmdzLm5hbWVzcGFjZV0gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25Eb2N1bWVudERyYWdFbnRlcihlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkRvY3VtZW50RHJhZ0xlYXZlID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TGlzdGVuZXJzWydkcmFnbGVhdmUuJyArIHNldHRpbmdzLm5hbWVzcGFjZV0gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25Eb2N1bWVudERyYWdMZWF2ZShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRMaXN0ZW5lcnNbJ2RyYWdvdmVyLicgICArIHNldHRpbmdzLm5hbWVzcGFjZV0gPSBmaWxlVXBsb2FkLm9uRG9jdW1lbnREcmFnT3ZlcjsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudExpc3RlbmVyc1snZHJvcC4nICAgICAgICsgc2V0dGluZ3MubmFtZXNwYWNlXSA9IGZpbGVVcGxvYWQub25Eb2N1bWVudERyb3A7CiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkuYmluZChkb2N1bWVudExpc3RlbmVycyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkRyYWdFbnRlciA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICBkcm9wWm9uZUxpc3RlbmVyc1snZHJhZ2VudGVyLicgKyBzZXR0aW5ncy5uYW1lc3BhY2VdID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRHJhZ0VudGVyKGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uRHJhZ0xlYXZlID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bab25lTGlzdGVuZXJzWydkcmFnbGVhdmUuJyArIHNldHRpbmdzLm5hbWVzcGFjZV0gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25EcmFnTGVhdmUoZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGRyb3Bab25lTGlzdGVuZXJzWydkcmFnb3Zlci4nICAgKyBzZXR0aW5ncy5uYW1lc3BhY2VdID0gZmlsZVVwbG9hZC5vbkRyYWdPdmVyOwogICAgICAgICAgICAgICAgICAgIGRyb3Bab25lTGlzdGVuZXJzWydkcm9wLicgICAgICAgKyBzZXR0aW5ncy5uYW1lc3BhY2VdID0gZmlsZVVwbG9hZC5vbkRyb3A7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuZHJvcFpvbmUuYmluZChkcm9wWm9uZUxpc3RlbmVycyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmaWxlSW5wdXQuYmluZCgnY2hhbmdlLicgKyBzZXR0aW5ncy5uYW1lc3BhY2UsIGZpbGVVcGxvYWQub25DaGFuZ2UpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVtb3ZlRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQuZWFjaChkb2N1bWVudExpc3RlbmVycywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS51bmJpbmQoa2V5LCB2YWx1ZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICQuZWFjaChkcm9wWm9uZUxpc3RlbmVycywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5kcm9wWm9uZS51bmJpbmQoa2V5LCB2YWx1ZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGZpbGVJbnB1dC51bmJpbmQoJ2NoYW5nZS4nICsgc2V0dGluZ3MubmFtZXNwYWNlKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGlzQ2h1bmtlZFVwbG9hZCA9IGZ1bmN0aW9uIChzZXR0aW5ncykgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzZXR0aW5ncy51cGxvYWRlZEJ5dGVzICE9PSB1bmRlZjsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNyZWF0ZVByb2dyZXNzRXZlbnQgPSBmdW5jdGlvbiAobGVuZ3RoQ29tcHV0YWJsZSwgbG9hZGVkLCB0b3RhbCkgewogICAgICAgICAgICAgICAgdmFyIGV2ZW50OwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PT0gZnVuYyAmJiB0eXBlb2YgUHJvZ3Jlc3NFdmVudCAhPT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdQcm9ncmVzc0V2ZW50Jyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5pbml0UHJvZ3Jlc3NFdmVudCAhPT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuaW5pdFByb2dyZXNzRXZlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvZ3Jlc3MnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aENvbXB1dGFibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbAogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZDogbG9hZGVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRvdGFsCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBsb2FkZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZXRQcm9ncmVzc1RvdGFsID0gZnVuY3Rpb24gKGZpbGVzLCBpbmRleCwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIHZhciBpLAogICAgICAgICAgICAgICAgICAgIHRvdGFsOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5wcm9ncmVzc1RvdGFsID09PSB1bmRlZikgewogICAgICAgICAgICAgICAgICAgIGlmIChmaWxlc1tpbmRleF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdG90YWwgPSBmaWxlc1tpbmRleF0uc2l6ZTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MucHJvZ3Jlc3NUb3RhbCA9IHRvdGFsID8gdG90YWwgOiAxOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBmaWxlc1tpXS5zaXplOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnByb2dyZXNzVG90YWwgPSB0b3RhbDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MucHJvZ3Jlc3NUb3RhbDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGhhbmRsZUdsb2JhbFByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzc0V2ZW50LAogICAgICAgICAgICAgICAgICAgIGxvYWRlckxpc3QsCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9hZGVkID0gMCwKICAgICAgICAgICAgICAgICAgICBnbG9iYWxUb3RhbCA9IDA7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubGVuZ3RoQ29tcHV0YWJsZSAmJiB0eXBlb2Ygc2V0dGluZ3Mub25Qcm9ncmVzc0FsbCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnByb2dyZXNzTG9hZGVkID0gcGFyc2VJbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsICogZ2V0UHJvZ3Jlc3NUb3RhbChmaWxlcywgaW5kZXgsIHNldHRpbmdzKSwKICAgICAgICAgICAgICAgICAgICAgICAgMTAKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIGxvYWRlckxpc3QgPSBtdWx0aUxvYWRlci5nZXRMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGxvYWRlckxpc3QsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVtIGlzIGFuIGFycmF5IHdpdGggW2ZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5nc10KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9hZGVkICs9IGl0ZW1bM10ucHJvZ3Jlc3NMb2FkZWQgfHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVG90YWwgKz0gZ2V0UHJvZ3Jlc3NUb3RhbChpdGVtWzBdLCBpdGVtWzFdLCBpdGVtWzNdKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0V2ZW50ID0gY3JlYXRlUHJvZ3Jlc3NFdmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9hZGVkLAogICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxUb3RhbAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25Qcm9ncmVzc0FsbChwcm9ncmVzc0V2ZW50LCBsb2FkZXJMaXN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGhhbmRsZUxvYWRFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3NFdmVudDsKICAgICAgICAgICAgICAgIGlmIChpc0NodW5rZWRVcGxvYWQoc2V0dGluZ3MpKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MudXBsb2FkZWRCeXRlcyArPSBzZXR0aW5ncy5jaHVua1NpemU7CiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NFdmVudCA9IGNyZWF0ZVByb2dyZXNzRXZlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnVwbG9hZGVkQnl0ZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzW2luZGV4XS5zaXplCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uUHJvZ3Jlc3MgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25Qcm9ncmVzcyhwcm9ncmVzc0V2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYW5kbGVHbG9iYWxQcm9ncmVzcyhwcm9ncmVzc0V2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy51cGxvYWRlZEJ5dGVzIDwgZmlsZXNbaW5kZXhdLnNpemUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5yZXN1bWVVcGxvYWQgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnJlc3VtZVVwbG9hZCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWQoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2V0dGluZ3MucHJvZ3Jlc3NMb2FkZWQgPSBnZXRQcm9ncmVzc1RvdGFsKGZpbGVzLCBpbmRleCwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkxvYWQgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkxvYWQoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb21wbGV0ZU5leHQoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGhhbmRsZVByb2dyZXNzRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzRXZlbnQgPSBldmVudDsKICAgICAgICAgICAgICAgIGlmIChpc0NodW5rZWRVcGxvYWQoc2V0dGluZ3MpICYmIGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHsKICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0V2ZW50ID0gY3JlYXRlUHJvZ3Jlc3NFdmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MudXBsb2FkZWRCeXRlcyArIHBhcnNlSW50KGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsICogc2V0dGluZ3MuY2h1bmtTaXplLCAxMCksCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzW2luZGV4XS5zaXplCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mub25Qcm9ncmVzcyA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uUHJvZ3Jlc3MocHJvZ3Jlc3NFdmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGhhbmRsZUdsb2JhbFByb2dyZXNzKHByb2dyZXNzRXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICBpbml0VXBsb2FkRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uIChmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIGlmICh4aHIudXBsb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3NFdmVudChlLCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVMb2FkRXZlbnQoZSwgZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MucHJvZ3Jlc3NUb3RhbCA9IHNldHRpbmdzLnByb2dyZXNzTG9hZGVkOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mub25BYm9ydCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkFib3J0KGUsIGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTmV4dCgpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5wcm9ncmVzc1RvdGFsID0gc2V0dGluZ3MucHJvZ3Jlc3NMb2FkZWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkVycm9yID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRXJyb3IoZSwgZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVOZXh0KCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgZ2V0VXJsID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLnVybCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy51cmwoc2V0dGluZ3MudXBsb2FkRm9ybSB8fCB1cGxvYWRGb3JtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy51cmw7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICBnZXRNZXRob2QgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MubWV0aG9kID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLm1ldGhvZChzZXR0aW5ncy51cGxvYWRGb3JtIHx8IHVwbG9hZEZvcm0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLm1ldGhvZDsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGdldEZpZWxkTmFtZSA9IGZ1bmN0aW9uIChzZXR0aW5ncykgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5maWVsZE5hbWUgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MuZmllbGROYW1lKHNldHRpbmdzLmZpbGVJbnB1dCB8fCBmaWxlSW5wdXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLmZpZWxkTmFtZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGdldEZvcm1EYXRhID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGE7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmZvcm1EYXRhID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLmZvcm1EYXRhKHNldHRpbmdzLnVwbG9hZEZvcm0gfHwgdXBsb2FkRm9ybSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCQuaXNBcnJheShzZXR0aW5ncy5mb3JtRGF0YSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MuZm9ybURhdGE7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNldHRpbmdzLmZvcm1EYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEgPSBbXTsKICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2V0dGluZ3MuZm9ybURhdGEsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybURhdGE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpc1NhbWVEb21haW4gPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICBpZiAocHJvdG9jb2xSZWdFeHAudGVzdCh1cmwpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGhvc3QgPSBsb2NhdGlvbi5ob3N0LAogICAgICAgICAgICAgICAgICAgICAgICBpbmRleFN0YXJ0ID0gbG9jYXRpb24ucHJvdG9jb2wubGVuZ3RoICsgMiwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB1cmwuaW5kZXhPZihob3N0LCBpbmRleFN0YXJ0KSwKICAgICAgICAgICAgICAgICAgICAgICAgcGF0aEluZGV4ID0gaW5kZXggKyBob3N0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAoKGluZGV4ID09PSBpbmRleFN0YXJ0IHx8IGluZGV4ID09PSB1cmwuaW5kZXhPZignQCcsIGluZGV4U3RhcnQpICsgMSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1cmwubGVuZ3RoID09PSBwYXRoSW5kZXggfHwgJC5pbkFycmF5KHVybC5jaGFyQXQocGF0aEluZGV4KSwgWycvJywgJz8nLCAnIyddKSAhPT0gLTEpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRVcGxvYWRSZXF1ZXN0ID0gZnVuY3Rpb24gKGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1tpbmRleF0sCiAgICAgICAgICAgICAgICAgICAgdXJsID0gZ2V0VXJsKHNldHRpbmdzKSwKICAgICAgICAgICAgICAgICAgICBzYW1lRG9tYWluID0gaXNTYW1lRG9tYWluKHVybCk7CiAgICAgICAgICAgICAgICB4aHIub3BlbihnZXRNZXRob2Qoc2V0dGluZ3MpLCB1cmwsIHRydWUpOwogICAgICAgICAgICAgICAgaWYgKHNhbWVEb21haW4pIHsKICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpOwogICAgICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MubXVsdGlwYXJ0IHx8IGlzQ2h1bmtlZFVwbG9hZChzZXR0aW5ncykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtRmlsZS1OYW1lJywgZmlsZS5uYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtRmlsZS1UeXBlJywgZmlsZS50eXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtRmlsZS1TaXplJywgZmlsZS5zaXplKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NodW5rZWRVcGxvYWQoc2V0dGluZ3MpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgZmlsZS50eXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc2V0dGluZ3MubXVsdGlwYXJ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy53aXRoQ3JlZGVudGlhbHMpIHsKICAgICAgICAgICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoc2V0dGluZ3MucmVxdWVzdEhlYWRlcnMpKSB7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHNldHRpbmdzLnJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiAoaW5kZXgsIGhlYWRlcikgewogICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIubmFtZSwgaGVhZGVyLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MucmVxdWVzdEhlYWRlcnMpIHsKICAgICAgICAgICAgICAgICAgICAkLmVhY2goc2V0dGluZ3MucmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBmb3JtRGF0YVVwbG9hZCA9IGZ1bmN0aW9uIChmaWxlcywgeGhyLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCksCiAgICAgICAgICAgICAgICAgICAgaTsKICAgICAgICAgICAgICAgICQuZWFjaChnZXRGb3JtRGF0YShzZXR0aW5ncyksIGZ1bmN0aW9uIChpbmRleCwgZmllbGQpIHsKICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoZmllbGQubmFtZSwgZmllbGQudmFsdWUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoZ2V0RmllbGROYW1lKHNldHRpbmdzKSwgZmlsZXNbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbG9hZEZpbGVDb250ZW50ID0gZnVuY3Rpb24gKGZpbGUsIGNhbGxCYWNrKSB7CiAgICAgICAgICAgICAgICBmaWxlLnJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICAgICAgICBmaWxlLnJlYWRlci5vbmxvYWQgPSBjYWxsQmFjazsKICAgICAgICAgICAgICAgIGZpbGUucmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHV0ZjhlbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgYnVpbGRNdWx0aVBhcnRGb3JtRGF0YSA9IGZ1bmN0aW9uIChib3VuZGFyeSwgZmlsZXMsIGZpbGVzRmllbGROYW1lLCBmaWVsZHMpIHsKICAgICAgICAgICAgICAgIHZhciBkb3VibGVEYXNoID0gJy0tJywKICAgICAgICAgICAgICAgICAgICBjcmxmICAgICA9ICdcclxuJywKICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSA9ICcnLAogICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdOwogICAgICAgICAgICAgICAgJC5lYWNoKGZpZWxkcywgZnVuY3Rpb24gKGluZGV4LCBmaWVsZCkgewogICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhICs9IGRvdWJsZURhc2ggKyBib3VuZGFyeSArIGNybGYgKwogICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPSInICsKICAgICAgICAgICAgICAgICAgICAgICAgdXRmOGVuY29kZShmaWVsZC5uYW1lKSArCiAgICAgICAgICAgICAgICAgICAgICAgICciJyArIGNybGYgKyBjcmxmICsKICAgICAgICAgICAgICAgICAgICAgICAgdXRmOGVuY29kZShmaWVsZC52YWx1ZSkgKyBjcmxmOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkLmVhY2goZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkgewogICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhICs9IGRvdWJsZURhc2ggKyBib3VuZGFyeSArIGNybGYgKwogICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPSInICsKICAgICAgICAgICAgICAgICAgICAgICAgdXRmOGVuY29kZShmaWxlc0ZpZWxkTmFtZSkgKwogICAgICAgICAgICAgICAgICAgICAgICAnIjsgZmlsZW5hbWU9IicgKyB1dGY4ZW5jb2RlKGZpbGUubmFtZSkgKyAnIicgKyBjcmxmICsKICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZTogJyArIHV0ZjhlbmNvZGUoZmlsZS50eXBlKSArIGNybGYgKyBjcmxmOwogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGZvcm1EYXRhKTsKICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaChmaWxlLnJlYWRlci5yZXN1bHQpOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWxlLnJlYWRlcjsKICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSA9IGNybGY7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGZvcm1EYXRhICs9IGRvdWJsZURhc2ggKyBib3VuZGFyeSArIGRvdWJsZURhc2ggKyBjcmxmOwogICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goZm9ybURhdGEpOwogICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5qb2luKCcnKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgICAgIGZpbGVSZWFkZXJVcGxvYWQgPSBmdW5jdGlvbiAoZmlsZXMsIHhociwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9ICctLS0tTXVsdGlQYXJ0Rm9ybUJvdW5kYXJ5JyArIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCksCiAgICAgICAgICAgICAgICAgICAgbG9hZGVyLAogICAgICAgICAgICAgICAgICAgIGk7CiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ211bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PScgKyBib3VuZGFyeSk7CiAgICAgICAgICAgICAgICBsb2FkZXIgPSBuZXcgTXVsdGlMb2FkZXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHhoci5zZW5kQXNCaW5hcnkoYnVpbGRNdWx0aVBhcnRGb3JtRGF0YSgKICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnksCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLAogICAgICAgICAgICAgICAgICAgICAgICBnZXRGaWVsZE5hbWUoc2V0dGluZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBnZXRGb3JtRGF0YShzZXR0aW5ncykKICAgICAgICAgICAgICAgICAgICApKTsKICAgICAgICAgICAgICAgIH0sIGZpbGVzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBsb2FkRmlsZUNvbnRlbnQoZmlsZXNbaV0sIGxvYWRlci5jb21wbGV0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZXRCbG9iID0gZnVuY3Rpb24gKGZpbGUsIHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICB2YXIgYmxvYiwKICAgICAgICAgICAgICAgICAgICB1YiA9IHNldHRpbmdzLnVwbG9hZGVkQnl0ZXMsCiAgICAgICAgICAgICAgICAgICAgbWNzID0gc2V0dGluZ3MubWF4Q2h1bmtTaXplOwogICAgICAgICAgICAgICAgaWYgKGZpbGUgJiYgdHlwZW9mIGZpbGUuc2xpY2UgPT09IGZ1bmMgJiYgKHViIHx8IChtY3MgJiYgbWNzIDwgZmlsZS5zaXplKSkpIHsKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy51cGxvYWRlZEJ5dGVzID0gdWIgPSB1YiB8fCAwOwogICAgICAgICAgICAgICAgICAgIGJsb2IgPSBmaWxlLnNsaWNlKHViLCBtY3MgfHwgZmlsZS5zaXplIC0gdWIpOwogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmNodW5rU2l6ZSA9IGJsb2Iuc2l6ZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvYjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBmaWxlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdXBsb2FkID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MsIG5leHRDaHVuaykgewogICAgICAgICAgICAgICAgdmFyIHNlbmQ7CiAgICAgICAgICAgICAgICBzZW5kID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGlmICghbmV4dENodW5rKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mub25TZW5kID09PSBmdW5jICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25TZW5kKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgc2V0dGluZ3MpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVOZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBnZXRCbG9iKGZpbGVzW2luZGV4XSwgc2V0dGluZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlc1RvVXBsb2FkOwogICAgICAgICAgICAgICAgICAgIGluaXRVcGxvYWRFdmVudEhhbmRsZXJzKGZpbGVzLCBpbmRleCwgeGhyLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgaW5pdFVwbG9hZFJlcXVlc3QoZmlsZXMsIGluZGV4LCB4aHIsIHNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzLm11bHRpcGFydCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnVwbG9hZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoYmxvYik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgWEhSIGZpbGUgdXBsb2FkcycpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXNUb1VwbG9hZCA9ICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSA/IFtibG9iXSA6IGZpbGVzOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEZvcm1EYXRhICE9PSB1bmRlZikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGFVcGxvYWQoZmlsZXNUb1VwbG9hZCwgeGhyLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEZpbGVSZWFkZXIgIT09IHVuZGVmICYmIHR5cGVvZiB4aHIuc2VuZEFzQmluYXJ5ID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZGVyVXBsb2FkKGZpbGVzVG9VcGxvYWQsIHhociwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lcnJvcignQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IG11bHRpcGFydC9mb3JtLWRhdGEgWEhSIGZpbGUgdXBsb2FkcycpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICghbmV4dENodW5rKSB7CiAgICAgICAgICAgICAgICAgICAgbXVsdGlMb2FkZXIucHVzaChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3Muc2VxdWVudGlhbFVwbG9hZHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VIYW5kbGVyLnB1c2goc2VuZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZW5kKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoYW5kbGVVcGxvYWQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbnB1dCwgZm9ybSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSwKICAgICAgICAgICAgICAgICAgICB1cGxvYWRTZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICB1cGxvYWRTZXR0aW5ncy5maWxlSW5wdXQgPSBpbnB1dDsKICAgICAgICAgICAgICAgIHVwbG9hZFNldHRpbmdzLnVwbG9hZEZvcm0gPSBmb3JtOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGxvYWRTZXR0aW5ncy5pbml0VXBsb2FkID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkU2V0dGluZ3MuaW5pdFVwbG9hZCgKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLAogICAgICAgICAgICAgICAgICAgICAgICBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgeGhyLAogICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRTZXR0aW5ncywKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgdXBsb2FkU2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgdXBsb2FkU2V0dGluZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaGFuZGxlTGVnYWN5R2xvYmFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbmRleCwgaWZyYW1lLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gMCwKICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0V2ZW50OwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgICAgICAkLmVhY2goZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBmaWxlLnNpemUgPyBmaWxlLnNpemUgOiAxOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IGZpbGVzW2luZGV4XS5zaXplID8gZmlsZXNbaW5kZXhdLnNpemUgOiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcHJvZ3Jlc3NFdmVudCA9IGNyZWF0ZVByb2dyZXNzRXZlbnQodHJ1ZSwgdG90YWwsIHRvdGFsKTsKICAgICAgICAgICAgICAgIHNldHRpbmdzLnByb2dyZXNzTG9hZGVkID0gdG90YWw7CiAgICAgICAgICAgICAgICBoYW5kbGVHbG9iYWxQcm9ncmVzcyhwcm9ncmVzc0V2ZW50LCBmaWxlcywgaW5kZXgsIGlmcmFtZSwgc2V0dGluZ3MpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbGVnYWN5VXBsb2FkRm9ybURhdGFJbml0ID0gZnVuY3Rpb24gKGlucHV0LCBmb3JtLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gZ2V0Rm9ybURhdGEoc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgZm9ybS5maW5kKCc6aW5wdXQnKS5ub3QoJzpkaXNhYmxlZCcpCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSkKICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moc2V0dGluZ3MubmFtZXNwYWNlICsgJ19kaXNhYmxlZCcpOwogICAgICAgICAgICAgICAgJC5lYWNoKGZvcm1EYXRhLCBmdW5jdGlvbiAoaW5kZXgsIGZpZWxkKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnPGlucHV0IHR5cGU9ImhpZGRlbiIvPicpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgZmllbGQubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgLnZhbChmaWVsZC52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLm5hbWVzcGFjZSArICdfZm9ybV9kYXRhJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKGZvcm0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpbnB1dAogICAgICAgICAgICAgICAgICAgIC5hdHRyKCduYW1lJywgZ2V0RmllbGROYW1lKHNldHRpbmdzKSkKICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZm9ybSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBsZWdhY3lVcGxvYWRGb3JtRGF0YVJlc2V0ID0gZnVuY3Rpb24gKGlucHV0LCBmb3JtLCBzZXR0aW5ncykgewogICAgICAgICAgICAgICAgaW5wdXQuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICBmb3JtLmZpbmQoJy4nICsgc2V0dGluZ3MubmFtZXNwYWNlICsgJ19kaXNhYmxlZCcpCiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykKICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3Moc2V0dGluZ3MubmFtZXNwYWNlICsgJ19kaXNhYmxlZCcpOwogICAgICAgICAgICAgICAgZm9ybS5maW5kKCcuJyArIHNldHRpbmdzLm5hbWVzcGFjZSArICdfZm9ybV9kYXRhJykucmVtb3ZlKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBsZWdhY3lVcGxvYWQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbnB1dCwgZm9ybSwgaWZyYW1lLCBzZXR0aW5ncywgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHZhciBzZW5kOwogICAgICAgICAgICAgICAgc2VuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uU2VuZCA9PT0gZnVuYyAmJiBzZXR0aW5ncy5vblNlbmQoZXZlbnQsIGZpbGVzLCBpbmRleCwgaWZyYW1lLCBzZXR0aW5ncykgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTmV4dCgpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbEF0dHJpYnV0ZXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiBmb3JtLmF0dHIoJ2FjdGlvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAnbWV0aG9kJzogZm9ybS5hdHRyKCdtZXRob2QnKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGZvcm0uYXR0cigndGFyZ2V0JyksCiAgICAgICAgICAgICAgICAgICAgICAgICdlbmN0eXBlJzogZm9ybS5hdHRyKCdlbmN0eXBlJykKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGlmcmFtZQogICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKCdhYm9ydCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdhYm9ydCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUucmVhZHlTdGF0ZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqYXZhc2NyaXB0OmZhbHNlIGFzIGlmcmFtZSBzcmMgcHJldmVudHMgd2FybmluZyBwb3B1cHMgb24gSFRUUFMgaW4gSUU2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25jYXQgaXMgdXNlZCBoZXJlIHRvIHByZXZlbnQgdGhlICJTY3JpcHQgVVJMIiBKU0xpbnQgZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUudW5iaW5kKCdsb2FkJykuYXR0cignc3JjJywgJ2phdmFzY3JpcHQnLmNvbmNhdCgnOmZhbHNlOycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUxlZ2FjeUdsb2JhbFByb2dyZXNzKGUsIGZpbGVzLCBpbmRleCwgaWZyYW1lLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uQWJvcnQgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkFib3J0KGUsIGZpbGVzLCBpbmRleCwgaWZyYW1lLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZU5leHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLnVuYmluZCgnbG9hZCcpCiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdsb2FkJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZS5yZWFkeVN0YXRlID0gNDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUxlZ2FjeUdsb2JhbFByb2dyZXNzKGUsIGZpbGVzLCBpbmRleCwgaWZyYW1lLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uTG9hZCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uTG9hZChlLCBmaWxlcywgaW5kZXgsIGlmcmFtZSwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4IGZvciBJRSBlbmRsZXNzIHByb2dyZXNzIGJhciBhY3Rpdml0eSBidWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChoYXBwZW5zIG9uIGZvcm0gc3VibWl0cyB0byBpZnJhbWUgdGFyZ2V0cyk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8aWZyYW1lIHNyYz0iamF2YXNjcmlwdDpmYWxzZTsiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48L2lmcmFtZT4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhmb3JtKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTmV4dCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhY3Rpb24nLCBnZXRVcmwoc2V0dGluZ3MpKQogICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignbWV0aG9kJywgZ2V0TWV0aG9kKHNldHRpbmdzKSkKICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RhcmdldCcsIGlmcmFtZS5hdHRyKCduYW1lJykpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdlbmN0eXBlJywgJ211bHRpcGFydC9mb3JtLWRhdGEnKTsKICAgICAgICAgICAgICAgICAgICBsZWdhY3lVcGxvYWRGb3JtRGF0YUluaXQoaW5wdXQsIGZvcm0sIHNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICBpZnJhbWUucmVhZHlTdGF0ZSA9IDI7CiAgICAgICAgICAgICAgICAgICAgZm9ybS5nZXQoMCkuc3VibWl0KCk7CiAgICAgICAgICAgICAgICAgICAgbGVnYWN5VXBsb2FkRm9ybURhdGFSZXNldChpbnB1dCwgZm9ybSwgc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICQuZWFjaChvcmlnaW5hbEF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihuYW1lLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlbW92ZUF0dHIobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBtdWx0aUxvYWRlci5wdXNoKFtmaWxlcywgaW5kZXgsIGlmcmFtZSwgc2V0dGluZ3NdKTsKICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5zZXF1ZW50aWFsVXBsb2FkcykgewogICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlSGFuZGxlci5wdXNoKHNlbmQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzZW5kKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBub3JtYWxpemVGaWxlID0gZnVuY3Rpb24gKGluZGV4LCBmaWxlKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbGUubmFtZSA9PT0gdW5kZWYgJiYgdHlwZW9mIGZpbGUuc2l6ZSA9PT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlLm5hbWUgPSBmaWxlLmZpbGVOYW1lOwogICAgICAgICAgICAgICAgICAgIGZpbGUuc2l6ZSA9IGZpbGUuZmlsZVNpemU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoYW5kbGVMZWdhY3lVcGxvYWQgPSBmdW5jdGlvbiAoZXZlbnQsIGlucHV0LCBmb3JtLCBpbmRleCkgewogICAgICAgICAgICAgICAgaWYgKCEoZXZlbnQgJiYgaW5wdXQgJiYgZm9ybSkpIHsKICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdJZnJhbWUgYmFzZWQgRmlsZSBVcGxvYWQgcmVxdWlyZXMgYSBmaWxlIGlucHV0IGNoYW5nZSBldmVudCcpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGphdmFzY3JpcHQ6ZmFsc2UgYXMgaWZyYW1lIHNyYyBwcmV2ZW50cyB3YXJuaW5nIHBvcHVwcyBvbiBIVFRQUyBpbiBJRTY6CiAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gJCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6ZmFsc2U7IiBzdHlsZT0iZGlzcGxheTpub25lOyIgbmFtZT0iaWZyYW1lXycgKwogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm5hbWVzcGFjZSArICdfJyArIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgKyAnIj48L2lmcmFtZT4nKSwKICAgICAgICAgICAgICAgICAgICB1cGxvYWRTZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBzZXR0aW5ncyksCiAgICAgICAgICAgICAgICAgICAgZmlsZXMgPSBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmZpbGVzOwogICAgICAgICAgICAgICAgZmlsZXMgPSBmaWxlcyA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpbGVzLCAwKSA6IFt7bmFtZTogaW5wdXQudmFsKCksIHR5cGU6IG51bGwsIHNpemU6IG51bGx9XTsKICAgICAgICAgICAgICAgICQuZWFjaChmaWxlcywgbm9ybWFsaXplRmlsZSk7CiAgICAgICAgICAgICAgICBpbmRleCA9IGZpbGVzLmxlbmd0aCA9PT0gMSA/IDAgOiBpbmRleDsKICAgICAgICAgICAgICAgIHVwbG9hZFNldHRpbmdzLmZpbGVJbnB1dCA9IGlucHV0OwogICAgICAgICAgICAgICAgdXBsb2FkU2V0dGluZ3MudXBsb2FkRm9ybSA9IGZvcm07CiAgICAgICAgICAgICAgICBpZnJhbWUucmVhZHlTdGF0ZSA9IDA7CiAgICAgICAgICAgICAgICBpZnJhbWUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnRyaWdnZXIoJ2Fib3J0Jyk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWZyYW1lLmJpbmQoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnVuYmluZCgnbG9hZCcpOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkU2V0dGluZ3MuaW5pdFVwbG9hZCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRTZXR0aW5ncy5pbml0VXBsb2FkKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkU2V0dGluZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVnYWN5VXBsb2FkKGV2ZW50LCBmaWxlcywgaW5wdXQsIGZvcm0sIGlmcmFtZSwgdXBsb2FkU2V0dGluZ3MsIGluZGV4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBsZWdhY3lVcGxvYWQoZXZlbnQsIGZpbGVzLCBpbnB1dCwgZm9ybSwgaWZyYW1lLCB1cGxvYWRTZXR0aW5ncywgaW5kZXgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKGZvcm0pOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY2FuSGFuZGxlWEhSVXBsb2FkU2l6ZSA9IGZ1bmN0aW9uIChmaWxlcykgewogICAgICAgICAgICAgICAgdmFyIGJ5dGVzID0gMCwKICAgICAgICAgICAgICAgICAgICB0b3RhbEJ5dGVzID0gMCwKICAgICAgICAgICAgICAgICAgICBpOwogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLm11bHRpcGFydCAmJiB0eXBlb2YgRm9ybURhdGEgPT09IHVuZGVmKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzID0gZmlsZXNbaV0uc2l6ZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ5dGVzID4gc2V0dGluZ3MubWF4RmlsZVJlYWRlclNpemUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEJ5dGVzICs9IGJ5dGVzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MubXVsdGlGaWxlUmVxdWVzdCAmJiB0b3RhbEJ5dGVzID4gc2V0dGluZ3MubWF4RmlsZVJlYWRlclNpemUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaGFuZGxlRmlsZXMgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbnB1dCwgZm9ybSkgewogICAgICAgICAgICAgICAgaWYgKCFjYW5IYW5kbGVYSFJVcGxvYWRTaXplKGZpbGVzKSkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZUxlZ2FjeVVwbG9hZChldmVudCwgaW5wdXQsIGZvcm0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICAgICAgZmlsZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaWxlcywgMCk7CiAgICAgICAgICAgICAgICAkLmVhY2goZmlsZXMsIG5vcm1hbGl6ZUZpbGUpOwogICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLm11bHRpRmlsZVJlcXVlc3QgJiYgc2V0dGluZ3MubXVsdGlwYXJ0ICYmIGZpbGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZVVwbG9hZChldmVudCwgZmlsZXMsIGlucHV0LCBmb3JtKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVVwbG9hZChldmVudCwgZmlsZXMsIGlucHV0LCBmb3JtLCBpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICBpbml0VXBsb2FkRm9ybSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHVwbG9hZEZvcm0gPSAoY29udGFpbmVyLmlzKCdmb3JtJykgPyBjb250YWluZXIgOiBjb250YWluZXIuZmluZCgnZm9ybScpKQogICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoc2V0dGluZ3MudXBsb2FkRm9ybUZpbHRlcik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICBpbml0RmlsZUlucHV0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZmlsZUlucHV0ID0gKHVwbG9hZEZvcm0ubGVuZ3RoID8gdXBsb2FkRm9ybSA6IGNvbnRhaW5lcikuZmluZCgnaW5wdXQ6ZmlsZScpCiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihzZXR0aW5ncy5maWxlSW5wdXRGaWx0ZXIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICAKICAgICAgICAgICAgcmVwbGFjZUZpbGVJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICAgICAgdmFyIGlucHV0Q2xvbmUgPSBpbnB1dC5jbG9uZSh0cnVlKTsKICAgICAgICAgICAgICAgICQoJzxmb3JtLz4nKS5hcHBlbmQoaW5wdXRDbG9uZSkuZ2V0KDApLnJlc2V0KCk7CiAgICAgICAgICAgICAgICBpbnB1dC5hZnRlcihpbnB1dENsb25lKS5kZXRhY2goKTsKICAgICAgICAgICAgICAgIGluaXRGaWxlSW5wdXQoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgdGhpcy5vbkRvY3VtZW50RHJhZ092ZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uRG9jdW1lbnREcmFnT3ZlciA9PT0gZnVuYyAmJgogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRG9jdW1lbnREcmFnT3ZlcihlKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLm9uRG9jdW1lbnREcm9wID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkRvY3VtZW50RHJvcCA9PT0gZnVuYyAmJgogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRG9jdW1lbnREcm9wKGUpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLm9uRHJhZ092ZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uRHJhZ092ZXIgPT09IGZ1bmMgJiYKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkRyYWdPdmVyKGUpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBkYXRhVHJhbnNmZXIgPSBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyOwogICAgICAgICAgICBpZiAoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcykgewogICAgICAgICAgICAgICAgZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSBkYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdjb3B5JzsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMub25Ecm9wID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5vbkRyb3AgPT09IGZ1bmMgJiYKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkRyb3AoZSkgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGRhdGFUcmFuc2ZlciA9IGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXI7CiAgICAgICAgICAgIGlmIChkYXRhVHJhbnNmZXIgJiYgZGF0YVRyYW5zZmVyLmZpbGVzICYmIGlzWEhSVXBsb2FkQ2FwYWJsZSgpKSB7CiAgICAgICAgICAgICAgICBoYW5kbGVGaWxlcyhlLCBkYXRhVHJhbnNmZXIuZmlsZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm9uQ2hhbmdlID09PSBmdW5jICYmCiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25DaGFuZ2UoZSkgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlucHV0ID0gJChlLnRhcmdldCksCiAgICAgICAgICAgICAgICBmb3JtID0gJChlLnRhcmdldC5mb3JtKTsKICAgICAgICAgICAgaWYgKGZvcm0ubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MucmVwbGFjZUZpbGVJbnB1dCkgewogICAgICAgICAgICAgICAgICAgIGlucHV0LmRhdGEoZGVmYXVsdE5hbWVzcGFjZSArICdfZm9ybScsIGZvcm0pOwogICAgICAgICAgICAgICAgICAgIHJlcGxhY2VGaWxlSW5wdXQoaW5wdXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZm9ybSA9IGlucHV0LmRhdGEoZGVmYXVsdE5hbWVzcGFjZSArICdfZm9ybScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghc2V0dGluZ3MuZm9yY2VJZnJhbWVVcGxvYWQgJiYgZS50YXJnZXQuZmlsZXMgJiYgaXNYSFJVcGxvYWRDYXBhYmxlKCkpIHsKICAgICAgICAgICAgICAgIGhhbmRsZUZpbGVzKGUsIGUudGFyZ2V0LmZpbGVzLCBpbnB1dCwgZm9ybSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBoYW5kbGVMZWdhY3lVcGxvYWQoZSwgaW5wdXQsIGZvcm0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHsKICAgICAgICAgICAgICAgICQuZXh0ZW5kKHNldHRpbmdzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIG9wdGlvbnNSZWZlcmVuY2UgPSBvcHRpb25zOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGluaXRVcGxvYWRGb3JtKCk7CiAgICAgICAgICAgIGluaXRGaWxlSW5wdXQoKTsKICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5kYXRhKHNldHRpbmdzLm5hbWVzcGFjZSkpIHsKICAgICAgICAgICAgICAgICQuZXJyb3IoJ0ZpbGVVcGxvYWQgd2l0aCBuYW1lc3BhY2UgIicgKyBzZXR0aW5ncy5uYW1lc3BhY2UgKyAnIiBhbHJlYWR5IGFzc2lnbmVkIHRvIHRoaXMgZWxlbWVudCcpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRhaW5lcgogICAgICAgICAgICAgICAgLmRhdGEoc2V0dGluZ3MubmFtZXNwYWNlLCBmaWxlVXBsb2FkKQogICAgICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLmNzc0NsYXNzKTsKICAgICAgICAgICAgc2V0dGluZ3MuZHJvcFpvbmUubm90KGNvbnRhaW5lcikuYWRkQ2xhc3Moc2V0dGluZ3MuY3NzQ2xhc3MpOwogICAgICAgICAgICBpbml0RXZlbnRIYW5kbGVycygpOwogICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmluaXQgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIHNldHRpbmdzLmluaXQoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMub3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBvbGRDc3NDbGFzcywKICAgICAgICAgICAgICAgIG9sZERyb3Bab25lLAogICAgICAgICAgICAgICAgdXBsb2FkRm9ybUZpbHRlclVwZGF0ZSwKICAgICAgICAgICAgICAgIGZpbGVJbnB1dEZpbHRlclVwZGF0ZTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSB1bmRlZikgewogICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBzZXR0aW5ncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9wdGlvbnNSZWZlcmVuY2UpIHsKICAgICAgICAgICAgICAgICQuZXh0ZW5kKG9wdGlvbnNSZWZlcmVuY2UsIG9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlbW92ZUV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgICAgICAgICBjYXNlICduYW1lc3BhY2UnOgogICAgICAgICAgICAgICAgICAgICQuZXJyb3IoJ1RoZSBGaWxlVXBsb2FkIG5hbWVzcGFjZSBjYW5ub3QgYmUgdXBkYXRlZC4nKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICBjYXNlICd1cGxvYWRGb3JtRmlsdGVyJzoKICAgICAgICAgICAgICAgICAgICB1cGxvYWRGb3JtRmlsdGVyVXBkYXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBmaWxlSW5wdXRGaWx0ZXJVcGRhdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnZmlsZUlucHV0RmlsdGVyJzoKICAgICAgICAgICAgICAgICAgICBmaWxlSW5wdXRGaWx0ZXJVcGRhdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnY3NzQ2xhc3MnOgogICAgICAgICAgICAgICAgICAgIG9sZENzc0NsYXNzID0gc2V0dGluZ3MuY3NzQ2xhc3M7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdkcm9wWm9uZSc6CiAgICAgICAgICAgICAgICAgICAgb2xkRHJvcFpvbmUgPSBzZXR0aW5ncy5kcm9wWm9uZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHNldHRpbmdzW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAodXBsb2FkRm9ybUZpbHRlclVwZGF0ZSkgewogICAgICAgICAgICAgICAgaW5pdFVwbG9hZEZvcm0oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZmlsZUlucHV0RmlsdGVyVXBkYXRlKSB7CiAgICAgICAgICAgICAgICBpbml0RmlsZUlucHV0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBvbGRDc3NDbGFzcyAhPT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgIGNvbnRhaW5lcgogICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhvbGRDc3NDbGFzcykKICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moc2V0dGluZ3MuY3NzQ2xhc3MpOwogICAgICAgICAgICAgICAgKG9sZERyb3Bab25lID8gb2xkRHJvcFpvbmUgOiBzZXR0aW5ncy5kcm9wWm9uZSkubm90KGNvbnRhaW5lcikKICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3Mob2xkQ3NzQ2xhc3MpOwogICAgICAgICAgICAgICAgc2V0dGluZ3MuZHJvcFpvbmUubm90KGNvbnRhaW5lcikuYWRkQ2xhc3Moc2V0dGluZ3MuY3NzQ2xhc3MpOwogICAgICAgICAgICB9IGVsc2UgaWYgKG9sZERyb3Bab25lKSB7CiAgICAgICAgICAgICAgICBvbGREcm9wWm9uZS5ub3QoY29udGFpbmVyKS5yZW1vdmVDbGFzcyhzZXR0aW5ncy5jc3NDbGFzcyk7CiAgICAgICAgICAgICAgICBzZXR0aW5ncy5kcm9wWm9uZS5ub3QoY29udGFpbmVyKS5hZGRDbGFzcyhzZXR0aW5ncy5jc3NDbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW5pdEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMub3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25zOwogICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSB1bmRlZikgewogICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzW25hbWVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgb3B0aW9uc1tuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICBmaWxlVXBsb2FkLm9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuZGVzdHJveSA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgc2V0dGluZ3MuZGVzdHJveSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlbW92ZUV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgY29udGFpbmVyCiAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShzZXR0aW5ncy5uYW1lc3BhY2UpCiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3Moc2V0dGluZ3MuY3NzQ2xhc3MpOwogICAgICAgICAgICBzZXR0aW5ncy5kcm9wWm9uZS5ub3QoY29udGFpbmVyKS5yZW1vdmVDbGFzcyhzZXR0aW5ncy5jc3NDbGFzcyk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLnVwbG9hZCA9IGZ1bmN0aW9uIChmaWxlcykgewogICAgICAgICAgICBpZiAodHlwZW9mIGZpbGVzLmxlbmd0aCA9PT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgIGZpbGVzID0gW2ZpbGVzXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBoYW5kbGVGaWxlcyhudWxsLCBmaWxlcyk7CiAgICAgICAgfTsKICAgIH07CgogICAgbWV0aG9kcyA9IHsKICAgICAgICBpbml0IDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAobmV3IEZpbGVVcGxvYWQoJCh0aGlzKSkpLmluaXQob3B0aW9ucyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgb3B0aW9uOiBmdW5jdGlvbiAob3B0aW9uLCB2YWx1ZSwgbmFtZXNwYWNlKSB7CiAgICAgICAgICAgIG5hbWVzcGFjZSA9IG5hbWVzcGFjZSA/IG5hbWVzcGFjZSA6IGRlZmF1bHROYW1lc3BhY2U7CiAgICAgICAgICAgIHZhciBmaWxlVXBsb2FkID0gJCh0aGlzKS5kYXRhKG5hbWVzcGFjZSk7CiAgICAgICAgICAgIGlmIChmaWxlVXBsb2FkKSB7CiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlVXBsb2FkLm9wdGlvbnMoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlID09PSB1bmRlZikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlVXBsb2FkLm9wdGlvbihvcHRpb24pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJC5lcnJvcignTm8gRmlsZVVwbG9hZCB3aXRoIG5hbWVzcGFjZSAiJyArIG5hbWVzcGFjZSArICciIGFzc2lnbmVkIHRvIHRoaXMgZWxlbWVudCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGZ1ID0gJCh0aGlzKS5kYXRhKG5hbWVzcGFjZSk7CiAgICAgICAgICAgICAgICBpZiAoZnUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnUub3B0aW9uKG9wdGlvbiwgdmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1Lm9wdGlvbnMob3B0aW9uKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQuZXJyb3IoJ05vIEZpbGVVcGxvYWQgd2l0aCBuYW1lc3BhY2UgIicgKyBuYW1lc3BhY2UgKyAnIiBhc3NpZ25lZCB0byB0aGlzIGVsZW1lbnQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICAgICAgICAgIAogICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsKICAgICAgICAgICAgbmFtZXNwYWNlID0gbmFtZXNwYWNlID8gbmFtZXNwYWNlIDogZGVmYXVsdE5hbWVzcGFjZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZmlsZVVwbG9hZCA9ICQodGhpcykuZGF0YShuYW1lc3BhY2UpOwogICAgICAgICAgICAgICAgaWYgKGZpbGVVcGxvYWQpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJC5lcnJvcignTm8gRmlsZVVwbG9hZCB3aXRoIG5hbWVzcGFjZSAiJyArIG5hbWVzcGFjZSArICciIGFzc2lnbmVkIHRvIHRoaXMgZWxlbWVudCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIHVwbG9hZDogZnVuY3Rpb24gKGZpbGVzLCBuYW1lc3BhY2UpIHsKICAgICAgICAgICAgbmFtZXNwYWNlID0gbmFtZXNwYWNlID8gbmFtZXNwYWNlIDogZGVmYXVsdE5hbWVzcGFjZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZmlsZVVwbG9hZCA9ICQodGhpcykuZGF0YShuYW1lc3BhY2UpOwogICAgICAgICAgICAgICAgaWYgKGZpbGVVcGxvYWQpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlVXBsb2FkLnVwbG9hZChmaWxlcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQuZXJyb3IoJ05vIEZpbGVVcGxvYWQgd2l0aCBuYW1lc3BhY2UgIicgKyBuYW1lc3BhY2UgKyAnIiBhc3NpZ25lZCB0byB0aGlzIGVsZW1lbnQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKICAgIAogICAgJC5mbi5maWxlVXBsb2FkID0gZnVuY3Rpb24gKG1ldGhvZCkgewogICAgICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHsKICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHNbbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpIHsKICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQuZXJyb3IoJ01ldGhvZCAiJyArIG1ldGhvZCArICciIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5maWxlVXBsb2FkJyk7CiAgICAgICAgfQogICAgfTsKICAgIAp9KGpRdWVyeSkpOwoKCi8qCiAqIGpRdWVyeSBGaWxlIFVwbG9hZCBVc2VyIEludGVyZmFjZSBQbHVnaW4gNC40LjEKICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvalF1ZXJ5LUZpbGUtVXBsb2FkCiAqCiAqIENvcHlyaWdodCAyMDEwLCBTZWJhc3RpYW4gVHNjaGFuCiAqIGh0dHBzOi8vYmx1ZWltcC5uZXQKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOgogKiBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9NSVQvCiAqLwoKLypqc2xpbnQgYnJvd3NlcjogdHJ1ZSwgdW5wYXJhbTogdHJ1ZSAqLwovKmdsb2JhbCBqUXVlcnksIEZpbGVSZWFkZXIsIFVSTCwgd2Via2l0VVJMICovCgooZnVuY3Rpb24gKCQpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICB2YXIgdW5kZWYgPSAndW5kZWZpbmVkJywKICAgICAgICBmdW5jID0gJ2Z1bmN0aW9uJywKICAgICAgICBVcGxvYWRIYW5kbGVyLAogICAgICAgIG1ldGhvZHMsCgogICAgICAgIE11bHRpTG9hZGVyID0gZnVuY3Rpb24gKGNhbGxCYWNrKSB7CiAgICAgICAgICAgIHZhciBsb2FkZWQgPSAwLAogICAgICAgICAgICAgICAgbGlzdCA9IFtdOwogICAgICAgICAgICB0aGlzLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbG9hZGVkICs9IDE7CiAgICAgICAgICAgICAgICBpZiAobG9hZGVkID09PSBsaXN0Lmxlbmd0aCArIDEpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaXN0Lmxlbmd0aCAqIG9uQ29tcGxldGUgKyAxICogb25Mb2FkQWxsCiAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2sobGlzdCk7CiAgICAgICAgICAgICAgICAgICAgbG9hZGVkID0gMDsKICAgICAgICAgICAgICAgICAgICBsaXN0ID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMucHVzaCA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRoaXMuZ2V0TGlzdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0OwogICAgICAgICAgICB9OwogICAgICAgIH07CiAgICAgICAgCiAgICBVcGxvYWRIYW5kbGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgb3B0aW9ucykgewogICAgICAgIHZhciB1cGxvYWRIYW5kbGVyID0gdGhpcywKICAgICAgICAgICAgZHJhZ092ZXJUaW1lb3V0LAogICAgICAgICAgICBpc0Ryb3Bab25lRW5sYXJnZWQsCiAgICAgICAgICAgIG11bHRpTG9hZGVyID0gbmV3IE11bHRpTG9hZGVyKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmhpZGVQcm9ncmVzc0JhckFsbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5yZXNldFByb2dyZXNzQmFyQWxsKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGxvYWRIYW5kbGVyLm9uQ29tcGxldGVBbGwgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5vbkNvbXBsZXRlQWxsKGxpc3QpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgZ2V0VXBsb2FkVGFibGUgPSBmdW5jdGlvbiAoaGFuZGxlcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBoYW5kbGVyLnVwbG9hZFRhYmxlID09PSBmdW5jID8KICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLnVwbG9hZFRhYmxlKGhhbmRsZXIpIDogaGFuZGxlci51cGxvYWRUYWJsZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2V0RG93bmxvYWRUYWJsZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGhhbmRsZXIuZG93bmxvYWRUYWJsZSA9PT0gZnVuYyA/CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5kb3dubG9hZFRhYmxlKGhhbmRsZXIpIDogaGFuZGxlci5kb3dubG9hZFRhYmxlOwogICAgICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMucmVxdWVzdEhlYWRlcnMgPSB7J0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxJ307CiAgICAgICAgdGhpcy5kcm9wWm9uZSA9IGNvbnRhaW5lcjsKICAgICAgICB0aGlzLmltYWdlVHlwZXMgPSAvXmltYWdlXC8oZ2lmfGpwZWd8cG5nKSQvOwogICAgICAgIHRoaXMucHJldmlld01heFdpZHRoID0gdGhpcy5wcmV2aWV3TWF4SGVpZ2h0ID0gODA7CiAgICAgICAgdGhpcy5wcmV2aWV3TG9hZERlbGF5ID0gMTAwOwogICAgICAgIHRoaXMucHJldmlld0FzQ2FudmFzID0gdHJ1ZTsKICAgICAgICB0aGlzLnByZXZpZXdTZWxlY3RvciA9ICcuZmlsZV91cGxvYWRfcHJldmlldyc7CiAgICAgICAgdGhpcy5wcm9ncmVzc1NlbGVjdG9yID0gJy5maWxlX3VwbG9hZF9wcm9ncmVzcyBkaXYnOwogICAgICAgIHRoaXMuY2FuY2VsU2VsZWN0b3IgPSAnLmZpbGVfdXBsb2FkX2NhbmNlbCBidXR0b24nOwogICAgICAgIHRoaXMuY3NzQ2xhc3NTbWFsbCA9ICdmaWxlX3VwbG9hZF9zbWFsbCc7CiAgICAgICAgdGhpcy5jc3NDbGFzc0xhcmdlID0gJ2ZpbGVfdXBsb2FkX2xhcmdlJzsKICAgICAgICB0aGlzLmNzc0NsYXNzSGlnaGxpZ2h0ID0gJ2ZpbGVfdXBsb2FkX2hpZ2hsaWdodCc7CiAgICAgICAgdGhpcy5kcm9wRWZmZWN0ID0gJ2hpZ2hsaWdodCc7CiAgICAgICAgdGhpcy51cGxvYWRUYWJsZSA9IHRoaXMuZG93bmxvYWRUYWJsZSA9IG51bGw7CiAgICAgICAgdGhpcy5idWlsZFVwbG9hZFJvdyA9IHRoaXMuYnVpbGREb3dubG9hZFJvdyA9IG51bGw7CiAgICAgICAgdGhpcy5wcm9ncmVzc0FsbE5vZGUgPSBudWxsOwoKICAgICAgICB0aGlzLmxvYWRJbWFnZSA9IGZ1bmN0aW9uIChmaWxlLCBjYWxsQmFjaywgbWF4V2lkdGgsIG1heEhlaWdodCwgaW1hZ2VUeXBlcywgbm9DYW52YXMpIHsKICAgICAgICAgICAgdmFyIGltZywKICAgICAgICAgICAgICAgIHNjYWxlSW1hZ2UsCiAgICAgICAgICAgICAgICB1cmxBUEksCiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyOwogICAgICAgICAgICBpZiAoaW1hZ2VUeXBlcyAmJiAhaW1hZ2VUeXBlcy50ZXN0KGZpbGUudHlwZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjYWxlSW1hZ2UgPSBmdW5jdGlvbiAoaW1nKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksCiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBNYXRoLm1pbigKICAgICAgICAgICAgICAgICAgICAgICAgKG1heFdpZHRoIHx8IGltZy53aWR0aCkgLyBpbWcud2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgIChtYXhIZWlnaHQgfHwgaW1nLmhlaWdodCkgLyBpbWcuaGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmIChzY2FsZSA+IDEpIHsKICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpbWcud2lkdGggPSBwYXJzZUludChpbWcud2lkdGggKiBzY2FsZSwgMTApOwogICAgICAgICAgICAgICAgaW1nLmhlaWdodCA9IHBhcnNlSW50KGltZy5oZWlnaHQgKiBzY2FsZSwgMTApOwogICAgICAgICAgICAgICAgaWYgKG5vQ2FudmFzIHx8IHR5cGVvZiBjYW52YXMuZ2V0Q29udGV4dCAhPT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7CiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDsKICAgICAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZy53aWR0aCwgaW1nLmhlaWdodCk7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzOwogICAgICAgICAgICB9OwogICAgICAgICAgICBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKICAgICAgICAgICAgdXJsQVBJID0gdHlwZW9mIFVSTCAhPT0gdW5kZWYgPyBVUkwgOiB0eXBlb2Ygd2Via2l0VVJMICE9PSB1bmRlZiA/IHdlYmtpdFVSTCA6IG51bGw7CiAgICAgICAgICAgIGlmICh1cmxBUEkgJiYgdHlwZW9mIHVybEFQSS5jcmVhdGVPYmplY3RVUkwgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdXJsQVBJLnJldm9rZU9iamVjdFVSTCh0aGlzLnNyYyk7CiAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2soc2NhbGVJbWFnZShpbWcpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpbWcuc3JjID0gdXJsQVBJLmNyZWF0ZU9iamVjdFVSTChmaWxlKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgRmlsZVJlYWRlciAhPT0gdW5kZWYgJiYKICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZVJlYWRlci5wcm90b3R5cGUucmVhZEFzRGF0YVVSTCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsQmFjayhzY2FsZUltYWdlKGltZykpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBlLnRhcmdldC5yZXN1bHQ7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY2FsbEJhY2sobnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmFkZE5vZGUgPSBmdW5jdGlvbiAocGFyZW50Tm9kZSwgbm9kZSwgY2FsbEJhY2spIHsKICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5sZW5ndGggJiYgbm9kZSAmJiBub2RlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgbm9kZS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpLmFwcGVuZFRvKHBhcmVudE5vZGUpLmZhZGVJbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsQmFjayA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4IGVuZGxlc3MgZXhjZXB0aW9uIGxvb3A6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY2FsbEJhY2sgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIGNhbGxCYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLnJlbW92ZU5vZGUgPSBmdW5jdGlvbiAobm9kZSwgY2FsbEJhY2spIHsKICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIG5vZGUuZmFkZU91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxCYWNrID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQmFjaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXggZW5kbGVzcyBleGNlcHRpb24gbG9vcDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjYWxsQmFjayA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgY2FsbEJhY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5yZXBsYWNlTm9kZSA9IGZ1bmN0aW9uIChvbGROb2RlLCBuZXdOb2RlLCBjYWxsQmFjaykgewogICAgICAgICAgICBpZiAoIShuZXdOb2RlICYmIG5ld05vZGUubGVuZ3RoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVwbG9hZEhhbmRsZXIucmVtb3ZlTm9kZShvbGROb2RlLCBjYWxsQmFjayk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9sZE5vZGUgJiYgb2xkTm9kZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIG9sZE5vZGUuZmFkZU91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgICAgICAgICAgIG9sZE5vZGUucmVwbGFjZVdpdGgobmV3Tm9kZSk7CiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5mYWRlSW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxCYWNrID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4IGVuZGxlc3MgZXhjZXB0aW9uIGxvb3A6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkTm9kZS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxCYWNrID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICBjYWxsQmFjaygpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5yZXNldFByb2dyZXNzQmFyQWxsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAodXBsb2FkSGFuZGxlci5wcm9ncmVzc2JhckFsbCkgewogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5wcm9ncmVzc2JhckFsbC5wcm9ncmVzc2JhcigKICAgICAgICAgICAgICAgICAgICAndmFsdWUnLAogICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmhpZGVQcm9ncmVzc0JhckFsbCA9IGZ1bmN0aW9uIChjYWxsQmFjaykgewogICAgICAgICAgICBpZiAodXBsb2FkSGFuZGxlci5wcm9ncmVzc2JhckFsbCAmJiAhJChnZXRVcGxvYWRUYWJsZSh1cGxvYWRIYW5kbGVyKSkKICAgICAgICAgICAgICAgICAgICAuZmluZCh1cGxvYWRIYW5kbGVyLnByb2dyZXNzU2VsZWN0b3IgKyAnOnZpc2libGU6Zmlyc3QnKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIucHJvZ3Jlc3NiYXJBbGwuZmFkZU91dChjYWxsQmFjayk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxCYWNrID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICBjYWxsQmFjaygpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5vbkFib3J0ID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcikgewogICAgICAgICAgICBoYW5kbGVyLnJlbW92ZU5vZGUoaGFuZGxlci51cGxvYWRSb3csIGhhbmRsZXIuaGlkZVByb2dyZXNzQmFyQWxsKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuY2FuY2VsVXBsb2FkID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcikgewogICAgICAgICAgICB2YXIgcmVhZHlTdGF0ZSA9IHhoci5yZWFkeVN0YXRlOwogICAgICAgICAgICB4aHIuYWJvcnQoKTsKICAgICAgICAgICAgLy8gSWYgcmVhZHlTdGF0ZSBpcyBiZWxvdyAyLCBhYm9ydCgpIGhhcyBubyBlZmZlY3Q6CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVhZHlTdGF0ZSAhPT0gJ251bWJlcicgfHwgcmVhZHlTdGF0ZSA8IDIpIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIub25BYm9ydChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmluaXRQcm9ncmVzc0JhciA9IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkgewogICAgICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIG5vZGUucHJvZ3Jlc3NiYXIgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnByb2dyZXNzYmFyKHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbm9kZS5hZGRDbGFzcygncHJvZ3Jlc3NiYXInKQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJCgnPGRpdi8+JykuY3NzKCd3aWR0aCcsIHZhbHVlICsgJyUnKSkKICAgICAgICAgICAgICAgICAgICAucHJvZ3Jlc3NiYXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdkZXN0cm95JykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3Byb2dyZXNzYmFyJykuZW1wdHkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbigpLmNzcygnd2lkdGgnLCB2YWx1ZSArICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5kZXN0cm95UHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiAobm9kZSkgewogICAgICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbm9kZS5wcm9ncmVzc2JhcignZGVzdHJveScpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5pbml0VXBsb2FkUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoeGhyLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGlmICgheGhyLnVwbG9hZCAmJiBoYW5kbGVyLnByb2dyZXNzYmFyKSB7CiAgICAgICAgICAgICAgICBoYW5kbGVyLnByb2dyZXNzYmFyLnByb2dyZXNzYmFyKAogICAgICAgICAgICAgICAgICAgICd2YWx1ZScsCiAgICAgICAgICAgICAgICAgICAgMTAwIC8vIGluZGV0ZXJtaW5hdGUgcHJvZ3Jlc3MgZGlzcGxheWVkIGJ5IGEgZnVsbCBhbmltYXRlZCBwcm9ncmVzcyBiYXIKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmluaXRVcGxvYWRQcm9ncmVzc0FsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHVwbG9hZEhhbmRsZXIucHJvZ3Jlc3NiYXJBbGwgJiYgdXBsb2FkSGFuZGxlci5wcm9ncmVzc2JhckFsbC5pcygnOmhpZGRlbicpKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLnByb2dyZXNzYmFyQWxsLmZhZGVJbigpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5vblNlbmQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGhhbmRsZXIuaW5pdFVwbG9hZFByb2dyZXNzKHhociwgaGFuZGxlcik7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5vblByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcikgewogICAgICAgICAgICBpZiAoaGFuZGxlci5wcm9ncmVzc2JhciAmJiBldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7CiAgICAgICAgICAgICAgICBoYW5kbGVyLnByb2dyZXNzYmFyLnByb2dyZXNzYmFyKAogICAgICAgICAgICAgICAgICAgICd2YWx1ZScsCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZXZlbnQubG9hZGVkIC8gZXZlbnQudG90YWwgKiAxMDAsIDEwKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMub25Qcm9ncmVzc0FsbCA9IGZ1bmN0aW9uIChldmVudCwgbGlzdCkgewogICAgICAgICAgICBpZiAodXBsb2FkSGFuZGxlci5wcm9ncmVzc2JhckFsbCAmJiBldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLnByb2dyZXNzYmFyQWxsLnByb2dyZXNzYmFyKAogICAgICAgICAgICAgICAgICAgICd2YWx1ZScsCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZXZlbnQubG9hZGVkIC8gZXZlbnQudG90YWwgKiAxMDAsIDEwKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHRoaXMub25Mb2FkQWxsID0gZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgICAgbXVsdGlMb2FkZXIuY29tcGxldGUoKTsKICAgICAgICB9OwoKICAgICAgICB0aGlzLmluaXRQcm9ncmVzc0JhckFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCF1cGxvYWRIYW5kbGVyLnByb2dyZXNzYmFyQWxsKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLnByb2dyZXNzYmFyQWxsID0gdXBsb2FkSGFuZGxlci5pbml0UHJvZ3Jlc3NCYXIoCiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB1cGxvYWRIYW5kbGVyLnByb2dyZXNzQWxsTm9kZSA9PT0gZnVuYyA/CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5wcm9ncmVzc0FsbE5vZGUodXBsb2FkSGFuZGxlcikgOiB1cGxvYWRIYW5kbGVyLnByb2dyZXNzQWxsTm9kZSksCiAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5kZXN0cm95UHJvZ3Jlc3NCYXJBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZGVzdHJveVByb2dyZXNzQmFyKHVwbG9hZEhhbmRsZXIucHJvZ3Jlc3NiYXJBbGwpOwogICAgICAgIH07CgogICAgICAgIHRoaXMubG9hZFByZXZpZXdJbWFnZSA9IGZ1bmN0aW9uIChmaWxlcywgaW5kZXgsIGhhbmRsZXIpIHsKICAgICAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwOwogICAgICAgICAgICBoYW5kbGVyLnVwbG9hZFJvdy5maW5kKGhhbmRsZXIucHJldmlld1NlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBwcmV2aWV3Tm9kZSA9ICQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGZpbGVzW2luZGV4XTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIubG9hZEltYWdlKAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaW1nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmFkZE5vZGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld05vZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChpbWcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLnByZXZpZXdNYXhXaWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5wcmV2aWV3TWF4SGVpZ2h0LAogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmltYWdlVHlwZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICFoYW5kbGVyLnByZXZpZXdBc0NhbnZhcwogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9LCBoYW5kbGVyLnByZXZpZXdMb2FkRGVsYXkpOwogICAgICAgICAgICAgICAgaW5kZXggKz0gMTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5pbml0VXBsb2FkUm93ID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcikgewogICAgICAgICAgICB2YXIgdXBsb2FkUm93ID0gaGFuZGxlci51cGxvYWRSb3cgPSAodHlwZW9mIGhhbmRsZXIuYnVpbGRVcGxvYWRSb3cgPT09IGZ1bmMgPwogICAgICAgICAgICAgICAgaGFuZGxlci5idWlsZFVwbG9hZFJvdyhmaWxlcywgaW5kZXgsIGhhbmRsZXIpIDogbnVsbCk7CiAgICAgICAgICAgIGlmICh1cGxvYWRSb3cpIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIucHJvZ3Jlc3NiYXIgPSBoYW5kbGVyLmluaXRQcm9ncmVzc0JhcigKICAgICAgICAgICAgICAgICAgICB1cGxvYWRSb3cuZmluZChoYW5kbGVyLnByb2dyZXNzU2VsZWN0b3IpLAogICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB1cGxvYWRSb3cuZmluZChoYW5kbGVyLmNhbmNlbFNlbGVjdG9yKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FuY2VsVXBsb2FkKGUsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGhhbmRsZXIubG9hZFByZXZpZXdJbWFnZShmaWxlcywgaW5kZXgsIGhhbmRsZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmluaXRVcGxvYWQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyLCBjYWxsQmFjaykgewogICAgICAgICAgICBoYW5kbGVyLmluaXRVcGxvYWRSb3coZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgaGFuZGxlci5hZGROb2RlKAogICAgICAgICAgICAgICAgZ2V0VXBsb2FkVGFibGUoaGFuZGxlciksCiAgICAgICAgICAgICAgICBoYW5kbGVyLnVwbG9hZFJvdywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIuYmVmb3JlU2VuZCA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmJlZm9yZVNlbmQoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyLCBjYWxsQmFjayk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2soKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGhhbmRsZXIuaW5pdFVwbG9hZFByb2dyZXNzQWxsKCk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLnBhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbiAoeGhyLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gdW5kZWYpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkLnBhcnNlSlNPTih4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIEluc3RlYWQgb2YgYW4gWEhSIG9iamVjdCwgYW4gaWZyYW1lIGlzIHVzZWQgZm9yIGxlZ2FjeSBicm93c2VyczoKICAgICAgICAgICAgICAgIHJldHVybiAkLnBhcnNlSlNPTih4aHIuY29udGVudHMoKS50ZXh0KCkpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmluaXREb3dubG9hZFJvdyA9IGZ1bmN0aW9uIChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIGpzb24sIGRvd25sb2FkUm93OwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAganNvbiA9IGhhbmRsZXIucmVzcG9uc2UgPSBoYW5kbGVyLnBhcnNlUmVzcG9uc2UoeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyLm9uRXJyb3IgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9yaWdpbmFsRXZlbnQgPSBldmVudDsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9uRXJyb3IoZSwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRvd25sb2FkUm93ID0gaGFuZGxlci5kb3dubG9hZFJvdyA9ICh0eXBlb2YgaGFuZGxlci5idWlsZERvd25sb2FkUm93ID09PSBmdW5jID8KICAgICAgICAgICAgICAgIGhhbmRsZXIuYnVpbGREb3dubG9hZFJvdyhqc29uLCBoYW5kbGVyKSA6IG51bGwpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5vbkxvYWQgPSBmdW5jdGlvbiAoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIHZhciB1cGxvYWRUYWJsZSA9IGdldFVwbG9hZFRhYmxlKGhhbmRsZXIpLAogICAgICAgICAgICAgICAgZG93bmxvYWRUYWJsZSA9IGdldERvd25sb2FkVGFibGUoaGFuZGxlciksCiAgICAgICAgICAgICAgICBjYWxsQmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIub25Db21wbGV0ZSA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9uQ29tcGxldGUoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbXVsdGlMb2FkZXIuY29tcGxldGUoKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIG11bHRpTG9hZGVyLnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICAgICAgICAgIGhhbmRsZXIuaW5pdERvd25sb2FkUm93KGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcik7CiAgICAgICAgICAgIGlmICh1cGxvYWRUYWJsZSAmJiBoYW5kbGVyLnVwbG9hZFJvdyAmJiBoYW5kbGVyLnVwbG9hZFJvdy5sZW5ndGggJiYKICAgICAgICAgICAgICAgICAgICAoIWRvd25sb2FkVGFibGUgfHwgdXBsb2FkVGFibGUuZ2V0KDApID09PSBkb3dubG9hZFRhYmxlLmdldCgwKSkpIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIucmVwbGFjZU5vZGUoaGFuZGxlci51cGxvYWRSb3csIGhhbmRsZXIuZG93bmxvYWRSb3csIGNhbGxCYWNrKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIucmVtb3ZlTm9kZShoYW5kbGVyLnVwbG9hZFJvdywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuYWRkTm9kZSgKICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRUYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5kb3dubG9hZFJvdywKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2sKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmRyb3Bab25lRW5sYXJnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCFpc0Ryb3Bab25lRW5sYXJnZWQpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5zd2l0Y2hDbGFzcyA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZHJvcFpvbmUuc3dpdGNoQ2xhc3MoCiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuY3NzQ2xhc3NTbWFsbCwKICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5jc3NDbGFzc0xhcmdlCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5hZGRDbGFzcyh1cGxvYWRIYW5kbGVyLmNzc0NsYXNzTGFyZ2UpOwogICAgICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZHJvcFpvbmUucmVtb3ZlQ2xhc3ModXBsb2FkSGFuZGxlci5jc3NDbGFzc1NtYWxsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlzRHJvcFpvbmVFbmxhcmdlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuZHJvcFpvbmVSZWR1Y2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5zd2l0Y2hDbGFzcyA9PT0gZnVuYykgewogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5zd2l0Y2hDbGFzcygKICAgICAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmNzc0NsYXNzTGFyZ2UsCiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5jc3NDbGFzc1NtYWxsCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5hZGRDbGFzcyh1cGxvYWRIYW5kbGVyLmNzc0NsYXNzU21hbGwpOwogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5yZW1vdmVDbGFzcyh1cGxvYWRIYW5kbGVyLmNzc0NsYXNzTGFyZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlzRHJvcFpvbmVFbmxhcmdlZCA9IGZhbHNlOwogICAgICAgIH07CgogICAgICAgIHRoaXMub25Eb2N1bWVudERyYWdFbnRlciA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmRyb3Bab25lRW5sYXJnZSgpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5vbkRvY3VtZW50RHJhZ092ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGRyYWdPdmVyVGltZW91dCkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRyYWdPdmVyVGltZW91dCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZHJhZ092ZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmRyb3Bab25lUmVkdWNlKCk7CiAgICAgICAgICAgIH0sIDIwMCk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLm9uRHJhZ0VudGVyID0gdGhpcy5vbkRyYWdMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmRyb3Bab25lLnRvZ2dsZUNsYXNzKHVwbG9hZEhhbmRsZXIuY3NzQ2xhc3NIaWdobGlnaHQpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5vbkRyb3AgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGRyYWdPdmVyVGltZW91dCkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRyYWdPdmVyVGltZW91dCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHVwbG9hZEhhbmRsZXIuZHJvcEVmZmVjdCAmJiB0eXBlb2YgdXBsb2FkSGFuZGxlci5kcm9wWm9uZS5lZmZlY3QgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZHJvcFpvbmUuZWZmZWN0KHVwbG9hZEhhbmRsZXIuZHJvcEVmZmVjdCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZHJvcFpvbmUucmVtb3ZlQ2xhc3ModXBsb2FkSGFuZGxlci5jc3NDbGFzc0hpZ2hsaWdodCk7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZVJlZHVjZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmRyb3Bab25lLnJlbW92ZUNsYXNzKHVwbG9hZEhhbmRsZXIuY3NzQ2xhc3NIaWdobGlnaHQpOwogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kcm9wWm9uZVJlZHVjZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmluaXRQcm9ncmVzc0JhckFsbCgpOwogICAgICAgICAgICBpZiAodHlwZW9mIHVwbG9hZEhhbmRsZXIuaW5pdEV4dGVuZGVkID09PSBmdW5jKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRIYW5kbGVyLmluaXRFeHRlbmRlZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBsb2FkSGFuZGxlci5kZXN0cm95RXh0ZW5kZWQgPT09IGZ1bmMpIHsKICAgICAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZGVzdHJveUV4dGVuZGVkKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kZXN0cm95UHJvZ3Jlc3NCYXJBbGwoKTsKICAgICAgICB9OwoKICAgICAgICAkLmV4dGVuZCh0aGlzLCBvcHRpb25zKTsKICAgIH07CgogICAgbWV0aG9kcyA9IHsKICAgICAgICBpbml0IDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbGVVcGxvYWQobmV3IFVwbG9hZEhhbmRsZXIoJCh0aGlzKSwgb3B0aW9ucykpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIG9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbiwgdmFsdWUsIG5hbWVzcGFjZSkgewogICAgICAgICAgICBpZiAoIW9wdGlvbiB8fCAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlID09PSB1bmRlZikpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmZpbGVVcGxvYWQoJ29wdGlvbicsIG9wdGlvbiwgdmFsdWUsIG5hbWVzcGFjZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbGVVcGxvYWQoJ29wdGlvbicsIG9wdGlvbiwgdmFsdWUsIG5hbWVzcGFjZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgIGRlc3Ryb3kgOiBmdW5jdGlvbiAobmFtZXNwYWNlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCh0aGlzKS5maWxlVXBsb2FkKCdkZXN0cm95JywgbmFtZXNwYWNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICAKICAgICAgICB1cGxvYWQ6IGZ1bmN0aW9uIChmaWxlcywgbmFtZXNwYWNlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCh0aGlzKS5maWxlVXBsb2FkKCd1cGxvYWQnLCBmaWxlcywgbmFtZXNwYWNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKICAgIAogICAgJC5mbi5maWxlVXBsb2FkVUkgPSBmdW5jdGlvbiAobWV0aG9kKSB7CiAgICAgICAgaWYgKG1ldGhvZHNbbWV0aG9kXSkgewogICAgICAgICAgICByZXR1cm4gbWV0aG9kc1ttZXRob2RdLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ29iamVjdCcgfHwgIW1ldGhvZCkgewogICAgICAgICAgICByZXR1cm4gbWV0aG9kcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJC5lcnJvcignTWV0aG9kICInICsgbWV0aG9kICsgJyIgZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LmZpbGVVcGxvYWRVSScpOwogICAgICAgIH0KICAgIH07CiAgICAKfShqUXVlcnkpKTsKCgovKgogKiBqUXVlcnkgRmlsZSBVcGxvYWQgVXNlciBJbnRlcmZhY2UgRXh0ZW5kZWQgUGx1Z2luIDQuNgogKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9qUXVlcnktRmlsZS1VcGxvYWQKICoKICogQ29weXJpZ2h0IDIwMTAsIFNlYmFzdGlhbiBUc2NoYW4KICogaHR0cHM6Ly9ibHVlaW1wLm5ldAogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6CiAqIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL01JVC8KICovCgovKmpzbGludCByZWdleHA6IGZhbHNlLCB1bnBhcmFtOiB0cnVlICovCi8qZ2xvYmFsIGpRdWVyeSAqLwoKKGZ1bmN0aW9uICgkKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIFVwbG9hZEhhbmRsZXIsCiAgICAgICAgbWV0aG9kczsKCiAgICAvLyBFbXVsYXRlIGpRdWVyeSBVSSBidXR0b24gKHdpdGhvdXQgc3RhdGVzKSBpZiBub3QgYXZhaWxhYmxlOgogICAgaWYgKHR5cGVvZiAkKCkuYnV0dG9uICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgJC5mbi5idXR0b24gPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSAnZGVzdHJveScpIHsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKAogICAgICAgICAgICAgICAgICAgICAgICAndWktYnV0dG9uIHVpLXdpZGdldCB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGwnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdWktYnV0dG9uLWljb24tb25seSB1aS1idXR0b24tdGV4dC1pY29uLXByaW1hcnknCiAgICAgICAgICAgICAgICAgICAgKS5odG1sKCQodGhpcykudGV4dCgpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3VpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsJykKICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy50ZXh0ID09PSBmYWxzZSA/ICd1aS1idXR0b24taWNvbi1vbmx5JyA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VpLWJ1dHRvbi10ZXh0LWljb24tcHJpbWFyeScKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgkKCc8c3BhbiBjbGFzcz0idWktYnV0dG9uLXRleHQiLz4nKS50ZXh0KCQodGhpcykudGV4dCgpKSkKICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8c3BhbiBjbGFzcz0idWktYnV0dG9uLWljb24tcHJpbWFyeSB1aS1pY29uIi8+JykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3Mob3B0aW9ucy5pY29ucy5wcmltYXJ5KQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgfQogICAgICAgIAogICAgVXBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgdXBsb2FkSGFuZGxlciA9IHRoaXM7CgogICAgICAgIHRoaXMubG9jYWxlID0ge307CiAgICAgICAgdGhpcy5tYXhGaWxlU2l6ZSA9IG51bGw7CiAgICAgICAgdGhpcy5taW5GaWxlU2l6ZSA9IDE7CiAgICAgICAgdGhpcy5tYXhOdW1iZXJPZkZpbGVzID0gbnVsbDsKICAgICAgICB0aGlzLmFjY2VwdEZpbGVUeXBlcyA9IC8uKyQvaTsKICAgICAgICB0aGlzLmF1dG9VcGxvYWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmZvcmNlSWZyYW1lRG93bmxvYWQgPSB0cnVlOwogICAgICAgIHRoaXMudXJsID0gY29udGFpbmVyLmZpbmQoJ2Zvcm06Zmlyc3QnKS5hdHRyKCdhY3Rpb24nKTsKICAgICAgICB0aGlzLmRyb3Bab25lID0gY29udGFpbmVyLmZpbmQoJ2Zvcm06Zmlyc3QnKTsKICAgICAgICB0aGlzLnVwbG9hZFRhYmxlID0gY29udGFpbmVyLmZpbmQoJy5maWxlczpmaXJzdCcpOwogICAgICAgIHRoaXMuZG93bmxvYWRUYWJsZSA9IHRoaXMudXBsb2FkVGFibGU7CiAgICAgICAgdGhpcy5wcm9ncmVzc0FsbE5vZGUgPSBjb250YWluZXIuZmluZCgnLmZpbGVfdXBsb2FkX292ZXJhbGxfcHJvZ3Jlc3MgZGl2OmZpcnN0Jyk7CiAgICAgICAgdGhpcy51cGxvYWRUZW1wbGF0ZSA9IHRoaXMudXBsb2FkVGFibGUuZmluZCgnLmZpbGVfdXBsb2FkX3RlbXBsYXRlOmZpcnN0Jyk7CiAgICAgICAgdGhpcy5kb3dubG9hZFRlbXBsYXRlID0gdGhpcy51cGxvYWRUYWJsZS5maW5kKCcuZmlsZV9kb3dubG9hZF90ZW1wbGF0ZTpmaXJzdCcpOwogICAgICAgIHRoaXMubXVsdGlCdXR0b25zID0gY29udGFpbmVyLmZpbmQoJy5maWxlX3VwbG9hZF9idXR0b25zOmZpcnN0Jyk7CiAgICAgICAgCiAgICAgICAgdGhpcy5hZGp1c3RNYXhOdW1iZXJPZkZpbGVzID0gZnVuY3Rpb24gKG9wZXJhbmQpIHsKICAgICAgICAgICAgdmFyIG51bWJlciA9IGNvbnRhaW5lci5maWxlVXBsb2FkVUlYKCdvcHRpb24nLCAnbWF4TnVtYmVyT2ZGaWxlcycpOwogICAgICAgICAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIGNvbnRhaW5lci5maWxlVXBsb2FkVUlYKCdvcHRpb24nLCAnbWF4TnVtYmVyT2ZGaWxlcycsIG51bWJlciArIG9wZXJhbmQpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmZvcm1hdEZpbGVTaXplID0gZnVuY3Rpb24gKGJ5dGVzKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgIT09ICdudW1iZXInIHx8IGJ5dGVzID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGJ5dGVzID49IDEwMDAwMDAwMDApIHsKICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZXMgLyAxMDAwMDAwMDAwKS50b0ZpeGVkKDIpICsgJyBHQic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGJ5dGVzID49IDEwMDAwMDApIHsKICAgICAgICAgICAgICAgIHJldHVybiAoYnl0ZXMgLyAxMDAwMDAwKS50b0ZpeGVkKDIpICsgJyBNQic7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIChieXRlcyAvIDEwMDApLnRvRml4ZWQoMikgKyAnIEtCJzsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuZm9ybWF0RmlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7CiAgICAgICAgICAgIHJldHVybiBuYW1lLnJlcGxhY2UoL14uKltcL1xcXS8sICcnKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuZW5hYmxlRHJhZ1RvRGVza3RvcCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGxpbmsgPSAkKHRoaXMpLAogICAgICAgICAgICAgICAgdXJsID0gbGluay5nZXQoMCkuaHJlZiwKICAgICAgICAgICAgICAgIG5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQodXJsLnNwbGl0KCcvJykucG9wKCkpLnJlcGxhY2UoLzovZywgJy0nKSwKICAgICAgICAgICAgICAgIHR5cGUgPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJzsKICAgICAgICAgICAgbGluay5iaW5kKCdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIKICAgICAgICAgICAgICAgICAgICAgICAgLnNldERhdGEoJ0Rvd25sb2FkVVJMJywgW3R5cGUsIG5hbWUsIHVybF0uam9pbignOicpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHRoaXMuYnVpbGRNdWx0aVVwbG9hZFJvdyA9IGZ1bmN0aW9uIChmaWxlcywgaGFuZGxlcikgewogICAgICAgICAgICB2YXIgcm93cyA9ICQoJzx0Ym9keSBzdHlsZT0iZGlzcGxheTpub25lOyIvPicpOwogICAgICAgICAgICAkLmVhY2goZmlsZXMsIGZ1bmN0aW9uIChpbmRleCwgZmlsZSkgewogICAgICAgICAgICAgICAgdmFyIHJvdyA9IGhhbmRsZXIuYnVpbGRVcGxvYWRSb3coZmlsZXMsIGluZGV4LCBoYW5kbGVyKS5zaG93KCksCiAgICAgICAgICAgICAgICAgICAgY2VsbHMgPSByb3cuZmluZCgKICAgICAgICAgICAgICAgICAgICAgICAgJy5maWxlX3VwbG9hZF9wcm9ncmVzcywgLmZpbGVfdXBsb2FkX3N0YXJ0LCAuZmlsZV91cGxvYWRfY2FuY2VsJwogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICBjZWxscy5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2VsbHMuYXR0cigncm93c3BhbicsIGZpbGVzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByb3dzLmFwcGVuZChyb3cpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHJvd3M7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5idWlsZFVwbG9hZFJvdyA9IGZ1bmN0aW9uIChmaWxlcywgaW5kZXgsIGhhbmRsZXIpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmJ1aWxkTXVsdGlVcGxvYWRSb3coZmlsZXMsIGhhbmRsZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXNbaW5kZXhdLAogICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBoYW5kbGVyLmZvcm1hdEZpbGVOYW1lKGZpbGUubmFtZSksCiAgICAgICAgICAgICAgICB1cGxvYWRSb3cgPSBoYW5kbGVyLnVwbG9hZFRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgLmNsb25lKCkucmVtb3ZlQXR0cignaWQnKTsKICAgICAgICAgICAgdXBsb2FkUm93LmZpbmQoJy5maWxlX25hbWUnKQogICAgICAgICAgICAgICAgLnRleHQoZmlsZU5hbWUpOwogICAgICAgICAgICB1cGxvYWRSb3cuZmluZCgnLmZpbGVfc2l6ZScpCiAgICAgICAgICAgICAgICAudGV4dChoYW5kbGVyLmZvcm1hdEZpbGVTaXplKGZpbGUuc2l6ZSkpOwogICAgICAgICAgICBpZiAoaGFuZGxlci5hdXRvVXBsb2FkKSB7CiAgICAgICAgICAgICAgICB1cGxvYWRSb3cuZmluZCgnLmZpbGVfdXBsb2FkX3N0YXJ0IGJ1dHRvbicpLmhpZGUoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVwbG9hZFJvdy5maW5kKCcuZmlsZV91cGxvYWRfc3RhcnQgYnV0dG9uJykKICAgICAgICAgICAgICAgICAgICAuYnV0dG9uKHtpY29uczoge3ByaW1hcnk6ICd1aS1pY29uLWNpcmNsZS1hcnJvdy1lJ30sIHRleHQ6IGZhbHNlfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdXBsb2FkUm93LmZpbmQoJy5maWxlX3VwbG9hZF9jYW5jZWwgYnV0dG9uJykKICAgICAgICAgICAgICAgIC5idXR0b24oe2ljb25zOiB7cHJpbWFyeTogJ3VpLWljb24tY2FuY2VsJ30sIHRleHQ6IGZhbHNlfSk7CiAgICAgICAgICAgIHJldHVybiB1cGxvYWRSb3c7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5nZXRGaWxlVXJsID0gZnVuY3Rpb24gKGZpbGUsIGhhbmRsZXIpIHsKICAgICAgICAgICAgcmV0dXJuIGZpbGUudXJsOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5nZXRUaHVtYm5haWxVcmwgPSBmdW5jdGlvbiAoZmlsZSwgaGFuZGxlcikgewogICAgICAgICAgICByZXR1cm4gZmlsZS50aHVtYm5haWw7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5idWlsZE11bHRpRG93bmxvYWRSb3cgPSBmdW5jdGlvbiAoZmlsZXMsIGhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIHJvd3MgPSAkKCc8dGJvZHkgc3R5bGU9ImRpc3BsYXk6bm9uZTsiLz4nKTsKICAgICAgICAgICAgJC5lYWNoKGZpbGVzLCBmdW5jdGlvbiAoaW5kZXgsIGZpbGUpIHsKICAgICAgICAgICAgICAgIHJvd3MuYXBwZW5kKGhhbmRsZXIuYnVpbGREb3dubG9hZFJvdyhmaWxlLCBoYW5kbGVyKS5zaG93KCkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHJvd3M7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5idWlsZERvd25sb2FkUm93ID0gZnVuY3Rpb24gKGZpbGUsIGhhbmRsZXIpIHsKICAgICAgICAgICAgaWYgKCQuaXNBcnJheShmaWxlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuYnVpbGRNdWx0aURvd25sb2FkUm93KGZpbGUsIGhhbmRsZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IGhhbmRsZXIuZm9ybWF0RmlsZU5hbWUoZmlsZS5uYW1lKSwKICAgICAgICAgICAgICAgIGZpbGVVcmwgPSBoYW5kbGVyLmdldEZpbGVVcmwoZmlsZSwgaGFuZGxlciksCiAgICAgICAgICAgICAgICB0aHVtYm5haWxVcmwgPSBoYW5kbGVyLmdldFRodW1ibmFpbFVybChmaWxlLCBoYW5kbGVyKSwKICAgICAgICAgICAgICAgIGRvd25sb2FkUm93ID0gaGFuZGxlci5kb3dubG9hZFRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgLmNsb25lKCkucmVtb3ZlQXR0cignaWQnKTsKICAgICAgICAgICAgZG93bmxvYWRSb3cuYXR0cignZGF0YS1pZCcsIGZpbGUuaWQgfHwgZmlsZS5uYW1lKTsKICAgICAgICAgICAgZG93bmxvYWRSb3cuZmluZCgnLmZpbGVfbmFtZSBhJykKICAgICAgICAgICAgICAgIC50ZXh0KGZpbGVOYW1lKTsKICAgICAgICAgICAgZG93bmxvYWRSb3cuZmluZCgnLmZpbGVfc2l6ZScpCiAgICAgICAgICAgICAgICAudGV4dChoYW5kbGVyLmZvcm1hdEZpbGVTaXplKGZpbGUuc2l6ZSkpOwogICAgICAgICAgICBpZiAodGh1bWJuYWlsVXJsKSB7CiAgICAgICAgICAgICAgICBkb3dubG9hZFJvdy5maW5kKCcuZmlsZV9kb3dubG9hZF9wcmV2aWV3JykuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICQoJzxhLz4nKS5hcHBlbmQoJCgnPGltZy8+JykuYXR0cignc3JjJywgdGh1bWJuYWlsVXJsKSkKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBkb3dubG9hZFJvdy5maW5kKCdhJykuYXR0cigndGFyZ2V0JywgJ19ibGFuaycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRvd25sb2FkUm93LmZpbmQoJ2EnKQogICAgICAgICAgICAgICAgLmF0dHIoJ2hyZWYnLCBmaWxlVXJsIHx8IG51bGwpCiAgICAgICAgICAgICAgICAuZWFjaChoYW5kbGVyLmVuYWJsZURyYWdUb0Rlc2t0b3ApOwogICAgICAgICAgICBkb3dubG9hZFJvdy5maW5kKCcuZmlsZV9kb3dubG9hZF9kZWxldGUgYnV0dG9uJykKICAgICAgICAgICAgICAgIC5idXR0b24oe2ljb25zOiB7cHJpbWFyeTogJ3VpLWljb24tdHJhc2gnfSwgdGV4dDogZmFsc2V9KTsKICAgICAgICAgICAgcmV0dXJuIGRvd25sb2FkUm93OwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5vbkVycm9yID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlcikgewogICAgICAgICAgICBoYW5kbGVyLnVwbG9hZFJvdy5hZGRDbGFzcygnZmlsZV91cGxvYWRfZXJyb3InKQogICAgICAgICAgICAgICAgLmZpbmQoJy5maWxlX3VwbG9hZF9wcm9ncmVzcycpLmFwcGVuZCgkKCc8ZGl2IGNsYXNzPSJlcnJvciIvPicpLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmxvY2FsZVtldmVudF0gfHwgZXZlbnQKICAgICAgICAgICAgICAgICkpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy52YWxpZGF0ZSA9IGZ1bmN0aW9uIChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSB0cnVlLAogICAgICAgICAgICAgICAgZmlsZTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgICQuZWFjaChmaWxlcywgZnVuY3Rpb24gKGluZGV4LCBmaWxlKSB7CiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGhhbmRsZXIudmFsaWRhdGUoZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZmlsZSA9IGZpbGVzW2luZGV4XTsKICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLm1heEZpbGVTaXplICYmIGZpbGUuc2l6ZSA+IGhhbmRsZXIubWF4RmlsZVNpemUpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9uRXJyb3IoJ0ZpbGUgaXMgdG9vIGJpZycsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaWxlLnNpemUgPT09ICdudW1iZXInICYmIGZpbGUuc2l6ZSA8IGhhbmRsZXIubWluRmlsZVNpemUpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm9uRXJyb3IoJ0ZpbGUgaXMgdG9vIHNtYWxsJywgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpOwogICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghKGhhbmRsZXIuYWNjZXB0RmlsZVR5cGVzLnRlc3QoZmlsZS50eXBlKSB8fAogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmFjY2VwdEZpbGVUeXBlcy50ZXN0KGZpbGUubmFtZSkpKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbkVycm9yKCdGaWxldHlwZSBub3QgYWxsb3dlZCcsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyKTsKICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIubWF4TnVtYmVyT2ZGaWxlcyA9PT0gJ251bWJlcicgJiYKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5tYXhOdW1iZXJPZkZpbGVzIDwgaW5kZXggKyAxKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbkVycm9yKCdNYXggbnVtYmVyIGV4Y2VlZGVkJywgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpOwogICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gaXNWYWxpZDsKICAgICAgICB9OwoKICAgICAgICB0aGlzLnVwbG9hZENhbGxCYWNrID0gZnVuY3Rpb24gKGV2ZW50LCBmaWxlcywgaW5kZXgsIHhociwgaGFuZGxlciwgY2FsbEJhY2spIHsKICAgICAgICAgICAgY2FsbEJhY2soKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uIChldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIsIGNhbGxCYWNrKSB7CiAgICAgICAgICAgIGlmICghaGFuZGxlci52YWxpZGF0ZShldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIpKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG51bWJlciA9IHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgPyAxIDogZmlsZXMubGVuZ3RoOwogICAgICAgICAgICBoYW5kbGVyLmFkanVzdE1heE51bWJlck9mRmlsZXMoLW51bWJlcik7CiAgICAgICAgICAgIGhhbmRsZXIudXBsb2FkUm93LmZpbmQoaGFuZGxlci5jYW5jZWxTZWxlY3RvcikuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIuYWRqdXN0TWF4TnVtYmVyT2ZGaWxlcyhudW1iZXIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKGhhbmRsZXIuYXV0b1VwbG9hZCkgewogICAgICAgICAgICAgICAgaGFuZGxlci51cGxvYWRDYWxsQmFjayhldmVudCwgZmlsZXMsIGluZGV4LCB4aHIsIGhhbmRsZXIsIGNhbGxCYWNrKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGhhbmRsZXIudXBsb2FkUm93LmZpbmQoJy5maWxlX3VwbG9hZF9zdGFydCBidXR0b24nKS5jbGljayhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICQodGhpcykuZmFkZU91dCgpOwogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIudXBsb2FkQ2FsbEJhY2soZXZlbnQsIGZpbGVzLCBpbmRleCwgeGhyLCBoYW5kbGVyLCBjYWxsQmFjayk7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB0aGlzLmRvd25sb2FkSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmICh1cGxvYWRIYW5kbGVyLmZvcmNlSWZyYW1lRG93bmxvYWQpIHsKICAgICAgICAgICAgICAgIC8vIE9wZW4gZG93bmxvYWQgZGlhbG9ncyB2aWEgaWZyYW1lcywgdG8gcHJldmVudCBhYm9ydGluZyBjdXJyZW50IHVwbG9hZHM6CiAgICAgICAgICAgICAgICAkKCc8aWZyYW1lIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ii8+JykKICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgdGhpcy5ocmVmKQogICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhjb250YWluZXIpOwogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5kZWxldGVIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIHJvdyA9ICQodGhpcykuY2xvc2VzdCgndHInKTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogdXBsb2FkSGFuZGxlci51cmwgKyAnP2ZpbGU9JyArIGVuY29kZVVSSUNvbXBvbmVudCgKICAgICAgICAgICAgICAgICAgICByb3cuYXR0cignZGF0YS1pZCcpCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgdHlwZTogJ0RFTEVURScsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5hZGp1c3RNYXhOdW1iZXJPZkZpbGVzKDEpOwogICAgICAgICAgICAgICAgICAgIHJvdy5mYWRlT3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5pbml0RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kb3dubG9hZFRhYmxlLmZpbmQoJ2E6bm90KFt0YXJnZXQ9Il9ibGFuayJdKScpCiAgICAgICAgICAgICAgICAubGl2ZSgnY2xpY2snLCB1cGxvYWRIYW5kbGVyLmRvd25sb2FkSGFuZGxlcik7CiAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZG93bmxvYWRUYWJsZS5maW5kKCcuZmlsZV9kb3dubG9hZF9kZWxldGUgYnV0dG9uJykKICAgICAgICAgICAgICAgIC5saXZlKCdjbGljaycsIHVwbG9hZEhhbmRsZXIuZGVsZXRlSGFuZGxlcik7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5kZXN0cm95RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kb3dubG9hZFRhYmxlLmZpbmQoJ2E6bm90KFt0YXJnZXQ9Il9ibGFuayJdKScpCiAgICAgICAgICAgICAgICAuZGllKCdjbGljaycsIHVwbG9hZEhhbmRsZXIuZG93bmxvYWRIYW5kbGVyKTsKICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kb3dubG9hZFRhYmxlLmZpbmQoJy5maWxlX2Rvd25sb2FkX2RlbGV0ZSBidXR0b24nKQogICAgICAgICAgICAgICAgLmRpZSgnY2xpY2snLCB1cGxvYWRIYW5kbGVyLmRlbGV0ZUhhbmRsZXIpOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgdGhpcy5tdWx0aUJ1dHRvbkhhbmRsZXIgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB1cGxvYWRIYW5kbGVyLnVwbG9hZFRhYmxlLmZpbmQoZS5kYXRhLnNlbGVjdG9yICsgJyBidXR0b246dmlzaWJsZScpLmNsaWNrKCk7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIHRoaXMuaW5pdE11bHRpQnV0dG9ucyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHVwbG9hZEhhbmRsZXIuYXV0b1VwbG9hZCkgewogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5tdWx0aUJ1dHRvbnMuZmluZCgnLmZpbGVfdXBsb2FkX3N0YXJ0OmZpcnN0JykuaGlkZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5tdWx0aUJ1dHRvbnMuZmluZCgnLmZpbGVfdXBsb2FkX3N0YXJ0OmZpcnN0JykKICAgICAgICAgICAgICAgICAgICAuYnV0dG9uKHtpY29uczoge3ByaW1hcnk6ICd1aS1pY29uLWNpcmNsZS1hcnJvdy1lJ319KQogICAgICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIHtzZWxlY3RvcjogJy5maWxlX3VwbG9hZF9zdGFydCd9LCB1cGxvYWRIYW5kbGVyLm11bHRpQnV0dG9uSGFuZGxlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5tdWx0aUJ1dHRvbnMuZmluZCgnLmZpbGVfdXBsb2FkX2NhbmNlbDpmaXJzdCcpCiAgICAgICAgICAgICAgICAuYnV0dG9uKHtpY29uczoge3ByaW1hcnk6ICd1aS1pY29uLWNhbmNlbCd9fSkKICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIHtzZWxlY3RvcjogJy5maWxlX3VwbG9hZF9jYW5jZWwnfSwgdXBsb2FkSGFuZGxlci5tdWx0aUJ1dHRvbkhhbmRsZXIpOwogICAgICAgICAgICB1cGxvYWRIYW5kbGVyLm11bHRpQnV0dG9ucy5maW5kKCcuZmlsZV9kb3dubG9hZF9kZWxldGU6Zmlyc3QnKQogICAgICAgICAgICAgICAgLmJ1dHRvbih7aWNvbnM6IHtwcmltYXJ5OiAndWktaWNvbi10cmFzaCd9fSkKICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIHtzZWxlY3RvcjogJy5maWxlX2Rvd25sb2FkX2RlbGV0ZSd9LCB1cGxvYWRIYW5kbGVyLm11bHRpQnV0dG9uSGFuZGxlcik7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB0aGlzLmRlc3Ryb3lNdWx0aUJ1dHRvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIubXVsdGlCdXR0b25zLmZpbmQoCiAgICAgICAgICAgICAgICAnLmZpbGVfdXBsb2FkX3N0YXJ0OmZpcnN0LCAuZmlsZV91cGxvYWRfY2FuY2VsOmZpcnN0LCAuZmlsZV9kb3dubG9hZF9kZWxldGU6Zmlyc3QnCiAgICAgICAgICAgICkudW5iaW5kKCdjbGljaycsIHVwbG9hZEhhbmRsZXIubXVsdGlCdXR0b25IYW5kbGVyKS5idXR0b24oJ2Rlc3Ryb3knKS5zaG93KCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5pbml0RXh0ZW5kZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuaW5pdEV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5pbml0TXVsdGlCdXR0b25zKCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5kZXN0cm95RXh0ZW5kZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHVwbG9hZEhhbmRsZXIuZGVzdHJveUV2ZW50SGFuZGxlcnMoKTsKICAgICAgICAgICAgdXBsb2FkSGFuZGxlci5kZXN0cm95TXVsdGlCdXR0b25zKCk7CiAgICAgICAgfTsKCiAgICAgICAgJC5leHRlbmQodGhpcywgb3B0aW9ucyk7CiAgICB9OwoKICAgIG1ldGhvZHMgPSB7CiAgICAgICAgaW5pdCA6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCh0aGlzKS5maWxlVXBsb2FkVUkobmV3IFVwbG9hZEhhbmRsZXIoJCh0aGlzKSwgb3B0aW9ucykpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIAogICAgICAgIG9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbiwgdmFsdWUsIG5hbWVzcGFjZSkgewogICAgICAgICAgICBpZiAoIW9wdGlvbiB8fCAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykpIHsKICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmZpbGVVcGxvYWQoJ29wdGlvbicsIG9wdGlvbiwgdmFsdWUsIG5hbWVzcGFjZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbGVVcGxvYWRVSSgnb3B0aW9uJywgb3B0aW9uLCB2YWx1ZSwgbmFtZXNwYWNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICAgICAgCiAgICAgICAgZGVzdHJveSA6IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbGVVcGxvYWRVSSgnZGVzdHJveScsIG5hbWVzcGFjZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgdXBsb2FkOiBmdW5jdGlvbiAoZmlsZXMsIG5hbWVzcGFjZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQodGhpcykuZmlsZVVwbG9hZFVJKCd1cGxvYWQnLCBmaWxlcywgbmFtZXNwYWNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKICAgIAogICAgJC5mbi5maWxlVXBsb2FkVUlYID0gZnVuY3Rpb24gKG1ldGhvZCkgewogICAgICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHsKICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHNbbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpIHsKICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQuZXJyb3IoJ01ldGhvZCAiJyArIG1ldGhvZCArICciIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5maWxlVXBsb2FkVUlYJyk7CiAgICAgICAgfQogICAgfTsKICAgIAp9KGpRdWVyeSkpOwo=]]></Resource>
  </Resources>
  <SourceCode><![CDATA[

import sys

class VDOM_uploader_2(VDOM_object):

	def render(self, parent, contents=""):
		woid = (self.id).replace('-', '_')
		id = u"o_" + woid

		display = u"display: none;" if self.visible == "0" else u""
		style = u"display:block;margin:0;padding:0; z-index:{zind}; position:{pos}; top:{top}px; left:{left}px; height:{height}px; {display}" \
			.format(
				zind = self.zindex, pos = self.position,
				top = self.top, left = self.left,
				height = self.height, display = display
			)

		classname = u"""class="%s" """ % self.classname if self.classname else u""

		pageurl = (self.pageurl).strip()
		if pageurl != "":
			pageurl = u"/%s.vdom" % pageurl

		try:
			formdata = json.loads(self.formdata)
		except:
			formdata = {}

		if isinstance(formdata, list):
			formdata = {}

		if VDOM_CONFIG_1["DEBUG"] == "1":
			debug_info = u"objtype='uploader_2' objname='%s' ver='%s'" % (self.name, self.type.version)
		else:
			debug_info = u""

		js = u"""
<script type='text/javascript'>
$j(function(){
	$j('#%(id)s').fileUploadUI({
		dataType: 'json',
		dropZone: $j('#%(id)s'),
		autoUpload: true,
		replaceFileInput: false,
		/*forceIframeUpload: true,*/
		/*onCompleteAll: function (e, data) {
			execEventBinded('%(woid)s', "done", {}, true);
		},*/
		onComplete: function (event, files, index, xhr, handler) {
			execEventBinded('%(woid)s', "done", {data: $j.trim(xhr.responseText)}, true);
		},
		onSend: function (event, files, index, xhr, handler) {
			if (!xhr.upload && handler.progressbar) {
				handler.progressbar.progressbar( 'value', 100 );
			}
			execEventBinded('%(woid)s', "start", {}, true);
		},
		onProgressAll: function (event, list) {
			execEventBinded('%(woid)s', "progress", {
				total: event.total,
				loaded: event.loaded,
				percent: parseInt(event.loaded / event.total * 100, 10)
			}, true);
		},
		onError: function (event, files, index, xhr, handler) {
			execEventBinded('%(woid)s', "error", {text: event.textStatus}, true);
		},
		onAbort: function (event, files, index, xhr, handler) {
			execEventBinded('%(woid)s', "cancel", {}, true);
		},
		uploadTable: $j('#%(id)s table.files'),
		buildUploadRow: function (files, index) {
			return $j('<tr style="display:none"><td class="file_upload_cancel"><button class="ui-state-default" title="Cancel"><span class="ui-icon ui-icon-cancel">Cancel<\/span><\/button><\/td><td class="file_upload_preview"><\/td>' +
									'<td>' + files[index].name + '<\/td>' +
									'<td class="file_upload_start"><button style="display:none" title="Start Upload"><\/button><\/td>' +
								'<\/tr>');
		}/*, // for upload by button
		beforeSend: function (event, files, index, xhr, handler, callBack) {
			handler.uploadRow.find('.file_upload_start button').click(function () {
				callBack();
				return false;
			});
		}*/
	});
});
</script>
		""" % { "woid": woid, "id": id, "formdata": formdata }

		v2 = u"""
			<form id="{id}" action="{pageurl}" method="post" enctype="multipart/form-data" style="{style}" {classname}>
				<input type="file" name="files[]" multiple />
				<table class="files"></table>
			</form>
		""".format(
				id        = id,
				style     = style,
				classname = classname,
				pageurl   = pageurl
			)

		v3 = u"""
			<form id="{id}" action="/upload.py" method="post" enctype="multipart/form-data" style="{style}" {classname}>
				<input type="file" name="files" />
				<table class="files"></table>
			</form>
		""".format(
				id        = id,
				style     = style,
				classname = classname
			)

		result = u"""
			{v}
			{js}
		""".format(
				v  = v3 if self.mode == '1' else v2,
				js = js
			)

		return VDOM_object.render(self, parent, contents=result)


	def wysiwyg(self, parent, contents=""):
		import utils.wysiwyg
		
		image_id = "d3b7faa2-c2a1-5433-c92e-16f5bde8b918"
		result = utils.wysiwyg.get_empty_wysiwyg_value(self, image_id)
		
		return VDOM_object.wysiwyg(self, parent, contents=result)
]]></SourceCode>
  <Libraries>
    <Library Target="HTML"><![CDATA[<script type='text/javascript' src='/b4993ec8-6d66-8240-22a7-48fbbedfe371.res'></script>]]></Library>
    <Library Target="HTML"><![CDATA[
<style>

form.file_upload {
	position: relative;
	overflow: hidden;
	direction: ltr;
	cursor: pointer;
	text-align: center;
	color: #333;
	font-weight: bold;
	width: 15em;
	height: 2.5em;
	line-height: 2.5em;
	background: transparent;
	border: 1px solid transparent;
	-webkit-border-radius: 3px;
	-moz-border-radius: 3px;
	-o-border-radius: 3px;
	border-radius: 3px;
}

form.file_upload_small {
/*
	width: 15em;
	height: 2.5em;
	line-height: 2.5em;
	font-size: 100%;
	background: palegreen;
	border: 1px solid limegreen;
*/
}

form.file_upload_large {
	background: palegreen;
	border: 1px solid limegreen;
}

form.file_upload_highlight,
form.file_upload:hover {
}

form.file_upload input {
	position: absolute;
	top: 0;
	right: 0;
	margin: 0;
	border: 300px solid transparent;
	opacity: 0;
	filter: alpha(opacity=0);
	-ms-filter: 'alpha(opacity=0)';
	-o-transform: translate(-300px, -300px) scale(10);
	-moz-transform: translate(-800px, 0) scale(10);
	cursor: pointer;
	height: 100%;
}

:root form.file_upload input {
  height: auto;
}

form.file_upload button,
.no-js .file_upload_label,
.no-js .file_upload_overall_progress,
.no-js .file_upload_buttons {
	display: none;
}

.file_upload .file_upload_label,
.file_upload .file_upload_overall_progress,
.file_upload .file_upload_buttons {
	display: block;
}

.file_upload img {
	border: none;
}

.progressbar, .progressbar div {
}

.progressbar div {
	width: 100%;
	height: 100%;
	margin: -1px;
}

.file_upload_progress .ui-progressbar-value,
.file_upload_overall_progress .ui-progressbar-value,
.progressbar div {
/*	background: url(pbar-ani.gif);*/
}

.file_upload_progress div {
	width: 150px;
	height: 17px;
}

.file_upload_overall_progress div {
	width: 350px;
	height: 17px;
}

.file_upload .file_name {
}

.file_upload .file_size {
	padding: 0 10px 0 0;
	text-align: right;
	white-space: nowrap;
	font-size: 1.1em;
}

.file_upload .files,
.file_upload_overall_progress {
	margin: 10px 0;
}

.file_upload_error .ui-progressbar,
.file_upload_error .progressbar,
.file_upload_error .file_upload_start button {
	display: none;
}

.file_upload_error .error {
	width: 100%;
	height: 100%;
	color: red;
}

.file_upload .ui-widget {
}

.file_upload table.files td {
	display: none;
}

</style>
]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="start" Help="#Lang(507)">
          <Parameters/>
        </Event>
        <Event Name="progress" Help="#Lang(508)">
          <Parameters>
            <Parameter Name="total" Order="" VbType="" Help="#Lang(901)"/>
            <Parameter Name="loaded" Order="" VbType="" Help="#Lang(902)"/>
            <Parameter Name="percent" Order="" VbType="" Help="#Lang(903)"/>
          </Parameters>
        </Event>
        <Event Name="done" Help="#Lang(509)">
          <Parameters>
            <Parameter Name="data" Order="" VbType="" Help="#Lang(904)"/>
          </Parameters>
        </Event>
        <Event Name="error" Help="#Lang(511)">
          <Parameters>
            <Parameter Name="text" Order="" VbType="" Help="#Lang(905)"/>
          </Parameters>
        </Event>
        <Event Name="cancel" Help="#Lang(512)">
          <Parameters/>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="Number(0,9999)" InterfaceName="#Lang(701)" ScriptName="fade" Help="#Lang(801)" RegularExpressionValidation="^[0-9]{1,99}$"/>
          </Parameters>
          <SourceCode><![CDATA[
vdom_ui_hide(this.domCont, fade);
                    ]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="moveTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="Number(0,9999)" InterfaceName="#Lang(702)" ScriptName="newX" Help="#Lang(802)" RegularExpressionValidation="^[0-9]{1,99}$"/>
            <Parameter DefaultValue="0" Interface="Number(0,9999)" InterfaceName="#Lang(703)" ScriptName="newY" Help="#Lang(803)" RegularExpressionValidation="^[0-9]{1,99}$"/>
            <Parameter DefaultValue="0" Interface="Number(0,9999)" InterfaceName="#Lang(704)" ScriptName="Effect" Help="#Lang(804)" RegularExpressionValidation="^[0-9]{1,99}$"/>
          </Parameters>
          <SourceCode><![CDATA[
vdom_ui_moveTo(this.domCont, newX, newY, Effect);
                    ]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="setStyle">
          <Parameters>
            <Parameter DefaultValue="" Interface="TextField(0,999)" InterfaceName="#Lang(705)" ScriptName="cssStyleValue" Help="#Lang(805)" RegularExpressionValidation="^.{0,999}$"/>
          </Parameters>
          <SourceCode><![CDATA[
jQuery(this).attr('style', cssStyleValue);
                    ]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="Number(0,9999)" InterfaceName="#Lang(706)" ScriptName="fade" Help="#Lang(806)" RegularExpressionValidation="^[0-9]{1,99}$"/>
          </Parameters>
          <SourceCode><![CDATA[
vdom_ui_show(this.domCont, fade);
                    ]]></SourceCode>
        </Action>
        <Action Help="#Lang(505)" InterfaceName="#Lang(605)" MethodName="submit">
          <Parameters/>
          <SourceCode><![CDATA[
$j('#'+this.domCont.id+' .file_upload_start button').click();
return false;
]]></SourceCode>
        </Action>
        <Action Help="#Lang(506)" InterfaceName="#Lang(606)" MethodName="cancel">
          <Parameters/>
          <SourceCode><![CDATA[
var id = this.domCont.id;
$j('#'+this.domCont.id+' .file_upload_cancel button').click();
execEventBinded(id.substring(2, id.length), "cancel", {});
return false;
]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>