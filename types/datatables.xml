<?xml version="1.0" encoding="utf-8"?><Type>
	<Information>
		<Name>datatables</Name>
		<DisplayName>#Lang(001)</DisplayName>
		<Description>#Lang(002)</Description>
		<ClassName>VDOM_datatables</ClassName>
		<ID>9fd5cc88-e1a2-48a5-8328-df1368c8e44b</ID>
		<Icon>#Res(d3e6612f-b2a2-ee88-7419-af3e7cdc6016)</Icon>
		<EditorIcon>#Res(6d804848-fc36-8b66-2fc7-3a2de7ec897b)</EditorIcon>
		<StructureIcon>#Res(e5017294-a4b6-df2c-3ed1-f458cc6f43a0)</StructureIcon>
		<Moveable>1</Moveable>
		<Resizable>3</Resizable>
		<Category>Standard</Category>
		<Container>1</Container>
		<Dynamic>1</Dynamic>
		<Version>1</Version>
		<InterfaceType>1</InterfaceType>
		<OptimizationPriority>1</OptimizationPriority>
		<Containers>htmlcontainer,dialog,container,tablecell</Containers>
		<Languages>en_US, ru_RU, fr_FR</Languages>
	</Information>
	<Attributes>
		<Attribute>
			<Name>hierarchy</Name>
			<DisplayName>#Lang(101)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(201)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(301)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(2)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>visible</Name>
			<DisplayName>#Lang(102)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^[01]$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(202)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(302)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>zindex</Name>
			<DisplayName>#Lang(103)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(203)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(303)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(2)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>top</Name>
			<DisplayName>#Lang(104)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(204)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(304)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(4)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>left</Name>
			<DisplayName>#Lang(105)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(205)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(305)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(4)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>width</Name>
			<DisplayName>#Lang(106)</DisplayName>
			<DefaultValue>50</DefaultValue>
			<RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(206)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(306)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(4)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>height</Name>
			<DisplayName>#Lang(107)</DisplayName>
			<DefaultValue>50</DefaultValue>
			<RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(207)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(307)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>TextField(4)</CodeInterface>
			<Colorgroup>1</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>method</Name>
			<DisplayName>#Lang(142)</DisplayName>
			<DefaultValue>post</DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(212)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>DropDown((#Lang(407)|post)|(#Lang(408)|event))</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>target</Name>
			<DisplayName>#Lang(131)</DisplayName>
			<DefaultValue/>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(208)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(308)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>PageLink()</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>tableheader</Name>
			<DisplayName>#Lang(123)</DisplayName>
			<DefaultValue />
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>htmlcode</Name>
			<DisplayName>#Lang(114)</DisplayName>
			<DefaultValue />
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>tablekey</Name>
			<DisplayName>#Lang(125)</DisplayName>
			<DefaultValue />
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(15)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>hiddenfields</Name>
			<DisplayName>#Lang(132)</DisplayName>
			<DefaultValue><![CDATA[{}]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>showsearch</Name>
			<DisplayName>#Lang(115)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^[01]$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>showinformation</Name>
			<DisplayName>#Lang(116)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^[01]$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>showlength</Name>
			<DisplayName>#Lang(117)</DisplayName>
			<DefaultValue>0</DefaultValue>
			<RegularExpressionValidation>^[01]$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>0</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>multiselect</Name>
			<DisplayName>#Lang(133)</DisplayName>
			<DefaultValue>1</DefaultValue>
			<RegularExpressionValidation>^[01]$</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>0</InterfaceType>
			<CodeInterface>DropDown((#Lang(405)|1)|(#Lang(406)|0))</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>lengthtext</Name>
			<DisplayName>#Lang(126)</DisplayName>
			<DefaultValue><![CDATA[Display _MENU_ records per page]]></DefaultValue> 
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>zerorecords</Name>
			<DisplayName>#Lang(127)</DisplayName>
			<DefaultValue><![CDATA[Nothing found - sorry]]></DefaultValue> 
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>information</Name>
			<DisplayName>#Lang(128)</DisplayName>
			<DefaultValue><![CDATA[Showing _START_ to _END_ of _TOTAL_ records]]></DefaultValue> 
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>infoempty</Name>
			<DisplayName>#Lang(129)</DisplayName>
			<DefaultValue><![CDATA[Showing 0 to 0 of 0 records]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>infofiltred</Name>
			<DisplayName>#Lang(130)</DisplayName>
			<DefaultValue><![CDATA[(filtered from _MAX_ total records)]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>TextField(100)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>selected_css</Name>
			<DisplayName>#Lang(135)</DisplayName>
			<DefaultValue><![CDATA[]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>odd_css</Name>
			<DisplayName>#Lang(136)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>even_css</Name>
			<DisplayName>#Lang(137)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>table_css</Name>
			<DisplayName>#Lang(138)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>search_css</Name>
			<DisplayName>#Lang(139)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>info_css</Name>
			<DisplayName>#Lang(140)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>length_css</Name>
			<DisplayName>#Lang(141)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>table_td_css</Name>
			<DisplayName>#Lang(143)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
		<Attribute>
			<Name>table_th_css</Name>
			<DisplayName>#Lang(144)</DisplayName>
			<DefaultValue><![CDATA[ ]]></DefaultValue>
			<RegularExpressionValidation>.*</RegularExpressionValidation>
			<ErrorValidationMessage>#Lang(211)</ErrorValidationMessage>
			<Visible>1</Visible>
			<Help>#Lang(315)</Help>
			<InterfaceType>3</InterfaceType>
			<CodeInterface>MultiLine(10000)</CodeInterface>
			<Colorgroup>2</Colorgroup>
		</Attribute>
	</Attributes>
	<Languages>
		<Language Code="en_US">
			<Sentence ID="001">Datatables</Sentence>
			<Sentence ID="002">HTML table for data</Sentence>
			<Sentence ID="101">Hierarchy</Sentence>
			<Sentence ID="102">Visibility</Sentence>
			<Sentence ID="103">Z-Index</Sentence>
			<Sentence ID="104">Top</Sentence>
			<Sentence ID="105">Left</Sentence>
			<Sentence ID="106">Width</Sentence>
			<Sentence ID="107">Height</Sentence>
			<Sentence ID="108">Minimum Width</Sentence>
			<Sentence ID="109">Minimum Height</Sentence>
			<Sentence ID="110">Title</Sentence>
			<Sentence ID="111">Resizable</Sentence>
			<Sentence ID="112">Draggable</Sentence>
			<Sentence ID="113">Show</Sentence>
			<Sentence ID="114">Htmlcode</Sentence>
			<Sentence ID="115">Show search</Sentence>
			<Sentence ID="116">Show information</Sentence>
			<Sentence ID="117">Show length</Sentence>
			<Sentence ID="118">Text length</Sentence>
			<Sentence ID="119">Search result text</Sentence>
			<Sentence ID="120">Info text</Sentence>
			<Sentence ID="121">Info empty</Sentence>
			<Sentence ID="122">Info search</Sentence>
			<Sentence ID="123">Table header</Sentence>
			<Sentence ID="124">Row ID</Sentence>
			<Sentence ID="125">Table key</Sentence>
			<Sentence ID="126">Length text</Sentence>
			<Sentence ID="127">Zero records</Sentence>
			<Sentence ID="128">Information</Sentence>
			<Sentence ID="129">Info empty</Sentence>
			<Sentence ID="130">Info filtred</Sentence>
			<Sentence ID="131">Target</Sentence>
			<Sentence ID="132">Hidden fields</Sentence>
			<Sentence ID="133">Multiselect</Sentence>
			<Sentence ID="134">Odd selected CSS</Sentence>
			<Sentence ID="135">Selected CSS</Sentence>
			<Sentence ID="136">Odd CSS</Sentence>
			<Sentence ID="137">Even CSS</Sentence>
			<Sentence ID="138">Table CSS </Sentence>
			<Sentence ID="139">Search CSS</Sentence>
			<Sentence ID="140">Info CSS</Sentence>
			<Sentence ID="141">Length CSS</Sentence>
			<Sentence ID="142">Form send method</Sentence>
			<Sentence ID="143">Table td CSS</Sentence>
			<Sentence ID="144">Table th CSS</Sentence>
			<Sentence ID="201">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="202">Incorrect value</Sentence>
			<Sentence ID="203">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="204">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="205">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="206">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="207">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="208">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="209">Incorrect value, must be positive integer</Sentence>
			<Sentence ID="210">Incorrect value, must be string</Sentence>
			<Sentence ID="211">Incorrect value</Sentence>
			<Sentence ID="212">Incorrect value</Sentence>
			<Sentence ID="301">Hierarchy</Sentence>
			<Sentence ID="303">Z-Index</Sentence>
			<Sentence ID="302">Show or not object</Sentence>
			<Sentence ID="304">Distance from the top edge of the parent in pixels</Sentence>
			<Sentence ID="305">Distance from the left edge of the parent in pixels</Sentence>
			<Sentence ID="306">Width in pixels</Sentence>
			<Sentence ID="307">Height in pixels</Sentence>
			<Sentence ID="308">Minimum width in pixels</Sentence>
			<Sentence ID="309">Minimum height in pixels</Sentence>
			<Sentence ID="310">Title of the dialog</Sentence>
			<Sentence ID="311">Allow to resize dialog or not</Sentence>
			<Sentence ID="312">Allow to drag dialog or not (if not modal)</Sentence>
			<Sentence ID="313">Show after create</Sentence>
			<Sentence ID="314">JSON data for diagram</Sentence>
			<Sentence ID="315">no help</Sentence>
			<Sentence ID="401">Yes</Sentence>
			<Sentence ID="402">No</Sentence>
			<Sentence ID="403">Show</Sentence>
			<Sentence ID="404">Don't show</Sentence>
			<Sentence ID="405">Multiselect</Sentence>
			<Sentence ID="406">Singleselect</Sentence>
			<Sentence ID="407">post</Sentence>
			<Sentence ID="408">event</Sentence>
		</Language>
		<Language Code="ru_RU">
			<Sentence ID="001">Flot</Sentence>
			<Sentence ID="002">Diagram</Sentence>
			<Sentence ID="101">Иерархия</Sentence>
			<Sentence ID="102">Отображение</Sentence>
			<Sentence ID="103">Z-Индекс</Sentence>
			<Sentence ID="104">Верх</Sentence>
			<Sentence ID="105">Лево</Sentence>
			<Sentence ID="106">Ширина</Sentence>
			<Sentence ID="107">Высота</Sentence>
			<Sentence ID="108">Минимальная ширина</Sentence>
			<Sentence ID="109">Минимальная высота</Sentence>
			<Sentence ID="110">Заголовок</Sentence>
			<Sentence ID="111">Масштабируемый</Sentence>
			<Sentence ID="112">Перемещаемый</Sentence>
			<Sentence ID="113">Показать</Sentence>
			<Sentence ID="114">Данные</Sentence>
			<Sentence ID="201">Неправильное значение</Sentence>
			<Sentence ID="202">Incorrect value</Sentence>
			<Sentence ID="203">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="204">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="205">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="206">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="207">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="208">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="209">Неправильное значение, должно быть целое положительное число</Sentence>
			<Sentence ID="210">Неправильное значение, должна быть строка</Sentence>
			<Sentence ID="211">Неправильное значение</Sentence>
			<Sentence ID="212">Неправильное значение</Sentence>
			<Sentence ID="301">Приоритет в потоке гипертекста</Sentence>
			<Sentence ID="303">Заголовок контейнера</Sentence>
			<Sentence ID="302">Show or not object</Sentence>
			<Sentence ID="304">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
			<Sentence ID="305">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
			<Sentence ID="306">Ширина объекта в пикселях</Sentence>
			<Sentence ID="307">Высота объекта в пикселях</Sentence>
			<Sentence ID="308">Минимальня ширина в пикселях</Sentence>
			<Sentence ID="309">Минимальная высота в пикселях</Sentence>
			<Sentence ID="310">Заголовок диалога</Sentence>
			<Sentence ID="311">Разрешить масштабирование диалога или нет</Sentence>
			<Sentence ID="312">Разрешить перемещение диалога или нет</Sentence>
			<Sentence ID="313">Показать после создания</Sentence>
			<Sentence ID="401">Да</Sentence>
			<Sentence ID="401">Да</Sentence>
			<Sentence ID="402">Нет</Sentence>
		</Language>
		<Language Code="fr_FR">
			<Sentence ID="001">Flot</Sentence>
			<Sentence ID="002">Diagram</Sentence>
			<Sentence ID="101">Hiérarchie</Sentence>
			<Sentence ID="102">Visibilité</Sentence>
			<Sentence ID="103">Z-Index</Sentence>
			<Sentence ID="104">Haut</Sentence>
			<Sentence ID="105">Gauche</Sentence>
			<Sentence ID="106">Largeur</Sentence>
			<Sentence ID="107">Hauteur</Sentence>
			<Sentence ID="108">Largeur Minimum</Sentence>
			<Sentence ID="109">Hauteur Minimum</Sentence>
			<Sentence ID="110">Titre</Sentence>
			<Sentence ID="111">Redimensionnable</Sentence>
			<Sentence ID="112">Déplaçables</Sentence>
			<Sentence ID="113">Show</Sentence>
			<Sentence ID="114">Data</Sentence>
			<Sentence ID="201">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="202">Incorrect value</Sentence>
			<Sentence ID="203">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="204">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="205">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="206">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="207">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="208">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="209">Valeur Incorrecte, doit être positive</Sentence>
			<Sentence ID="210">Valeur Incorrecte, doit être une chaîne</Sentence>
			<Sentence ID="211">Valeur Incorrecte</Sentence>
			<Sentence ID="212">Valeur Incorrecte</Sentence>
			<Sentence ID="301">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
			<Sentence ID="303">Niveau de superposition de l'objet par rapport aux autres</Sentence>
			<Sentence ID="302">Show or not object</Sentence>
			<Sentence ID="304">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
			<Sentence ID="305">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
			<Sentence ID="306">Largeur de l'objet en pixels</Sentence>
			<Sentence ID="307">Hauteur de l'objet en pixels</Sentence>
			<Sentence ID="308">Largeur Minimum en pixels</Sentence>
			<Sentence ID="309">Hauteur Minimum en pixels</Sentence>
			<Sentence ID="310">Titre du dialogue</Sentence>
			<Sentence ID="311">Autoriser ou interdir le redimensionnement du dialogue</Sentence>
			<Sentence ID="312">Autoriser ou interdir le déplacement du dialogue</Sentence>
			<Sentence ID="313">Show after create</Sentence>
			<Sentence ID="401">Oui</Sentence>
			<Sentence ID="402">Non</Sentence>
		</Language>
	</Languages>
	<Resources>
		<Resource ID="d3e6612f-b2a2-ee88-7419-af3e7cdc6016" Name="Icon" Type="png"><![CDATA[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]]></Resource>
		<Resource ID="6d804848-fc36-8b66-2fc7-3a2de7ec897b" Name="Icon" Type="jpg"><![CDATA[/9j/4AAQSkZJRgABAgEASABIAAD/7QUaUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEAAQBIAAAAAQABOEJJTQQNAAAAAAAEAAAAeDhCSU0D8wAAAAAACAAAAAAAAAAAOEJJTQQKAAAAAAABAAA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9mZgABAGxmZgAGAAAAAAABAC9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAABAC0AAAAGAAAAAAABOEJJTQP4AAAAAABwAAD/////////////////////////////A+gAAAAA/////////////////////////////wPoAAAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAADhCSU0ECAAAAAAAEAAAAAEAAAJAAAACQAAAAAA4QklNBBQAAAAAAAQAAAADOEJJTQQMAAAAAAOKAAAAAQAAABgAAAAYAAAASAAABsAAAANuABgAAf/Y/+AAEEpGSUYAAQIBAEgASAAA/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBELCgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsNDg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgAGAAYAwEiAAIRAQMRAf/dAAQAAv/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXiZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIEBAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x//aAAwDAQACEQMRAD8AyusdY6xR1jOxcXOyMXFxci3Hx8fHtfVWyup7qamNqpcxn0GIuJlfWLJxH309XzH2VmHUfaLd22PpD9IlmO6dX17rBzqn2zm3+nsMR+lt3T761f6T+y7Mjdh49rHtHueSdoB/e/Su+ks+c5GZue5PXVypzkZkcdakVZtq9F6r1XI6riYuXmX5WNk3MovoyLH21vrsc2uxrq7XOb9FySsVHEs+s/T34w/7V0eo8fRc71Ge5o/79+ekme7Lg4eM1x99NmP3JcHz/p8PFfg//9Cp1XovVcnquZl4uJdk42VfZfRfRW6yt9dr3W1ubZU1zfoPU6cH6x1YhxG9Oym1uMuIosDjP5u7b9FeZJLLy+3xzrj3Pb5XFy+3xz+fc3w1/hPqfS+l9Tx+p4mVlYl2NjY1zL77763VsYytzbLHOssa1v0WpLyxJD9R7H6d8f8AVquFZ+o9j9OuPwu6f//ZOEJJTQQGAAAAAAAHAAgBAQABAQD/4gIkSUNDX1BST0ZJTEUAAQEAAAIUQURCRQIQAABtbnRyUkdCIFhZWiAH0QADABoACQASADRhY3NwTVNGVAAAAABub25lAAAAAAAAAAAAAAAAAAAAAAAA9tYAAQAAAADTLUFEQkUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApjcHJ0AAAA/AAAACRkZXNjAAABIAAAAGB3dHB0AAABgAAAABRia3B0AAABlAAAABRyVFJDAAABqAAAAA5nVFJDAAABuAAAAA5iVFJDAAAByAAAAA5yWFlaAAAB2AAAABRnWFlaAAAB7AAAABRiWFlaAAACAAAAABR0ZXh0AAAAAChjKSAyMDAxIEFkb2JlIFN5c3RlbXMgSW5jLgBkZXNjAAAAAAAAAAVzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAA81EAAQAAAAEWzFhZWiAAAAAAAAAAAAAAAAAAAAAAY3VydgAAAAAAAAABAjMAAGN1cnYAAAAAAAAAAQIzAABjdXJ2AAAAAAAAAAECMwAAWFlaIAAAAAAAAHRLAAA97QAAA9BYWVogAAAAAAAAWnMAAKx0AAAXM1hZWiAAAAAAAAAoGAAAFZ4AALgq/+4AIUFkb2JlAGRAAAAAAQMAEAMCAwYAAAAAAAAAAAAAAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAgMDAwMDAwMDAwMBAQEBAQEBAQEBAQICAQICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA//CABEIABgAGAMBEQACEQEDEQH/xACRAAEAAwAAAAAAAAAAAAAAAAAGBQcIAQACAwEAAAAAAAAAAAAAAAAFBgEHCAMQAAMBAQADAQAAAAAAAAAAAAUGBwgEAQMJAhEAAAcBAAMBAAMAAAAAAAAAAQIDBAUGBwgRExQSABUJEgACAgEDAwMDBAMAAAAAAAABAhEDBBIFBgAhMUEiFTITFFGBQpIjJBb/2gAMAwEBAhEDEQAAAMC5mxK/rxDdyHA8ymsgKxFBFynXt1Q1lWtjFJ//2gAIAQIAAQUAp9Pb/e4fhweSI+cVygDX51JAvS5BSS10EhBoMSqtcnD+NoPWq0zwHj0epXdSv//aAAgBAwABBQCg0NhXGH1vlJLCkeqOxZ0oZdb56AumFHqLAWEAWtdTR3Qs79qTYPAGSyWghqF//9oACAEBAAEFANe692IibDlFM+idVlWMNUampWqbD351Xt5ZR/OX2d/VOqUMH061LjPVFO1Kmwz6NqsqzFmLS030t//aAAgBAgIGPwDkGVlb9kPlvkWFnNjambUe579z1l5uByTIbIqbvSLbNemJ1CG7n9Fj3QYJaFPD8rC5RmLkfJY6g/dcxrtVCRLEAgN2PoeuULvWJbd/tOE0EiId9UxYnn2x58Hx6n4bacqu5FOqwsdCg+j/AOdgdRHZdLEkaohSy8R+HWR8tiixwfZY/wCRXLII/s4MWH3AfzflGFlcO3L8hMy2QuPa8S5IBKKwmD3EyOsjZcTh25pi2uWcrh5AdgQAVLaPpMCe0kDSTpJU8KxMThW5m87njsA2PagIS1HYBnRRMKYEyT2HX//aAAgBAwIGPwDc9m2bcrMbbsWxqq66mKIqoSqgKpA8DufJPc9+s7P2vluW+XQ/uoW60WaInUsN3J7wse7SwUlwEPFtm3bfsjL2rO3DHxrqbrHtreq+1KnBR2InSxKtEq0EGR1zOvkGDdePzbBX9skaYssDzFtfn2x58Hx6n/n9izasitSXtLMK0UjsHnIYHURCrpYkjVEIWXgp2FZX5vCFtikfbts/Lqlq1j9mcHTY3uC+bLN/3XZuLbhm7Vl5Nl1V2Pj3X1PXa5dCtlSMs6WErMqZVgCI6yuPYPAt4rwbrCzsuBlCxwQAUZhX9BAEiNRA0FtBKniW8bvxHcsLacLccfJuuyce2imumi5LbGay1EWdCHSs6naFUEkDr//aAAgBAQEGPwDqbI8j6n6Hw3HsO6I2PC8jyPC9h0THcxoeYY5oljzujwEDSM7sddrrVZvXa63F48FuZ5IvDKunKqq6pzjab9Sv9D+yrFaadLAhKZij1JvitocQHxEcjNxwm0Qxn7lZUxyt2ZUfLsrdcqKp3JSNlee8j2HpPdtyyLadhzbF9VyjcdZvuuZxeM71O5wlJt8NNUy/T87BKuFoSaVM0eFRK7YOiproKJqEKb+f6OK77QLXdxkO2ukVKmNYeOmn9Z6941Y06L/5rnUfZ9v0s/V+vo8eo/j1+R/YP8QxvU61NREc5UlrTITUmnXIuNeJrFI0nfbqMy1eklF24A3aGaOjKKpe4EwK3OslyHNZdHeoB6y52C3TzFwkFdtNlDZ6ed1LwjBNAPyJvIldPiK+iTX8rkS8id286U2HI+edk2XItv3jWdvynVMbzW46lnd5zjW79YL/AEydg7fSISbgnCrmAn0AdtRWB2wdgo3cJprJnIElkEVxt1FD1malnEpNvo/mXY2tilUXjZFq7h3soSrARaJdJtkwVAEgXUSJ6DKi3EyJuf8AXNdwDYMYyTGNhzbY9T1PY81uWXZ9Ss9y65Qt2ts3OW67Q0LBt1G8JCrA1agsZ0+dGTbt01FlCEH/2Q==]]></Resource>
		<Resource ID="e5017294-a4b6-df2c-3ed1-f458cc6f43a0" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAARRQTFRF4ODg7+/v8fHx+vr6/f395eXl/v7+4uLix8fH3Nzc/Pz81tjYt7e36urq1NTUzs7O6OjoqampxMTEzMzM9/j48PDw5OTklJSU266utbW1p6env7+/6enprKys7vT03t7e9/v73d/furq6TU1N2c/P8vPzycnJ2L+/9/b20qGh/f7+l5eXlpaWpaWl8vLyn5+fvr6+z8/PWlpa9PX1qqqqxJyc3d3d297e4dHRJiYm+fz8y8vL28HBxcXFo6Oj09PT5ubmtra2u7u77Ozs1dXV0tLS39/f+PX14eHh7uTk6eXl+/z8ioqKpKSk9PT01tbW9fX17u7ukJCQ3+Hh6+vr+Pj49vb2+/v7+fn59/f3////////pFFVPQAAAFx0Uk5T/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wCDbRfgAAAA10lEQVR42izP11rDMAyAUSW2s7on0LLK6mZDy55lrxYS2/L7v0ejkHOhi/9CnwSGiIibFNBQkxz4NRkLkmDV1486P7XlYnH6bVO4/W0v6qpWSknZBM//s1uX4/OIaCcLK1lReVp9fa7qGPsqg7n/FKOT7ntI+MtpvMNfyGy99RTBvEVLCweZ7QAZU9q5SUIZcx+HLrIwCh6T4CHC5tkFao0VuoPnuYM469vaWbumS+0dibEIrPpdSIF7Bdd1QTyA3P9/Ti41SqXj4WDvaiP9NsXErjFzAQYAm+s6UwNybn0AAAAASUVORK5CYIIw8qwXZWg0thBhlivw1ld0KjUN4hMGmiGh4u8RoVxRFOkblaPDBTJUzIdTV9NKyzm1ir2EDSSg0RBiHm3bYG+izSENFnBtaBC39hNrYGVtkLQDCjAVs/M0NKRlcrFySOSBXCpUztsABCxSQsyCvCABjoAYfgYGZgFuKfZQiOeYBGsZGRktMxJk3aG+hQFulsZGgAADAGSATSItKo16AAAAAElFTkSuQmCCp6mEc/bAwCBNjE1QSVlpU2trS6Cnp8eXjYPZUgjY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]]></Resource>
		<Resource ID="b53f403c-efe7-4fa7-bff3-35e71027f393" Name="datatables" Type="js"><![CDATA[]]></Resource>
	</Resources>
	<SourceCode>
		<![CDATA[
import json

# changed: extension '.vdom' removed after '(target)s' in html_table - will be added in render() in target-variable
html_table=u"""<div style='%(show)s'>
<form method='%(method)s' action=\"/%(target)s\" name='%(id)s'>
<table id='%(id)s' >
<thead><tr> 
%(cap)s 
</tr></thead>
</table> 
<input type='hidden' value='' name='cmd'>
%(user_hidden_fields)s
</form>
</div>"""

hidden_field_text=u"<input type='hidden' value='%(value)s' name='%(name)s'>"

js_multiselect=u"""
	$.each(m, function(i, e){
		e.unshift('<input type="checkbox" name="checkbox_field_'+i+'">');
		datatables_%(id)s.fnAddData(e);
	});
	
	$('#%(id)s tr td input[name^=checkbox_field]').click( function() {
		var aReturn=[]
		if ( $(this).parent().parent().hasClass('row_selected') ){
			$(this).parent().parent().removeClass('row_selected');
			$(this).attr('checked', false);}
		else
			{$(this).parent().parent().addClass('row_selected');
			$(this).attr('checked', true);}
		var id='%(id)s';
		var aTrs =datatables_%(id)s.fnGetNodes();
		for ( var i=0 ; i<aTrs.length ; i++ ) { 
			jQuery(aTrs[i]).find('td:first  input:checked').each(function()
			{
			var aData = datatables_%(id)s.fnGetData(aTrs[i]);
			var data=aData[%(countt)s];
			aReturn.push(data);
			})  
				} 
		execEventBinded(id.substring(2, id.length), "selectedrows", {ID_list:aReturn});
	} );
	"""


js_rowselect=u"""
	$.each(m, function(i, e){
		datatables_%(id)s.fnAddData(e);
	});
	$('#%(id)s tr').click( function() {
		if ( $(this).hasClass('row_selected') ){
			$(this).removeClass('row_selected');}
		else
			{$(this).parent().find('tr').each( function(){
				if ( $(this).hasClass('row_selected') ){
					$(this).removeClass('row_selected');}
				});
			$(this).addClass('row_selected');}
	} ); 
	"""

cap_row=u"<th name='%(name)s'>%(show_name)s</th>"
cap_visible=u"[%(list)s]"
unvis_cap=u"{'bVisible': false }"
css_class=u"""<style type="text/css">
			.dataTables_wrapper_%(id)s table { width: 99.9%%!important; %(table_css)s}
			.dataTables_wrapper_%(id)s table td{%(table_td_css)s}
			.dataTables_wrapper_%(id)s table th{%(table_th_css)s}
			.dataTables_wrapper_%(id)s tr.row_selected td {%(selected)s}
			.dataTables_wrapper_%(id)s{
						left:%(wrapper_left)s;
						top:%(wrapper_top)s;}
			.dataTables_filter_%(id)s{%(css_filter)s}
			.dataTables_info_%(id)s{%(css_info)s}
			.dataTables_length_%(id)s{%(css_length)s}
			</style>
			"""

js_code=u"""<script type='text/javascript'>
jQuery(document).ready(function($){
$.fn.dataTableExt.oStdClasses.sStripOdd ="odd %(odd_css)s";
$.fn.dataTableExt.oStdClasses.sStripEven ="even %(even_css)s";
$.fn.dataTableExt.oStdClasses.sWrapper = "dataTables_wrapper_%(id)s";
$.fn.dataTableExt.oStdClasses.sInfo= "dataTables_info_%(id)s %(info_css)s";
$.fn.dataTableExt.oStdClasses.sFilter= "dataTables_filter_%(id)s %(search_css)s";
$.fn.dataTableExt.oStdClasses.sLength= "dataTables_length_%(id)s  %(length_css)s";
	datatables_%(id)s=$('#%(id)s').dataTable({
		"oLanguage": {
			"sLengthMenu": "%(lengthtext)s",
			"sZeroRecords": "%(zerorecords)s",
			"sInfo": "%(infotext)s",
			"sInfoEmpty": "%(infoempty)s",
			"sInfoFiltered": "%(infofiltred)s"
		},
		"oSearch": {"sSearch": "", "bSmart": true},
		"aoColumns": %(info)s,
		"bPaginate": false,
		"fnRowCallback": function( nRow, aData, iDisplayIndex ) {
			$('td', nRow).each(function(idx,el){
				$(el).addClass('cell-'+idx);
			});
			$('td:first', nRow).addClass('cell-first');
			$('td:last', nRow).addClass('cell-last');
			$(nRow).click( function () { 
				var aPos =datatables_%(id)s.fnGetPosition(this); 
				var data= aData[%(countt)s];
				var id='%(id)s'; 
				/*singleselect*/
				
				/*execEventBinded(id.substring(2, id.length), "rowclick", {ID:data});
				multiselect*/
				%(selected_rows)s
			});
			return nRow;
		}
		});
		
	var m = %(massiv)s;
	
	/*multiselect*/
	%(js_selection)s
	
	});
	function %(id)s_fnGetSelected(){
		var aReturn = new Array(); 
		var aTrs =datatables_%(id)s.fnGetNodes(); 
		for ( var i=0 ; i<aTrs.length ; i++ ) { 
			if ( jQuery(aTrs[i]).hasClass("row_selected") ) 
				{	var aData = datatables_%(id)s.fnGetData(aTrs[i]);
					var data=aData[%(countt)s];
					aReturn.push(data); }
				} 
		return aReturn;
		}
		
	function %(id)s_createEvent(id_list, button_command){
		var id='%(id)s';
		execEventBinded(id.substring(2, id.length), "process_requested", {ID_list:id_list,cmd:button_command});
		}
</script>"""

class VDOM_datatables(VDOM_object):
	
	def render(self, parent, contents=""):
		id = 'o_' + (self.id).replace('-', '_')
		result=u''
		
		# css for filter
		if self.showsearch=="0":
			css_filter=u"width:200px; height:25px; visibility:inherit; overflow:hidden;"
		else:
			css_filter=u"display:none"
		
		if self.showinformation=="0":
			css_info=u"overflow:hidden; width:155px; height:25px;visibility:inherit;"
		else:
			css_info=u"display:none"
		
		if self.showlength=="0":
			css_length=u"overflow:hidden; width:140px; height:25px;visibility:inherit; float:right;"
		else:
			css_length=u"display:none"

		result+=css_class%{"wrapper_left":self.left+"px", "wrapper_top":self.top+"px", "wrapper_width":self.width+"px", "id":id, "css_filter":css_filter, "css_info":css_info, "css_length":css_length,  "selected":(self.selected_css).strip(), "table_css":self.table_css, "table_td_css":self.table_td_css, "table_th_css":self.table_th_css}
		
		if self.visible == "0":
			show = u"overflow:auto;height:%(height)spx;position:absolute;left:%(left)spx;clear:both;top:%(top)spx;width:%(width)spx" %{"top":self.top, "left":self.left, "height":self.height, "width":self.width}
		else:
			show = u"display:none;"
		
		if self.target == '':
			target = u''
		else:
			# target = '/'+self.target+'.vdom'	# obsolete - page_guid.vdom
			target = '/'+request.application().search_object(self.target).name+'.vdom'
		
		#table header creation
		
		#parsing argument
		table_header = None
		if self.tableheader=="":
			self.tableheader="[]"
		try:
			table_header=json.loads(self.tableheader)
		except:
			raise Exception ("table header error", "Type of Tableheader parametr should be 'list'")
		if not isinstance(table_header, list):
			table_header=[]

		#getting keys
		datatable_keys = [column["Key"] for column in table_header]

		#checking keys
		if "checkbox_field" in datatable_keys:
			raise Exception ("key error", "Inside tableheader shouldn't be 'Keys':'checkbox_field'")

		#multiselect - add checkboxes
		if self.multiselect=="1":
			table_header.insert(0, {"Key":"checkbox_field", "Display_text":" ", "Visibility":"0"})
			datatable_keys.insert(0, "checkbox_field")
		
		
		#generating html for header
		datatable_header = "".join( [cap_row%{"name": column["Key"], "show_name": column["Display_text"]} for column in table_header ])
		
		#generating json for column attributes
		datatable_aoColumns = json.dumps( [ unvis_cap if column["Visibility"] == "1" else None for column in table_header ] )
		
		#find key position
		if len(datatable_keys)>1 and self.tablekey!="":
			datatable_key_position = datatable_keys.index( self.tablekey ) 
		else:
			datatable_key_position=0
		
		#table data
		
		#parsing argument htmlcode
		table_data = None
		if self.htmlcode=="":
			self.htmlcode="[]"
		try:
			table_data=json.loads(self.htmlcode)
		except:
			raise Exception ("table data error", "Type of Tabledata parametr should be 'list'")
		if not isinstance(table_data, list):
			table_data=[]
		
		#genering json for column data 
		
		rows_data=[]
		rows_data = [[row[column["Key"]] if column["Key"] in row else "" for column in table_header if column[ "Key" ] != "checkbox_field"] for row in table_data]
		
		#hidden fields
		
		#parsing argument hiddenfields
		hidden_fileds = None
		if self.hiddenfields=="":
			self.hiddenfields="{}"
		try:
			hidden_fileds=json.loads(self.hiddenfields)
		except:
			raise Exception ("table hiddenfields error", "Type of Hidden fields parametr should be 'dict'")
		if not isinstance(hidden_fileds, dict):
			hidden_fileds={}
		
		#generating html for hiddenfields
		datatable_hiddenfileds = "".join( [hidden_field_text%{"value":hidden_fileds[field], "name":field} for field in hidden_fileds if field!="cmd"])
		
		
		# result+=html_table%{"method":self.method, "show":show, "id":id, "cap":datatable_header , "target":self.target, "user_hidden_fields":datatable_hiddenfileds, "table_width":str(int(self.width)-15)}
		result+=html_table%{"method":self.method, "show":show, "id":id, "cap":datatable_header , "target":target, "user_hidden_fields":datatable_hiddenfileds, "table_width":str(int(self.width)-15)}
		
		
		if self.multiselect=="1":
			js_m=js_multiselect%{"id":id, "countt":datatable_key_position}
			single=u""
		else:
			js_m=js_rowselect%{"id":id}
			
			single=u"""
				execEventBinded(id.substring(2, id.length), "selectedrows", {ID_list:data}); """
		
		
		result+=js_code%{"id":id, "massiv":json.dumps(rows_data), "info":datatable_aoColumns.replace('"', ""), "lengthtext":self.lengthtext, "zerorecords":self.zerorecords, "infotext":self.information, "infoempty":self.infoempty, "infofiltred":self.infofiltred, "countt":datatable_key_position, "odd_css":(self.odd_css).strip(), "even_css":(self.even_css).strip(), "js_selection":js_m, "search_css":(self.search_css).strip(), "info_css":(self.info_css).strip(), "length_css":(self.length_css).strip(), "selected_rows":single}

		return VDOM_object.render(self, parent, contents=result)

	def wysiwyg(self, parent, contents=""):

		result="<container id=\"%s\" zindex=\"%s\" hierarchy=\"%s\" order=\"%s\" top=\"%s\" left=\"%s\" width=\"%s\" height=\"%s\">"\
					"<svg>"\
						"<rect x=\"%s\" y=\"%s\" width=\"%s\" height=\"%s\" fill=\"#EFEFEF\" fill-opacity=\".5\" />"\
					"</svg>%s"\
				"</container>"%(
					self.id, self.zindex, self.hierarchy, self.order, self.top, self.left, self.width, self.height,
					0, 0, self.width, self.height,
					contents)

		return VDOM_object.wysiwyg(self, parent, contents=result)

		]]>
	</SourceCode>
	<Libraries>
		<Library Target="HTML"><![CDATA[<script language='javascript' type='text/javascript' src='/b53f403c-efe7-4fa7-bff3-35e71027f393.res'></script>]]></Library>
		<Library Target="HTML"><![CDATA[<script language='javascript' type='text/javascript' src='/b53f403c-efe7-4fa7-bff3-35e71027f393.res'></script>]]></Library>
	</Libraries>
	<E2vdom>
		<Events>
			<Userinterfaceevents>
				<Event Name="mousemove">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="mousedown">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="mouseup">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="mouseover">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="mouseout">
					<Parameters>
						<Parameter Help="#Lang(745)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(745)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="click">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="dblclick">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="ctrlclick">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="X" Order="" VbType=""/>
						<Parameter Help="#Lang(104)" Name="Y" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="rowclick">
					<Parameters>
						<Parameter Help="#Lang(124)" Name="ID" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="selectedrows">
					<Parameters>
						<Parameter Help="#Lang(124)" Name="ID_list" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="process_requested">
					<Parameters>
						<Parameter Help="#Lang(124)" Name="ID_list" Order="" VbType=""/>
						<Parameter Help="#Lang(124)" Name="cmd" Order="" VbType=""/>
					</Parameters>
				</Event>
				<Event Name="submit">
					<Parameters>
						<Parameter Help="#Lang(105)" Name="params" Order="" VbType=""/>
					</Parameters>
				</Event>
			</Userinterfaceevents>
		</Events>
		<Actions>
			<Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="hide">
					<Parameters>
						<Parameter DefaultValue="0" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="fade"/>
					</Parameters>
					<Sourcecode><![CDATA[
jQuery(this.domCont).hide(fade);
					]]></Sourcecode>
				</Action>
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="show">
					<Parameters>
						<Parameter DefaultValue="0" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="fade"/>
					</Parameters>
					<Sourcecode><![CDATA[
jQuery(this.domCont).show(fade);
					]]></Sourcecode>
				</Action>
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="resizeTo">
					<Parameters>
						<Parameter DefaultValue="0" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="width"/>
						<Parameter DefaultValue="0" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="height"/>
					</Parameters>
					<Sourcecode><![CDATA[
this.domCont.style.width = parseInt(newZindex);
this.domCont.style.height = parseInt(newZindex);
					]]></Sourcecode>
				</Action>
				 <Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="loadData">
					<Parameters>
						<Parameter DefaultValue="" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="jsondata"/>
					</Parameters>
					<Sourcecode><![CDATA[
jQuery.plot(jQuery(this.domCont),jsondata,eval("opt_"+this.domCont.id));
					]]></Sourcecode>
				</Action>
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="addTableDatarow">
					<Parameters>
						<Parameter DefaultValue="" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="jsondata"/>
					</Parameters>
					<Sourcecode><![CDATA[
eval('datatables_'+this.domCont.id+'.fnAddData( jsondata );');
					]]></Sourcecode>
				</Action>
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="process_selected">
					<Parameters>
						<Parameter DefaultValue="" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="cmd"/>
					</Parameters>
					<Sourcecode><![CDATA[
var t = this.domCont;
eval('var x='+t.id+'_fnGetSelected();');
eval(t.id+'_createEvent(x, cmd)');
					]]></Sourcecode>
				</Action>
				<Action Description="#Lang(102)" InterfaceName="#Lang(102)" MethodName="submit">
					<Parameters>
						<Parameter DefaultValue="" Help="#Lang(202)" Interface="" InterfaceName="#Lang(202)" RegularExpressionValidation=".*" ScriptName="cmd"/>
					</Parameters>
					<Sourcecode><![CDATA[
/*
$("form[name="+this.domCont.id+"] input[name=cmd]").val(cmd);
$("form[name="+this.domCont.id+"]").submit();
*/
var id=this.domCont.id, f=$("form[name="+id+"]");
$("input[name=cmd]",f).val(cmd);
if(f.attr('method')=='event'){
	f.submit(function(){
		var x=[], a=f.serializeArray();
		for (k in a) if(typeof a[k].name !== 'undefined' && typeof a[k].value !== 'undefined') x[a[k].name]=a[k].value;
		execEventBinded(id.substring(2, id.length), "submit", x);
		return false;
	});
}
f.submit();
					]]></Sourcecode>
				</Action>
			</Container>
		</Actions>
	</E2vdom>
</Type>