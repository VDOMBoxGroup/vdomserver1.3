<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>xmldialog</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_xmldialog</ClassName>
    <ID>887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a</ID>
    <Icon>#Res(723723b4-c8f4-5e4a-b02c-16fa8e0d53f7)</Icon>
    <EditorIcon>#Res(37abe2ec-e61a-8981-e929-16faba369563)</EditorIcon>
    <StructureIcon>#Res(9f1c05cd-fee2-6055-2ef4-16fae6375ed7)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Additional</Category>
    <Dynamic>1</Dynamic>
    <Version>1.73.6720</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer, container</Containers>
    <Languages>en_US</Languages>
    <Handlers>set_attr</Handlers>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d+$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>400</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>300</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>title</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(1000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>xmldata</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(50000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>show</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|1)|(#Lang(402)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>[01]</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>modal</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|1)|(#Lang(404)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>[01]</RegularExpressionValidation>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">XML dialog</Sentence>
      <Sentence ID="002">The XML dialog type produces an object displayed as a dialog window. The content of the dialog is described in the 'XML data' attribute ib XML format.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Herarchy</Sentence>
      <Sentence ID="102">Top</Sentence>
      <Sentence ID="103">Left</Sentence>
      <Sentence ID="104">Width</Sentence>
      <Sentence ID="105">Height</Sentence>
      <Sentence ID="106">Title</Sentence>
      <Sentence ID="107">XML data</Sentence>
      <Sentence ID="108">Show</Sentence>
      <Sentence ID="109">Modal</Sentence>
      <Sentence ID="201">Hierarchy of the object</Sentence>
      <Sentence ID="202">Distance from the top edge of the parent in pixels</Sentence>
      <Sentence ID="203">Distance from the left edge of the parent in pixels</Sentence>
      <Sentence ID="204">Width in pixels</Sentence>
      <Sentence ID="205">Height in pixels</Sentence>
      <Sentence ID="206">Title of the object to display, HTML allowed</Sentence>
      <Sentence ID="207">XML data</Sentence>
      <Sentence ID="208">Show dialog after page load</Sentence>
      <Sentence ID="209">Open dialog in modal window</Sentence>
      <Sentence ID="301">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="302">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="303">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="304">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="305">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="306">Incorrect value</Sentence>
      <Sentence ID="307">Incorrect value</Sentence>
      <Sentence ID="308">Incorrect value</Sentence>
      <Sentence ID="309">Incorrect value</Sentence>
      <Sentence ID="401">Yes</Sentence>
      <Sentence ID="402">No</Sentence>
      <Sentence ID="403">Yes</Sentence>
      <Sentence ID="404">No</Sentence>
      <Sentence ID="501"></Sentence>
      <Sentence ID="502"></Sentence>
      <Sentence ID="503"></Sentence>
      <Sentence ID="504"></Sentence>
      <Sentence ID="505"></Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="601"></Sentence>
      <Sentence ID="602"></Sentence>
      <Sentence ID="603"></Sentence>
      <Sentence ID="604"></Sentence>
      <Sentence ID="701"></Sentence>
      <Sentence ID="702"></Sentence>
      <Sentence ID="703"></Sentence>
      <Sentence ID="704"></Sentence>
      <Sentence ID="705"></Sentence>
      <Sentence ID="801"></Sentence>
      <Sentence ID="802"></Sentence>
      <Sentence ID="803"></Sentence>
      <Sentence ID="804"></Sentence>
      <Sentence ID="805"></Sentence>
      <Sentence ID="901"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="723723b4-c8f4-5e4a-b02c-16fa8e0d53f7" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6MDg4OURDOEQwNjI5MTFFMkFGRTc5NzQxNzY5NDk4RjIiIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6MDg4OURDOEUwNjI5MTFFMkFGRTc5NzQxNzY5NDk4RjIiPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDowODg5REM4QjA2MjkxMUUyQUZF
Nzk3NDE3Njk0OThGMiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDowODg5REM4QzA2MjkxMUUy
QUZFNzk3NDE3Njk0OThGMiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PuGucnAAAAUWSURBVHja1FldSFtXHP/FZtb4May2XU2n
smqn4MA5mKgtexjVrMUvXGnKvroXHwp7qjrtg0++TMRCHwbrg3sRIVMZ7RzOTDpEiMwwiXbi0PoS
mpm1NHGiRpOo2f9cb9IYb25urs57/cPhnHPPuSfnl//H73/u0QQCARwHMRgMOqraqHxKJZvKMyp9
VL4xm80bmuMAhEAkUzVaQWI0GpGVlQWn04n+/n5YLJYJGqvURns5GsDw58H23rkBwfdDc/nxYFVd
+0FMIAk41VZeXl7R3NwcepadnY2mpia2bsXExMTXCUqCiMMaPmGaEBL++efaSkNp6qjZuqoUiJ8e
jvH9/esE3zHeuAm9Xi+4L2ZmJG8y0zontlkpICKfHUYd3s7MzOR8gplTpLDnJH8z00pVMwgm5OMw
mUyCGmEOT9KboHYQrK6trYXL5UJ3dzccDge2t7e5mvX5qNWpuVL1/ru/jkza1AoiWHu9XgwNDbGN
w+12Y2vL7wA03wd5RBtt41arFQMDA4pzCNNGUVEREhMT0dDQwBW2v8++qKmh4engPG206MRAdHV1
QUnC1Gg0aGlp4YAIR8pXohXjD7/fj42NDcWA6HQ6UXMUBCJk/8ypfD6fYkCYOQn5pBAQ0ailFokF
IgREnLHVAyYu04qclJSUpCgAZl6xQISACE0qKytDe3u74pooKSk5mLPX19ejrq7uSMhOzphkZz8q
xpY7JolHWD01NYXBwUHFTau6uhqFhYXSCTFyIgOhFmYvKCiQqhFh1amF2aX4iGj4Zcze0dHBtVtb
W9HZ2SnY/r+ZXYqPJEidqCZ2j1sjkf94tPZRg4graqmJ2Q+kkdLSUlUwe3FxsXSNCE2soQMYi+FK
kV08ZLgn+1UTY8sBkxD+8ey4gRj+7gdY7KlILvxQnkaUBhE9agUgC0TayopSuQvTBvcJa+WXHvGo
JeUfdT94EP7RVlHRHsScvOzDhJqAyPWJTa83KpATaWnIuXsXO5R02ilfS6GT3vnGRqzQ8eBlfz/y
+FzN2deHVYsFGXSQO11VhZ3NTSzeuYNcnsPsfK53YI2IjW3Qj0bVCI0tPXqE3Fu38DpxUgYdnX3L
y3jW2/sqKaU5Jy9exIvHj5GUlxdyV7buDr8u9xsH1UgsgB6W4ouYlmdkBDo6S5y7epXrP+3pwerz
59Cmp+9idbmQkp/PrZOk18PrduMEpe6sHwTikXiM4DUCWWF0PQYQJi9mZnCWtLFJm7QPDXHPXuPz
N9fcHHIqK3HWaISWACzPz+MUAV8PA7IeDxC5XOCRACTv+nX42T+ekYELt29j9t49JCYnc2MvFxaQ
dfkycgwGuAgE01Y6AWHrBuRoZM91Vxz+EgvIe21t0GVm4vf79/EGOfsF2rDDaoXLxlEAfFtb+Ndu
xxk6kzufPEFiSgq3nmzTksvKHhFnzya/ePvaNSyOjWGOIhMrZ4aH8Q45/8jk5C4QdmEzPb0LZHYW
5ynjZquxdXeozsjJwc3x8dCaNpMJNtKoIEeyi56HP/5m8/n8cTv9IIVLdREi5IVfMR5RFSHGMjWf
6phdZhbrvnQlyl17RH9vNzxL3X8+39cIu6MPkz//mBrXBLQrhxJ+P2r8UvCiXzT1DuzdnNRL10jg
Pz/969ul9ZT5qD4ST+QqzMs9tHNFLBCR7bdOBxaW1jFzKOFXKRBBuZS7xtWjZisHZK3h48qvqM7H
8ZFFtu9IZ/+HipmK5RgBWeP3HZL/BBgAs5x/nssBafMAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="37abe2ec-e61a-8981-e929-16faba369563" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACwklEQVR42m1TS08TURQ+Z2b6oIXW
2gemhaamCzbs0KT9AYaNCXFpYmKMK124YGGMMZiACwxuXJjGxC0LF7Bwr24IaxIoIUQFpOXVlpnp
Y/qYufd67gBViDe5c6e953zn+75zBhlzAFEBRVHg6hKCA+eCTgGapsHS0hKk02lYWVn5Mj4+fmd6
evoZMsYeU2zoKoBMOtvcPWUyYxyOj48CuVz+eT6fDxUKBR273a5F6AO2bUOn03GTOeeXqsvfkoFc
rVYLtre3IRgMWgsLC5+w1+vuUkxybW0NfD7ff2SI/omI0G63WSwW8+3u/poPBAZfkgRnv93ujKyv
r8PY2Bg4juMGyn0VSBbY3Ny0E4mEBiheJeLD82hZVonopegC6vU6qKrqUj6TIS4xIL/A6/U62WxW
q9UqM5FIdI4AWiXqQqpYLPYTPB5PH+hiyXfJigo6yWRSqzfMmej12By221bJtp0UtQb8fj9IMzOZ
DBDNv3LOAfwDA1Dc2HBC4bAmuPP6WiT6BpvNRgkAU1tbW/0Edi7BpX6ppW5H7PToqEc3Tl9Eo/G3
2GjUXQCZ6JBGQRvP9bNe78wL+b8EpgKKqjoMQDNN/cPQUPgjmqbhAnAK4jRM3DCgt7gIgpI98Thd
IajkvtNsghoMArcsYKbZ9wYNQ+8DCDKue3ICe7OzYNdqkJichGguB82dHYhOTADrdqG6uirKy8vo
DYddTajrp/vE1gWgcYPWwQGsPn0CPcOE7NQUhG5moFOpQvz2LWjs7QGSjN/fvoP+8wcqZLoEKMtJ
lD1WCMAol+Hzw0fgUDWV2imrahTI5JiTRE8gACgLVSq2rRsWHh6V9zmDEU4POTM90l4uH7pDI6SB
5AGXtiExpm+DywsA9aRafT8cj7/D+w/u3lNQuUHJitSkKIiRwYDbe/HvOIuLB8pPzBvweb+GIsMb
fwCDLsCecWjaaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae6375ed7" Name="Icon" Type="jpg"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACwklEQVR42m1TS08TURQ+Z2b6oIXW
2gemhaamCzbs0KT9AYaNCXFpYmKMK124YGGMMZiACwxuXJjGxC0LF7Bwr24IaxIoIUQFpOXVlpnp
Y/qYufd67gBViDe5c6e953zn+75zBhlzAFEBRVHg6hKCA+eCTgGapsHS0hKk02lYWVn5Mj4+fmd6
evoZMsYeU2zoKoBMOtvcPWUyYxyOj48CuVz+eT6fDxUKBR273a5F6AO2bUOn03GTOeeXqsvfkoFc
rVYLtre3IRgMWgsLC5+w1+vuUkxybW0NfD7ff2SI/omI0G63WSwW8+3u/poPBAZfkgRnv93ujKyv
r8PY2Bg4juMGyn0VSBbY3Ny0E4mEBiheJeLD82hZVonopegC6vU6qKrqUj6TIS4xIL/A6/U62WxW
q9UqM5FIdI4AWiXqQqpYLPYTPB5PH+hiyXfJigo6yWRSqzfMmej12By221bJtp0UtQb8fj9IMzOZ
DBDNv3LOAfwDA1Dc2HBC4bAmuPP6WiT6BpvNRgkAU1tbW/0Edi7BpX6ppW5H7PToqEc3Tl9Eo/G3
2GjUXQCZ6JBGQRvP9bNe78wL+b8EpgKKqjoMQDNN/cPQUPgjmqbhAnAK4jRM3DCgt7gIgpI98Thd
IajkvtNsghoMArcsYKbZ9wYNQ+8DCDKue3ICe7OzYNdqkJichGguB82dHYhOTADrdqG6uirKy8vo
DYddTajrp/vE1gWgcYPWwQGsPn0CPcOE7NQUhG5moFOpQvz2LWjs7QGSjN/fvoP+8wcqZLoEKMtJ
lD1WCMAol+Hzw0fgUDWV2imrahTI5JiTRE8gACgLVSq2rRsWHh6V9zmDEU4POTM90l4uH7pDI6SB
5AGXtiExpm+DywsA9aRafT8cj7/D+w/u3lNQuUHJitSkKIiRwYDbe/HvOIuLB8pPzBvweb+GIsMb
fwCDLsCecWjaaQAAAABJRU5ErkJggg==]]></Resource>
  </Resources>
  <SourceCode><![CDATA[

from xml.dom.minidom import parse, parseString
import base64
from collections import OrderedDict

def on_compile(application, object, action_name, context, objects):
	result=objects
	for xobject in object.get_objects_list():
		result.append({"object": xobject})
	return result

class VDOM_xmldialog(VDOM_object):

	def __get_element_attr(self, e, attr, default_value) :
		if not e or not attr :
			return default_value
		
		attr_val = e.getAttribute(attr)
		if not attr_val :
			return default_value

		attr_val = attr_val.strip()
		if isinstance(default_value, bool) :
			if attr_val.strip() == "1" or attr_val.strip().lower() == "true" :
				return True
			elif attr_val.strip() == "0" or attr_val.strip().lower() == "false" :
				return False
			else:
				return default_value
			
		return attr_val
		
	def __is_property_node (self, node) :
		if not node :
			return False
			
		return node.nodeType == node.ELEMENT_NODE and node.localName == 'Property' and node.childNodes 
	
	
	def get_props(self, e):
		props_dict = {}
		if not e:
			return props_dict
		
		props_list = e.getElementsByTagName("Properties")
		if not props_list:
			return props_dict
		
		for p in props_list[0].childNodes:
			if self.__is_property_node(p) :
				prop = p.childNodes[0]
				prop_name = self.__get_element_attr(p, "name", "")
				if prop and prop_name!="" :
					props_dict[prop_name] = prop.nodeValue.strip()
				
		return props_dict


	def get_options(self, e):
		options_dict = OrderedDict()
		if not e:
			return options_dict
		
		options_list = e.getElementsByTagName("option")
		if not options_list:
			return options_dict
		
		for p in options_list:
			if p.childNodes:
				option = p.childNodes[0]
				parent_name = self.__get_element_attr(p.parentNode, "name", "")
				if parent_name.strip() != "options" :
					continue

				option_id = self.__get_element_attr(p, "id", "")
				if option and option_id!="" :
					options_dict[option_id] = option.nodeValue.strip()

		return options_dict


	def the_item(self, css_class, label, html, e):
		visible = "" if self.__get_element_attr(e, "visible", True) else "style='display:none'"
		fullsize = u"fullsize" if self.__get_element_attr(e, "fullsize", False) else ""
		classes = self.__get_element_attr(e, "class", False)

		item = \
			u"""<div class='row {fullsize} {classes}' {visible}>
					<label class='title'>{label}</label>
					<div class='item {css_class}'>{html}</div>
					<br style='clear:both' />
				</div>
			""".format(fullsize=fullsize, classes=classes, 
				visible=visible, label=label, 
				css_class=css_class, html=html)

		return item
		

	def __disabledString (self, e) :
		return u"disabled='disabled'" if self.__get_element_attr(e, "disabled", False) else u""

		
	def __readOnlyString (self, e) :
		return u"readonly='readonly'" if self.__get_element_attr(e, "readonly", False) else u""
		
		
	def __errorString (self, error, isWysiwyg=False) :
		errorStr = u""
		
		if isWysiwyg==True or VDOM_CONFIG_1["ENABLE-PAGE-DEBUG"]=="1" : 
			errorStr = """<p style="color:#ff0000;"><b>Error:</b> {err}</p>""".format(err=error)
		else :
			if VDOM_CONFIG_1["DEBUG"]=="1" :
				errorStr = """<!--<p>Error: {err}</p>-->""".format(err=error)
				
		return errorStr	
		
		
	def __headingValue (self, e) :
		props = self.get_props(e)
		text_prop = props.get("text", "")
		
		return u"<h3>{txt}&nbsp;</h3>".format(txt = text_prop)
			
			
	def __textboxValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')			
		props = self.get_props(e)
		
		htm = u"""<input type='text' name="{attr_id}" value="{val}" {disabled} {readonly} />""".format(
			attr_id = attr_id, 
			val = props.get("defaultValue", "").replace('"', '&quot;'), 
			disabled = self.__disabledString(e), 
			readonly = self.__readOnlyString(e) )
		
		return self.the_item('textbox', props.get("label", ""), htm, e)
	
	def __passwordValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		props = self.get_props(e)
		
		htm = u"""<input type='password' name="{attr_id}" value="{val}" {disabled} {readonly} />""".format(
			attr_id = attr_id, 
			val = props.get("defaultValue", "").replace('"', '&quot;'), 
			disabled = self.__disabledString(e), 
			readonly = self.__readOnlyString(e) )
				
		return self.the_item('password', props.get("label", ""), htm, e)


	def __dropdownValue (self, e) :
		props = self.get_props(e)
		
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		
		#multiple
		is_multiple = self.__get_element_attr(e, "multiple", False)
		multiple = u"multiple='multiple'" if is_multiple else u""
		
		#number of lines to show 
		try:
			rows_num = int(props.get("rows", "0"))
		except:
			rows_num = 0
		size = u"size='{rows_num}'".format(rows_num=rows_num) if rows_num>0 else u""
		
		# sort options ...
		options_dict = self.get_options(e)
		sort = self.__get_element_attr(e, "sort", "0")
		if sort=="1" : # sort by key
			options_dict = OrderedDict(sorted(options_dict.items(), key=lambda t: t[0]))
		elif sort=="2" : # sort by value
			options_dict = OrderedDict(sorted(options_dict.items(), key=lambda t: t[1]))
		# ... sort options
		
		#options
		sel_keys = props.get("selected", "").split(',')
		sel_keys = [ s.strip() for s in sel_keys ]
		if is_multiple == False and len(sel_keys)>0:
			sel_keys = [sel_keys.pop()]
		
		disabled_keys = props.get("disabled", "").split(',')
		disabled_keys = [ s.strip() for s in disabled_keys ]
		
		options_html = u""
		for key, val in options_dict.items():
			selected = 'selected="selected"' if key in sel_keys and not key in disabled_keys else ''
			disabled = 'disabled="disabled"' if key in disabled_keys else ''
			
			options_html += u"""<option value="{key}" {selected} {disabled}>{val}</option>""".format(
				key = key.replace('"', '&quot;'), val = val,
				selected = selected, disabled = disabled )
			
		#result html
		htm = u"""<select name="{attr_id}" {size} {multiple} {disabled}>{options}</select>""".format( 
			attr_id = attr_id, 
			size = size, multiple = multiple, 
			disabled = self.__disabledString(e), 
			options = options_html )
		
		return self.the_item('dropdown', props.get("label", ""), htm, e)
	
	
	def __radiobuttonValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		props = self.get_props(e)
		
		selected_key = props.get("selected", "").strip()
		htm = u""
		for key, val in self.get_options(e).items():
			selected = u"checked='checked'" if key == selected_key else ""
			htm += \
				u"""<label><input autocomplete="off" type="radio" name="{attr_id}" {selected} {disabled} />&nbsp;{val}</label>
				""".format( attr_id = attr_id, val = val,
					selected = selected, 
					disabled = self.__disabledString(e) )
			
		return self.the_item('radio', props.get("label", ""), htm, e)


	def __checkboxValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		props = self.get_props(e)
		
		sel_keys = props.get("selected", "").split(',')
		sel_keys = [ s.strip() for s in sel_keys ]
		
		disabled_keys = props.get("disabled", "").split(',')
		disabled_keys = [ s.strip() for s in disabled_keys ]
		
		dasable_all = self.__get_element_attr(e, "disabled", False)
		
		htm = u"";
		for key, val in self.get_options(e).items():
			selected = u'checked="checked"' if key in sel_keys else u""
			disabled = u'disabled="disabled"' if dasable_all or key in disabled_keys else u""
			
			htm += \
				u"""<label><input autocomplete="off" type="checkbox" name="{attr_id}[{key}]" {selected} {disabled} />&nbsp;{val}</label>
				""".format ( attr_id = attr_id, 
					key = key, val = val, 
					selected = selected, 
					disabled=disabled );
			
		return self.the_item('checkbox', props.get("label", ""), htm, e)
	
	
	def __uploadValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		props = self.get_props(e)
		
		htm = u"""<input type="file" name="{attr_id}" {disabled} />""".format( 
			attr_id = attr_id, disabled = self.__disabledString(e) )
			
		return self.the_item('upload', props.get("label", ""), htm, e)


	def __textareaValue (self, e) :
		attr_id = self.__get_element_attr(e, "id", "").replace('"', '&quot;')
		props = self.get_props(e)
		
		try:
			w = int(props.get("width", "0"))
		except:
			w = 0
			
		try:
			h = int(props.get("height", "0"))
		except:
			h = 0
		
		style = u"""style="{width}{height}" """.format( 
			width = "width:{w}px;".format(w=w) if w>0 else u"", 
			height = "height:{h}px;".format(h=h) if h>0 else u"" )
		
		htm = u"""<textarea name="{attr_id}" {disabled} {readonly} {style}>&nbsp;{val}</textarea>""".format(
			attr_id = attr_id, 
			disabled = self.__disabledString(e), 
			readonly = self.__readOnlyString(e),
			style = style, 
			val = props.get("defaultValue", "") )
			
		return self.the_item('textarea', props.get("label", ""), htm, e)


	def __hypertextValue (self, e) :
		props = self.get_props(e)
		
		htm = u"{val}".format(val = props.get("value", ""))
			
		return self.the_item('hypertext', props.get("label", ""), htm, e)


	def __buttonValue (self, e) :
		props = self.get_props(e)
		
		visible = "" if self.__get_element_attr(e, "visible", True) else "style='display:none'"
		
		label = props.get("label", "");
		align = props.get("buttonAlign", "").strip().replace("'",'&acute;')
		img = props.get("buttonImage", "").strip().replace("'",'&acute;')
		
		if not img :
			btn = u"""<input type="submit" value="{label}" {disabled} />""".format( label = label, disabled = self.__disabledString(e) ) 
		else :
			btn = u"""<input type="image" alt="{label}" title="{label}" src="{img}" {disabled} />""".format( 
				label = label, img = img, disabled = self.__disabledString(e) )
			
		htm = \
			u"""<div class="row" {visible}>
					<div class="submit" style="text-align:{align}">
						{btn}
					</div>
				</div>
			""".format(visible = visible, align = align, btn = btn)
		
		return htm


	def __defaultButtonValue (self) :		
		return u"<div class='submit'><input type='submit' /></div>"

	
	def __is_dialog_title_property (self, prop, properties_node) :
		if not prop or not properties_node :
			return False
		
		if not properties_node.parentNode or properties_node.parentNode.localName!='VDOMFormContainer' :
			return False
			
		return prop.nodeType == prop.ELEMENT_NODE and prop.localName == 'Property' and prop.getAttribute("name") == 'label'

	def __parse_dialog_title (self, xml) :
		if not xml:
			return
			
		props_list = xml.getElementsByTagName('Properties')
		if props_list :
			props = props_list[0]
			for e in props.childNodes:
				if self.__is_dialog_title_property(e, props) :
					temp_title = e.childNodes[0].nodeValue.strip() if e.childNodes and len(e.childNodes)>0 else ""
					if temp_title != "":
						self.dialog_title = temp_title
					break;
	

	def __getXMLData (self, isWysiwyg=False) :
		
		self.dialog_title = self.title		
		if not self.xmldata:
			return u""
		import re
			
		xd=u""
		try:
			xd = (self.xmldata).encode('utf8')
		except Exception as err:
			return self.__errorString(str(err), isWysiwyg)
			
		xd = xd.replace('<!--[CDATA[', '<![CDATA[')
		xd = xd.replace(']]-->', ']'+']>')
		if isWysiwyg == True:
			xd = re.sub(r"(?si)<(script)[^<>]*>.*?</\1>", "", xd)

		try:
			dom = parseString(xd)
		except Exception as err:
			return self.__errorString(str(err), isWysiwyg)

		self.__parse_dialog_title(dom)	

		data_out = u""
		comps_list = dom.getElementsByTagName('Components')
		if not comps_list :
			return data_out
		
		comps = comps_list[0]
		nobtn = True
		data = u""
		for e in comps.childNodes:
			if e.nodeType == e.ELEMENT_NODE:
				components = {
					"Heading" : self.__headingValue(e),
					"TextBox" : self.__textboxValue(e),
					"Password" : self.__passwordValue(e),
					"DropDown" : self.__dropdownValue(e),
					"RadioButton" : self.__radiobuttonValue(e),
					"CheckBox" : self.__checkboxValue(e),
					"Upload" : self.__uploadValue(e),
					"TextArea" : self.__textareaValue(e),
					"Hypertext" : self.__hypertextValue(e),
					"Button" : self.__buttonValue(e) }
				
				data += components.get(e.localName, "")
				if e.localName == 'Button':
					nobtn = False
		
		if nobtn:
			data += self.__defaultButtonValue()

		data_out = u"<form action='' method='post' enctype='multipart/form-data' class='xml-dialog-form'>{data}</form>".format(data=data);

		return data_out


	def __get_style (self) :
		style = u"""
<style>
.xml-dialog-form div.row {
text-align: left;
clear: both;
float: none;
}
.xml-dialog-form div.row label {
float: left;
width: 45%%;
}
.xml-dialog-form div.row div.item {
float: right;
width: 50%%;
}
.xml-dialog-form div.fullsize label,
.xml-dialog-form div.fullsize div.item {
float: none;
width: 100%%;
}
.xml-dialog-form div.row div.item label {
float: none;
width: auto;
}
.xml-dialog-form div.row div.textbox input,
.xml-dialog-form div.row div.item select,
.xml-dialog-form div.row div.item textarea {
width: 99%%;
resize: none;
}
.xml-dialog-form div.row div.item br {
width: 100%%;
display: block;
clear: both;
overflow: hidden;
height: 1px;
}
.xml-dialog-form div.submit {
text-align: center;
margin-top: 10px;
}
	.xml-dialog-form div.submit img {
	border: none;
	cursor: pointer;
	}
</style>"""
		return style
	
	
	def render(self, parent, contents=""):

		idn = (self.id).replace('-', '_')
		id = u'o_' + idn

		show = "false" if self.show == "0" else "true"
		modal = "false" if self.modal == "0" else "true"
		data_out = self.__getXMLData()
		
		if VDOM_CONFIG_1["DEBUG"] == "1":
			debug_info = u"objtype='xmldialog' objname='%s' ver='%s'" % (self.name, self.type.version)
		else:
			debug_info = u""

		result = """
%(style)s
<div style='display:none' %(debug_info)s><div id='%(id)s'>%(data)s</div></div>
<script type='text/javascript'>$q(function(){
	$q("#%(id)s").data('ev','1');
	$q("#%(id)s:ui-dialog").dialog("destroy");
	$q("#%(id)s").dialog({
		title: "%(title)s",
		width: %(width)s,
		height: %(height)s,
		modal: %(modal)s,
		draggable: !%(modal)s,
		resizable: false,
		autoOpen: %(show)s,
		open: function(e,u) {
			if ($q("#%(id)s").data('ev')=='1') execEventBinded('%(idn)s', "show", {});

			$j.datepicker.setDefaults($j.datepicker.regional['fr']);
			$j('#%(id)s input.date, #%(id)s .date input').datepicker('destroy').datepicker({
				dateFormat: 'dd/mm/yy', showButtonPanel: true
			}).blur();
		},
		close: function(e,u) {
			$j('#ui-datepicker-div,#ColorDropdown_selector').fadeOut();
			if ($q("#%(id)s").data('ev')=='1') execEventBinded('%(idn)s', "hide", {});
		}
	});
	$q("#%(id)s form.xml-dialog-form").live('submit',function(e){
		e.preventDefault;
		var x=[], a=$q(this).serializeArray();
		for (k in a) if(typeof a[k].name !== 'undefined' && typeof a[k].value !== 'undefined') x[a[k].name]=a[k].value;
		execEventBinded('%(idn)s', "submit", x);
		return false;
	});
});</script>""" % {
			"data":   data_out,
			"id":     id,
			"idn":    idn,
			"width":  self.width,
			"height": self.height,
			"title":  self.dialog_title.replace('"','&quot;'),
			"show":   show,
			"modal":  modal,
			"debug_info": debug_info,
			"style" : self.__get_style() }

		return VDOM_object.render(self, parent, contents=result)

	def wysiwyg(self, parent, contents=""):
		dialog_width = int(self.width) if int(self.width) >= 150 else 150
		dialog_height = int(self.height) if int(self.height) >= 50 else 50
		
		xmldata = self.__getXMLData(True)
		dlg_title = self.dialog_title.replace('"','&quot;') if self.dialog_title else ""

		result= \
			u"""<container id="{id}" hierarchy="{hierarchy}" order="{order}" 
							top="{top}" left="{left}" width="{width}" height="{height}" overflow="visible">
					<svg>
						<rect x="0" y="0" rx="7" ry="5" width="{width}" height="{height}" fill="#eeeeee"/>
						<rect x="3" y="3" rx="7" ry="5" width="{rect_width}" height="30" fill="#333333"/>
						<line x1="{line_x1}"  y1="14" x2="{line_x2}"   y2="22" style="stroke:#eeeeee; stroke-width:3;"/>
						<line x1="{line_x1}"  y1="22" x2="{line_x2}"   y2="14" style="stroke:#eeeeee; stroke-width:3;"/>
						<text x="13" y="22" width="{title_width}" fill="#eeeeee" font-size="14">{dlg_title}</text>
					</svg>
					
					<htmltext top="35" left="10" width="{content_width}" height="{content_height}">
						{style}
						<div>{xmldata}</div>
					</htmltext>
				</container>
			""".format( 
				id=self.id, hierarchy=self.hierarchy, order=self.order, 
				top=self.top, left=self.left, 
				width=self.width, height=self.height,
				rect_width=dialog_width-6,
				line_x1=dialog_width-20, line_x2=dialog_width-12,
				title_width=dialog_width-25,
				content_height = dialog_height-40,
				content_width = dialog_width-20,
				xmldata = xmldata,
				dlg_title = dlg_title,
				style = self.__get_style() )

		return VDOM_object.wysiwyg(self, parent, contents=result)

def set_attr(app_id, object_id, param):
	if "xmldata" in param:
		o = application.objects.search(object_id)
		
		a = (param["xmldata"]["value"]).replace('<![CDATA[', '<!--[CDATA[')
		o.attributes.xmldata = a.replace(']'+']>', ']]-->')
	return ""

		]]></SourceCode>
  <Libraries>
    <Library Target="HTML"><![CDATA[<script type='text/javascript'>
String.prototype.fmt=function(){
	var a = arguments;
	return this.replace(/{(\d+)}/g, function(m, n) {
		return typeof a[n] != 'undefined' ? a[n] : m;
	});
};
function vdom_xd_load(id,xd){
	xd = $q.trim(xd).split('<!--[CDATA[').join('<![CDATA[').split(']]-->').join(']'+']>');
	var p = $q.parseXML(xd),
		x = $q(p), w = $q(id), data = [],
		dodiv = function(cn,lbl,htm,a){
			var vis = parseInt(a.attr('visible') || '0', 10);
			if (vis !== 1) vis = 'style="display:none"'; else vis = '';
			var fw = parseInt(a.attr('fullsize') || '0', 10);
			if (fw === 1) fw = 'fullsize'; else fw = '';
			var classes = a.attr('class') || '';
			return "<div class='row {4} {5}' {0}><label class='title'>{2}</label><div class='item {1}'>{3}</div><br style='clear:both' /></div>".fmt(vis, cn, lbl, htm, fw, classes);
		}
	w.html('');
	var nobtn = true;
	x.find("VDOMFormContainer>Components>*").each(function(){
		var t = $q(this), t0 = this, opts, s, sa, da, dis, sel, ro, disa;

		if (t0.tagName == 'Heading') {
			data.push("<h3>"+t.find('Property[name=text]').text()+"</h3>");
		}
		else if (t0.tagName == 'TextBox') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			var ro = parseInt(t.attr('readonly') || '0', 10);
			ro = (ro == 1) ? "readonly='readonly'" : "";
			data.push(dodiv('textbox', t.find('Property[name=label]').text(), "<input type='text' name=\""+t.attr('id')+"\" value=\""+t.find('Property[name=defaultValue]').text().replace('"','&quot;')+"\" "+dis+" "+ro+" />", t));
		}
		else if (t0.tagName == 'Password') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			var ro = parseInt(t.attr('readonly') || '0', 10);
			ro = (ro == 1) ? "readonly='readonly'" : "";
			data.push(dodiv('password', t.find('Property[name=label]').text(), "<input type='password' name=\""+t.attr('id')+"\" value=\""+t.find('Property[name=defaultValue]').text().replace('"','&quot;')+"\" "+dis+" "+ro+" />", t));
		}
		else if (t0.tagName == 'DropDown') {
			var disa = parseInt(t.attr('disabled') || '0', 10);
			disa = (disa == 1) ? "disabled='disabled'" : "";
			var sorting = parseInt(t.attr('sort') || '0', 10);
			//sorting = (sorting == 1) ? true : false;
			var lsize = parseInt(t.find("Property[name=rows]").text(), 10);
			lines = (lsize > 0) ? 'size="'+lsize+'"' : '';
			var mult = parseInt(t.attr('multiple') || '0', 10);
			mult = (mult == 1) ? "multiple='multiple'" : "";
			opts = [], sa = $.map(t.find("Property[name=selected]").text().split(','), $.trim);
			da = $.map(t.find("Property[name=disabled]").text().split(','), $.trim);
			var optid, opti = 0, optarr1 = [], optarr1val = [], optarr2 = {}, optarr3 = {};
			t.find("Property[name=options]>option").each(function(){
				optid = $(this).attr('id').trim();
				sel = ($.inArray(optid, sa) >= 0) ? "selected='selected'" : "";
				dis = ($.inArray(optid, da) >= 0) ? "disabled='disabled'" : "";
				s = $(this).text().trim();
				if (s !== '') {
					optarr1.push(optid);
					optarr1val.push(s);
					optarr2[optid] = s;
					optarr3[optid] = sel + ' ' + dis;
					opti++;
				}
				//if (s !== '') opts.push('<option value="'+optid.replace('"','&quot;')+'" '+dis+' '+sel+'>'+s+'</option>');
			});
			//if (sorting) optarr1.sort();
			if (sorting == 1) {
				optarr1.sort();
			} 
			$j.each(optarr1, function(i){
				opts.push('<option value="'+optarr1[i].replace('"','&quot;')+'" '+optarr3[optarr1[i]]+'>'+optarr2[optarr1[i]]+'</option>');
			});
			var oj = opts.join(' ');
			if (sorting == 2) {
				var x = $j('<select>'+oj+'</select>');
				oj = x.html($j('option', x).sort(function(a, b){
					return a.text == b.text ? 0 : a.text.toLowerCase() < b.text.toLowerCase() ? -1 : 1
				})).html();
			}
			data.push(dodiv('dropdown', t.find('Property[name=label]').text(), "<select name=\""+t.attr('id').replace('"','&quot;')+"\" "+mult+" "+lines+" "+disa+">"+oj+"</select>", t));
		}
		else if (t0.tagName == 'RadioButton') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			var sorting = parseInt(t.attr('sort') || '0', 10);
			sorting = (sorting == 1) ? true : false;
			opts = [], sel = t.attr('selected') || '';

//			t.find("Property[name=options]>option").each(function(){
//				s = (sel == $(this).attr('id')) ? "checked='checked'" : "";
//				opts.push("<label><input type='radio' name=\""+t.attr('id').replace('"','&quot;')+"\" value=\""+$(this).attr('id').replace('"','&quot;')+"\" "+s+" "+dis+" /> "+$(this).text().trim()+"</label>");
//			});
//			data.push(dodiv('radio', t.find('Property[name=label]').text(), opts.join(' '), t));

			da = $.map(t.find("Property[name=disabled]").text().split(','), $.trim);
			var optid, opti = 0, optarr1 = [], optarr2 = {}, optarr3 = {};
			t.find("Property[name=options]>option").each(function(){
				optid = $(this).attr('id').trim();
				selx = (sel == $(this).attr('id')) ? "checked='checked'" : "";
				dis = ($.inArray(optid, da) >= 0) ? "disabled='disabled'" : "";
				s = $(this).text().trim();
				if (s !== '') {
					optarr1.push(optid);
					optarr2[optid] = $(this).text().trim();
					optarr3[optid] = selx + ' ' + dis;
					opti++;
				}
			});
			if (sorting) optarr1.sort();
			$j.each(optarr1, function(i){
				opts.push("<label><input type='radio' name=\""+t.attr('id').replace('"','&quot;')+"\" value=\""+optarr1[i].replace('"','&quot;')+"\" "+optarr3[optarr1[i]]+" /> "+optarr2[optarr1[i]]+"</label>");
			});
			data.push(dodiv('radio', t.find('Property[name=label]').text(), opts.join(' '), t));
		}
		else if (t0.tagName == 'CheckBox') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			opts = [], sa = $.map(t.find("Property[name=selected]").text().split(','), $.trim);
			t.find("Property[name=options]>option").each(function(){
				s = ($.inArray($(this).attr('id').trim(), sa) >= 0) ? "checked='checked'" : "";
				opts.push("<label><input type='checkbox' name=\""+t.attr('id').replace('"','&quot;')+"["+$(this).attr('id')+"]\" "+s+" "+dis+" />&nbsp;"+$(this).text().trim()+"</label>");
			});
			data.push(dodiv('checkbox', t.find('Property[name=label]').text(), opts.join('<br />'), t));
		}
		else if (t0.tagName == 'Upload') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			data.push(dodiv('upload', t.find('Property[name=label]').text(), "<input type='file' name=\""+t.attr('id').replace('"','&quot;')+"\" "+dis+" />", t));
		}
		else if (t0.tagName == 'TextArea') {
			var
				dis = parseInt(t.attr('disabled') || '0', 10),
				w = parseInt(t.find("Property[name=width]").text() || '0', 10),
				h = parseInt(t.find("Property[name=height]").text() || '0', 10),
				sty = "";
			if (w > 0 || h > 0) {
				sty = "style='"+(w>0?"width:"+w+"px;":"")+(h>0?"height:"+h+"px":"")+"'";
			}
			dis = (dis == 1) ? "disabled='disabled'" : "";
			data.push(dodiv('textarea', t.find('Property[name=label]').text(), "<textarea name=\""+t.attr('id').replace('"','&quot;')+"\" "+dis+" "+sty+">"+t.find('Property[name=defaultValue]').text()+"</textarea>", t));
		}
		else if (t0.tagName == 'Hypertext') {
			data.push(dodiv('hypertext', t.find('Property[name=label]').text(), t.find('Property[name=value]').text(), t));
		}
		else if (t0.tagName == 'Button') {
			var dis = parseInt(t.attr('disabled') || '0', 10);
			dis = (dis == 1) ? "disabled='disabled'" : "";
			nobtn = false;
			var vis = parseInt(t.attr('visible') || '0', 10);
			var align = t.find('Property[name=buttonAlign]').text().replace("'",'&acute;');
			var lbl = t.find('Property[name=label]').text().replace("'",'&acute;');
			var img = $j.trim(t.find('Property[name=buttonImage]').text().replace("'",'&acute;'));
			var btn = (img == '') ? "<input type='submit' value='"+lbl+"' />" : "<input type='image' alt='"+lbl+"' title='"+lbl+"' src='"+img+"' "+dis+" />";
			if (vis !== 1) vis = 'style="display:none"'; else vis = '';
			data.push( "<div class='row' "+vis+"><div class='submit' style='text-align:"+align+"'>"+btn+"</div></div>" );
		}
	});
	w.data('ev','');
	//w.html("<form action='' method='post' enctype='multipart/form-data' class='xml-dialog-form'>"+data.join(' ')+"<div class='submit'><input type='submit' /></div></form>").dialog('close').dialog('open');
	if (nobtn) { /* if no btn, add default submit */
		data.push( "<div class='submit'><input type='submit' /></div>" );
	}
	w.html("<form action='' method='post' enctype='multipart/form-data' class='xml-dialog-form'>"+data.join(' ')+"</form>").dialog('close').dialog('open');
	w.dialog('option', 'title', x.find("VDOMFormContainer>Properties>Property[name=label]").text() );
	w.data('ev','1');

}

</script>]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="hide" Help="#Lang(505)">
          <Parameters/>
        </Event>
        <Event Name="show" Help="#Lang(506)">
          <Parameters/>
        </Event>
        <Event Name="submit" Help="#Lang(507)">
          <Parameters>
            <Parameter Name="params" Order="" VbType="" Help="#Lang(901)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(701)" ScriptName="fade" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog('close');
]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(702)" ScriptName="fade" Help="#Lang(802)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog('open');
]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="resizeTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(703)" ScriptName="width" Help="#Lang(803)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(704)" ScriptName="height" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog("option",{width:parseInt(width,10),height:parseInt(height,10)});
]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="loadData">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="xmldata" Help="#Lang(805)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
vdom_xd_load("#"+this.domCont.id,xmldata);
]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>