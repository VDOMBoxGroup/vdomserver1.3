<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>xmldialog</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_xmldialog</ClassName>
    <ID>887e2a68-4cb0-e28a-6d7b-4dd41c35ca6a</ID>
    <Icon>#Res(723723b4-c8f4-5e4a-b02c-16fa8e0d53f7)</Icon>
    <EditorIcon>#Res(37abe2ec-e61a-8981-e929-16faba369563)</EditorIcon>
    <StructureIcon>#Res(9f1c05cd-fee2-6055-2ef4-16fae6375ed7)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Additional</Category>
    <Dynamic>1</Dynamic>
    <Version>1.76.6720</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer, container</Containers>
    <Languages>en_US</Languages>
    <Handlers>set_attr</Handlers>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d+$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>400</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue>300</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(4)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,4}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>title</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(1000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>xmldata</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(50000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>.*</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>show</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|1)|(#Lang(402)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>[01]</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>modal</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|1)|(#Lang(404)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>[01]</RegularExpressionValidation>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">XML dialog</Sentence>
      <Sentence ID="002">The XML dialog type produces an object displayed as a dialog window. The content of the dialog is described in the 'XML data' attribute ib XML format.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101">Herarchy</Sentence>
      <Sentence ID="102">Top</Sentence>
      <Sentence ID="103">Left</Sentence>
      <Sentence ID="104">Width</Sentence>
      <Sentence ID="105">Height</Sentence>
      <Sentence ID="106">Title</Sentence>
      <Sentence ID="107">XML data</Sentence>
      <Sentence ID="108">Show</Sentence>
      <Sentence ID="109">Modal</Sentence>
      <Sentence ID="201">Hierarchy of the object</Sentence>
      <Sentence ID="202">Distance from the top edge of the parent in pixels</Sentence>
      <Sentence ID="203">Distance from the left edge of the parent in pixels</Sentence>
      <Sentence ID="204">Width in pixels</Sentence>
      <Sentence ID="205">Height in pixels</Sentence>
      <Sentence ID="206">Title of the object to display, HTML allowed</Sentence>
      <Sentence ID="207">XML data</Sentence>
      <Sentence ID="208">Show dialog after page load</Sentence>
      <Sentence ID="209">Open dialog in modal window</Sentence>
      <Sentence ID="301">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="302">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="303">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="304">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="305">Incorrect value, must be positive integer</Sentence>
      <Sentence ID="306">Incorrect value</Sentence>
      <Sentence ID="307">Incorrect value</Sentence>
      <Sentence ID="308">Incorrect value</Sentence>
      <Sentence ID="309">Incorrect value</Sentence>
      <Sentence ID="401">Yes</Sentence>
      <Sentence ID="402">No</Sentence>
      <Sentence ID="403">Yes</Sentence>
      <Sentence ID="404">No</Sentence>
      <Sentence ID="501"></Sentence>
      <Sentence ID="502"></Sentence>
      <Sentence ID="503"></Sentence>
      <Sentence ID="504"></Sentence>
      <Sentence ID="505"></Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507"></Sentence>
      <Sentence ID="601"></Sentence>
      <Sentence ID="602"></Sentence>
      <Sentence ID="603"></Sentence>
      <Sentence ID="604"></Sentence>
      <Sentence ID="701"></Sentence>
      <Sentence ID="702"></Sentence>
      <Sentence ID="703"></Sentence>
      <Sentence ID="704"></Sentence>
      <Sentence ID="705"></Sentence>
      <Sentence ID="801"></Sentence>
      <Sentence ID="802"></Sentence>
      <Sentence ID="803"></Sentence>
      <Sentence ID="804"></Sentence>
      <Sentence ID="805"></Sentence>
      <Sentence ID="901"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="723723b4-c8f4-5e4a-b02c-16fa8e0d53f7" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
SUQ9InhtcC5paWQ6MDg4OURDOEQwNjI5MTFFMkFGRTc5NzQxNzY5NDk4RjIiIHhtcE1NOkRvY3Vt
ZW50SUQ9InhtcC5kaWQ6MDg4OURDOEUwNjI5MTFFMkFGRTc5NzQxNzY5NDk4RjIiPiA8eG1wTU06
RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDowODg5REM4QjA2MjkxMUUyQUZF
Nzk3NDE3Njk0OThGMiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDowODg5REM4QzA2MjkxMUUy
QUZFNzk3NDE3Njk0OThGMiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PuGucnAAAAUWSURBVHja1FldSFtXHP/FZtb4May2XU2n
smqn4MA5mKgtexjVrMUvXGnKvroXHwp7qjrtg0++TMRCHwbrg3sRIVMZ7RzOTDpEiMwwiXbi0PoS
mpm1NHGiRpOo2f9cb9IYb25urs57/cPhnHPPuSfnl//H73/u0QQCARwHMRgMOqraqHxKJZvKMyp9
VL4xm80bmuMAhEAkUzVaQWI0GpGVlQWn04n+/n5YLJYJGqvURns5GsDw58H23rkBwfdDc/nxYFVd
+0FMIAk41VZeXl7R3NwcepadnY2mpia2bsXExMTXCUqCiMMaPmGaEBL++efaSkNp6qjZuqoUiJ8e
jvH9/esE3zHeuAm9Xi+4L2ZmJG8y0zontlkpICKfHUYd3s7MzOR8gplTpLDnJH8z00pVMwgm5OMw
mUyCGmEOT9KboHYQrK6trYXL5UJ3dzccDge2t7e5mvX5qNWpuVL1/ru/jkza1AoiWHu9XgwNDbGN
w+12Y2vL7wA03wd5RBtt41arFQMDA4pzCNNGUVEREhMT0dDQwBW2v8++qKmh4engPG206MRAdHV1
QUnC1Gg0aGlp4YAIR8pXohXjD7/fj42NDcWA6HQ6UXMUBCJk/8ypfD6fYkCYOQn5pBAQ0ailFokF
IgREnLHVAyYu04qclJSUpCgAZl6xQISACE0qKytDe3u74pooKSk5mLPX19ejrq7uSMhOzphkZz8q
xpY7JolHWD01NYXBwUHFTau6uhqFhYXSCTFyIgOhFmYvKCiQqhFh1amF2aX4iGj4Zcze0dHBtVtb
W9HZ2SnY/r+ZXYqPJEidqCZ2j1sjkf94tPZRg4graqmJ2Q+kkdLSUlUwe3FxsXSNCE2soQMYi+FK
kV08ZLgn+1UTY8sBkxD+8ey4gRj+7gdY7KlILvxQnkaUBhE9agUgC0TayopSuQvTBvcJa+WXHvGo
JeUfdT94EP7RVlHRHsScvOzDhJqAyPWJTa83KpATaWnIuXsXO5R02ilfS6GT3vnGRqzQ8eBlfz/y
+FzN2deHVYsFGXSQO11VhZ3NTSzeuYNcnsPsfK53YI2IjW3Qj0bVCI0tPXqE3Fu38DpxUgYdnX3L
y3jW2/sqKaU5Jy9exIvHj5GUlxdyV7buDr8u9xsH1UgsgB6W4ouYlmdkBDo6S5y7epXrP+3pwerz
59Cmp+9idbmQkp/PrZOk18PrduMEpe6sHwTikXiM4DUCWWF0PQYQJi9mZnCWtLFJm7QPDXHPXuPz
N9fcHHIqK3HWaISWACzPz+MUAV8PA7IeDxC5XOCRACTv+nX42T+ekYELt29j9t49JCYnc2MvFxaQ
dfkycgwGuAgE01Y6AWHrBuRoZM91Vxz+EgvIe21t0GVm4vf79/EGOfsF2rDDaoXLxlEAfFtb+Ndu
xxk6kzufPEFiSgq3nmzTksvKHhFnzya/ePvaNSyOjWGOIhMrZ4aH8Q45/8jk5C4QdmEzPb0LZHYW
5ynjZquxdXeozsjJwc3x8dCaNpMJNtKoIEeyi56HP/5m8/n8cTv9IIVLdREi5IVfMR5RFSHGMjWf
6phdZhbrvnQlyl17RH9vNzxL3X8+39cIu6MPkz//mBrXBLQrhxJ+P2r8UvCiXzT1DuzdnNRL10jg
Pz/969ul9ZT5qD4ST+QqzMs9tHNFLBCR7bdOBxaW1jFzKOFXKRBBuZS7xtWjZisHZK3h48qvqM7H
8ZFFtu9IZ/+HipmK5RgBWeP3HZL/BBgAs5x/nssBafMAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="37abe2ec-e61a-8981-e929-16faba369563" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACwklEQVR42m1TS08TURQ+Z2b6oIXW
2gemhaamCzbs0KT9AYaNCXFpYmKMK124YGGMMZiACwxuXJjGxC0LF7Bwr24IaxIoIUQFpOXVlpnp
Y/qYufd67gBViDe5c6e953zn+75zBhlzAFEBRVHg6hKCA+eCTgGapsHS0hKk02lYWVn5Mj4+fmd6
evoZMsYeU2zoKoBMOtvcPWUyYxyOj48CuVz+eT6fDxUKBR273a5F6AO2bUOn03GTOeeXqsvfkoFc
rVYLtre3IRgMWgsLC5+w1+vuUkxybW0NfD7ff2SI/omI0G63WSwW8+3u/poPBAZfkgRnv93ujKyv
r8PY2Bg4juMGyn0VSBbY3Ny0E4mEBiheJeLD82hZVonopegC6vU6qKrqUj6TIS4xIL/A6/U62WxW
q9UqM5FIdI4AWiXqQqpYLPYTPB5PH+hiyXfJigo6yWRSqzfMmej12By221bJtp0UtQb8fj9IMzOZ
DBDNv3LOAfwDA1Dc2HBC4bAmuPP6WiT6BpvNRgkAU1tbW/0Edi7BpX6ppW5H7PToqEc3Tl9Eo/G3
2GjUXQCZ6JBGQRvP9bNe78wL+b8EpgKKqjoMQDNN/cPQUPgjmqbhAnAK4jRM3DCgt7gIgpI98Thd
IajkvtNsghoMArcsYKbZ9wYNQ+8DCDKue3ICe7OzYNdqkJichGguB82dHYhOTADrdqG6uirKy8vo
DYddTajrp/vE1gWgcYPWwQGsPn0CPcOE7NQUhG5moFOpQvz2LWjs7QGSjN/fvoP+8wcqZLoEKMtJ
lD1WCMAol+Hzw0fgUDWV2imrahTI5JiTRE8gACgLVSq2rRsWHh6V9zmDEU4POTM90l4uH7pDI6SB
5AGXtiExpm+DywsA9aRafT8cj7/D+w/u3lNQuUHJitSkKIiRwYDbe/HvOIuLB8pPzBvweb+GIsMb
fwCDLsCecWjaaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae6375ed7" Name="Icon" Type="jpg"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACwklEQVR42m1TS08TURQ+Z2b6oIXW
2gemhaamCzbs0KT9AYaNCXFpYmKMK124YGGMMZiACwxuXJjGxC0LF7Bwr24IaxIoIUQFpOXVlpnp
Y/qYufd67gBViDe5c6e953zn+75zBhlzAFEBRVHg6hKCA+eCTgGapsHS0hKk02lYWVn5Mj4+fmd6
evoZMsYeU2zoKoBMOtvcPWUyYxyOj48CuVz+eT6fDxUKBR273a5F6AO2bUOn03GTOeeXqsvfkoFc
rVYLtre3IRgMWgsLC5+w1+vuUkxybW0NfD7ff2SI/omI0G63WSwW8+3u/poPBAZfkgRnv93ujKyv
r8PY2Bg4juMGyn0VSBbY3Ny0E4mEBiheJeLD82hZVonopegC6vU6qKrqUj6TIS4xIL/A6/U62WxW
q9UqM5FIdI4AWiXqQqpYLPYTPB5PH+hiyXfJigo6yWRSqzfMmej12By221bJtp0UtQb8fj9IMzOZ
DBDNv3LOAfwDA1Dc2HBC4bAmuPP6WiT6BpvNRgkAU1tbW/0Edi7BpX6ppW5H7PToqEc3Tl9Eo/G3
2GjUXQCZ6JBGQRvP9bNe78wL+b8EpgKKqjoMQDNN/cPQUPgjmqbhAnAK4jRM3DCgt7gIgpI98Thd
IajkvtNsghoMArcsYKbZ9wYNQ+8DCDKue3ICe7OzYNdqkJichGguB82dHYhOTADrdqG6uirKy8vo
DYddTajrp/vE1gWgcYPWwQGsPn0CPcOE7NQUhG5moFOpQvz2LWjs7QGSjN/fvoP+8wcqZLoEKMtJ
lD1WCMAol+Hzw0fgUDWV2imrahTI5JiTRE8gACgLVSq2rRsWHh6V9zmDEU4POTM90l4uH7pDI6SB
5AGXtiExpm+DywsA9aRafT8cj7/D+w/u3lNQuUHJitSkKIiRwYDbe/HvOIuLB8pPzBvweb+GIsMb
fwCDLsCecWjaaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae66214c8" Name="style" Type="css"><![CDATA[LnhtbC1kaWFsb2ctZm9ybSBkaXYucm93IHsNCiAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgIGNsZWFyOiBib3RoOw0KICAgIGZsb2F0OiBub25lOw0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gbGFiZWwgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIHdpZHRoOiA0NSU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSB7DQogICAgZmxvYXQ6IHJpZ2h0Ow0KICAgIHdpZHRoOiA1MCU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5mdWxsc2l6ZSA+IGxhYmVsLA0KLnhtbC1kaWFsb2ctZm9ybSBkaXYuZnVsbHNpemUgPiBkaXYuaXRlbSB7DQogICAgZmxvYXQ6IG5vbmU7DQogICAgd2lkdGg6IDEwMCU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgZGl2Lml0ZW0gPiBsYWJlbCB7DQogICAgZmxvYXQ6IG5vbmU7DQogICAgd2lkdGg6IGF1dG87DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYubGl2ZXNlYXJjaCA+IGlucHV0LA0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gZGl2LnRleHRib3ggPiBpbnB1dCwNCi54bWwtZGlhbG9nLWZvcm0gZGl2LnJvdyA+IGRpdi5pdGVtID4gc2VsZWN0LA0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gZGl2Lml0ZW0gPiB0ZXh0YXJlYSB7DQogICAgd2lkdGg6IDk5JTsNCiAgICByZXNpemU6IG5vbmU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSBiciB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgY2xlYXI6IGJvdGg7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICBoZWlnaHQ6IDFweDsNCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LnN1Ym1pdCB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5zdWJtaXQgaW1nIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQovKiBsaXZlIHNlYXJjaCAqLw0KLnhtbC1kaWFsb2ctZm9ybSBkaXYubGl2ZXNlYXJjaCA+IGRpdi5zZWxlY3RlZC1pdGVtIHsNCiAgICBwYWRkaW5nLXRvcDogMnB4Ow0KICAgIGZvbnQtc2l6ZTogMTNweDsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgcGFkZGluZzogM3B4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5saXZlc2VhcmNoIHRleHRhcmVhIHsNCiAgICByZXNpemU6IG5vbmU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5saXZlc2VhcmNoID4gZGl2LnNlbGVjdGVkLWl0ZW0gPiBzcGFuIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNkOWQ5ZDk7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIGhlaWdodDogMjBweDsNCiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogM3B4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDNweDsNCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LmxpdmVzZWFyY2ggPiBkaXYuc2VsZWN0ZWQtaXRlbSA+IHNwYW4gPiBkaXYudmFsdWUgew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBjb2xvcjogIzIyMjsNCiAgICBtYXJnaW46IDJweCA1cHg7DQogICAgbWF4LXdpZHRoOiAzMjVweDsNCiAgICBtYXgtaGVpZ2h0OiAxN3B4Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7DQogICAgZGlyZWN0aW9uOiBsdHI7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYubGl2ZXNlYXJjaCA+IGRpdi5zZWxlY3RlZC1pdGVtID4gc3BhbiA+IGRpdi5jbG9zZSB7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgIHdpZHRoOiAxNHB4Ow0KICAgIGhlaWdodDogMjBweDsNCiAgICBiYWNrZ3JvdW5kOiBuby1yZXBlYXQgdXJsKC85ZjFjMDVjZC1mZWUyLTYwNTUtMmVmNC0xNmZhZTQ1YWFhYjEucmVzKSAtNHB4IDA7DQogICAgb3BhY2l0eTogLjY7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5saXZlc2VhcmNoID4gZGl2LnNlbGVjdGVkLWl0ZW0gPiBzcGFuID4gZGl2LmNsb3NlOmhvdmVyIHsNCiAgICBvcGFjaXR5OiAxOw0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYubGl2ZXNlYXJjaCA+IGRpdi5zZWxlY3RlZC1pdGVtID4gc3Bhbjpob3ZlciB7DQogICAgYm9yZGVyLWNvbG9yOiAjYjliOWI5Ow0KfQ0KDQovKiByaWNoIHRleHQgZWRpdG9yIHN0eWxlICovDQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAjaW5wdXQgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBtYXJnaW46IDA7DQogICAgcGFkZGluZzogMDsNCiAgICBmb250OiAxNHB4ICdDb3VyaWVyIE5ldycsIFZlcmRhbmE7DQogICAgYm9yZGVyOiAwDQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgI2JiYjsNCiAgICBwYWRkaW5nOiAwIDFweCAxcHg7DQogICAgZm9udDogMTJweCBWZXJkYW5hLCBBcmlhbDsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gZGl2Lml0ZW0gPiBkaXYudGUgaWZyYW1lIHsNCiAgICBib3JkZXI6IG5vbmU7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAudGVoZWFkZXIgew0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYmJiOw0KICAgIGJhY2tncm91bmQ6IHVybCgvOWYxYzA1Y2QtZmVlMi02MDU1LTJlZjQtMTZmYWU0NWRkZGQxLnJlcykgcmVwZWF0Ow0KICAgIHBhZGRpbmctdG9wOiAxcHgNCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LnJvdyA+IGRpdi5pdGVtID4gZGl2LnRlIC50ZWhlYWRlciBzZWxlY3Qgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIG1hcmdpbi10b3A6IDVweDsNCiAgICB3aWR0aDogaW5pdGlhbDsNCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LnJvdyA+IGRpdi5pdGVtID4gZGl2LnRlIC50ZWZvbnQgew0KICAgIG1hcmdpbi1sZWZ0OiAxMnB4DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAudGVzaXplIHsNCiAgICBtYXJnaW46IDAgM3B4DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAudGVzdHlsZSB7DQogICAgbWFyZ2luLXJpZ2h0OiAxMnB4DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAudGVkaXZpZGVyIHsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgd2lkdGg6IDFweDsNCiAgICBoZWlnaHQ6IDMwcHg7DQogICAgYmFja2dyb3VuZDogI2NjYw0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gZGl2Lml0ZW0gPiBkaXYudGUgLnRlY29udHJvbCB7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgIHdpZHRoOiAzNHB4Ow0KICAgIGhlaWdodDogMzBweDsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC85ZjFjMDVjZC1mZWUyLTYwNTUtMmVmNC0xNmZhZTQ2Y2NjYzEucmVzKQ0KfQ0KLnhtbC1kaWFsb2ctZm9ybSBkaXYucm93ID4gZGl2Lml0ZW0gPiBkaXYudGUgLnRlY29udHJvbDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsNCiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAzMHB4IDANCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LnJvdyA+IGRpdi5pdGVtID4gZGl2LnRlIC50ZWZvb3RlciB7DQogICAgaGVpZ2h0OiAzMnB4Ow0KICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYmJiOw0KICAgIGJhY2tncm91bmQ6ICNmNWY1ZjUNCn0NCi54bWwtZGlhbG9nLWZvcm0gZGl2LnJvdyA+IGRpdi5pdGVtID4gZGl2LnRlIC50b2dnbGUgew0KICAgIGZsb2F0OiBsZWZ0Ow0KICAgIGJhY2tncm91bmQ6IHVybCgvOWYxYzA1Y2QtZmVlMi02MDU1LTJlZjQtMTZmYWU0NmNjY2MxLnJlcykgLTM0cHggMnB4IG5vLXJlcGVhdDsNCiAgICBwYWRkaW5nOiA5cHggMTNweCAwIDMxcHg7DQogICAgaGVpZ2h0OiAyM3B4Ow0KICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNjY2M7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIGNvbG9yOiAjNjY2DQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAudG9nZ2xlOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmDQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAucmVzaXplIHsNCiAgICBmbG9hdDogcmlnaHQ7DQogICAgaGVpZ2h0OiAzMnB4Ow0KICAgIHdpZHRoOiAzMnB4Ow0KICAgIGJhY2tncm91bmQ6IHVybCgvOWYxYzA1Y2QtZmVlMi02MDU1LTJlZjQtMTZmYWU0NWJiYmIxLnJlcykgMTVweCAxNXB4IG5vLXJlcGVhdDsNCiAgICBjdXJzb3I6IHMtcmVzaXplDQp9DQoueG1sLWRpYWxvZy1mb3JtIGRpdi5yb3cgPiBkaXYuaXRlbSA+IGRpdi50ZSAjZWRpdG9yIHsNCiAgICBjdXJzb3I6IHRleHQ7DQogICAgbWFyZ2luOiAxMHB4DQp9DQo=]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae32145d0" Name="vdom_xml_dialog" Type="js"><![CDATA[]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae32bafe5" Name="vdom_xml_dialog_tinyeditor" Type="js"><![CDATA[]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae6cbdfa6" Name="vdom_xml_dialog_autocomplete" Type="js"><![CDATA[]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae45aaab1" Name="vdom_xml_dialog_close_icon" Type="gif"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABUAAAApCAYAAADar2JAAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KAtiABQAAALRJREFUSA3tldEJgDAMRK0zdbiO0OG6k3LIwRligv4J6UebS5MXvA+7bbXKgUcH5pyHXlqtd4wbA+9UwBijWe31IBdCUaAgaCwMuCJ/Dy/ZouAMiJ4UqkAOycA7C71TgQrSvNeX5izA6hRQBeVAOVAO/M+Btdbt4bPa+6Lwz6+A3nuz2gMiF0JRoCBoLAy4In8PL9mi4AyInhSqQA7JwOHDp0AFaZ6DXp0WYPUrWBWXA98cOAFDDU3vRnEfbgAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae45bbbb1" Name="vdom_xml_dialog_resize_icon" Type="gif"><![CDATA[R0lGODlhDgANAJEDAJGRkZKSkv///9jm7yH5BAEAAAMALAAAAAAOAA0AAAIfnI8mkS3Q0opoUsVUtIMf7mFfVpGPY5qiAolg2sFrAQA7]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae46cccc1" Name="vdom_xml_dialog_icons" Type="png"><![CDATA[]]></Resource>
    <Resource ID="9f1c05cd-fee2-6055-2ef4-16fae45dddd1" Name="vdom_xml_dialog_resize_header" Type="gif"><![CDATA[R0lGODlhAQAeAJEAAO3t7evr6/Ly8gAAACH5BAAAAAAALAAAAAABAB4AAAIHlI8Jwe1eAAA7]]></Resource>
  </Resources>
  <SourceCode><![CDATA[

#!/usr/bin/env python

import re

from xml.dom.minidom import parseString


# RegExp to remove <script> section in XML
RE_REMOVE_SCRIPT = re.compile(r"(?si)<(script)[^<>]*>.*?</\1>")

# Placeholder for default value
_DEFAULT = []

# Boolean values map
BOOL_MAP = {
    "0": False,
    "false": False,
    "1": True,
    "true": True
}

# Sort by key lambda function
sort_by_key = lambda pair: pair[0]

# Sort by value lambda function
sort_by_val = lambda pair: pair[1]

# Sorting map
SORT_MAP = {
    "0": "default",
    "1": sort_by_key,
    "2": sort_by_val,
    "key": sort_by_key,
    "value": sort_by_val
}

# Sorting order map
SORT_ORDER_MAP = {
    "0": "default",
    "1": "asc",
    "2": "desc",
    "asc": "asc",
    "desc": "desc"
}

# Components CSS classes map
COMPONENTS_CSS_MAP = {
    "heading" : "heading",
    "textbox" : "textbox",
    "password" : "password",
    "dropdown" : "dropdown",
    "radiobutton" : "radio",
    "checkbox" : "checkbox",
    "textarea" : "textarea",
    "hypertext" : "hypertext",
    "button" : "button",
    "container": "container",
    "livesearch": "livesearch",
    "richtextarea": "richtextarea",
    # "fileupload" : render_fileupload
}


def on_compile(application, object, action_name, context, objects):
    """
    """
    return [{"object": xobject} for xobject in object.get_objects_list()]


def set_attr(app_id, object_id, param):
    """
    """
    if "xmldata" in param:
        obj = application.objects.search(object_id)
        
        attr = (param["xmldata"]["value"]).replace('<![CDATA[', '<!--[CDATA[')
        obj.attributes.xmldata = attr.replace(']'+']>', ']]-->')

    return ""


def parse_int(value, default):
    """
    Parse str to int
    """
    try:
        return int(value)

    except Exception:
        return default


def to_bool(value, default):
    """
    Convert string value to boolean
    """
    return BOOL_MAP.get(value, default)


def escape_quote(text):
    """
    Quote escape
    """
    return text.replace('"', '&quot;')


def get_elem_attr(elem, attr, default):
    """
    Return attribute of element
    """
    value = elem.getAttribute(attr.lower()).strip()
    if not value:
        return default

    if isinstance(default, bool):
        value = BOOL_MAP.get(value, default)

    return value


def get_elem_attrs(elem):
    """
    Return dictionary of element attributes
    """
    return {attr.lower(): value for attr, value in elem.attributes.items()}


def get_elem_props(elem):
    """
    Return dictionary of element Property section
    """
    props = {}

    properties = None
    for child in elem.childNodes:
        if child .nodeType == child.ELEMENT_NODE and \
           child.localName.lower() == "properties":
            
            properties = child
            break

    if not properties:
        return props

    is_property_node = lambda node: node.nodeType == node.ELEMENT_NODE and \
                                    node.localName == 'Property' and \
                                    node.childNodes

    for node in properties.childNodes:
        if not is_property_node(node):
            continue

        name = get_elem_attr(node, "name", "").lower()
        if name == "options":
            data = [child for child in node.childNodes if child.nodeType == child.ELEMENT_NODE]

        else:
            data = node.childNodes[0].nodeValue.strip()

        if data and name:
            props[name] = data

    return props


def is_disabled(elem):
    """
    Check is element disabled or not
    """
    return u"""disabled="disabled\"""" if get_elem_attr(elem, "disabled", False) else u""


def is_readonly(elem):
    """
    Check is element readonly or not
    """
    return u"""readonly="readonly\"""" if get_elem_attr(elem, "readonly", False) else u""


def is_multiple(elem):
    """
    Check is element readonly or not
    """
    return u"""multiple="multiple\"""" if get_elem_attr(elem, "multiple", False) else u""


def is_visible(elem):
    """
    Check element's visibility
    """
    return u"" if get_elem_attr(elem, "visible", True) else u"""style="display: none\""""


def is_fullsize(elem):
    """
    Check is element fullsize or not
    """
    return "fullsize" if get_elem_attr(elem, "fullsize", False) else u""


def get_elem_options(options):
    """
    Get Options section of elemet
    """
    if not options:
        return []

    result = []
    for option in options:
        key = get_elem_attr(option, "id", "")
        value = option.childNodes[0].nodeValue.strip()

        if key and value:
            result.append((key, value))

    return result
    

def make_div_row(html, elem, label):
    """
    Wraps HTML data to DIV
    """
    return (u"""<div class="row {fullsize} {classes}" {visibility}>"""
            u"""<label class="title">{label}</label>"""
            u"""<div class="item {elem_type}">{html}</div>"""
            u"""<br style="clear: both" />"""
            u"""</div>""").format(
                fullsize=is_fullsize(elem),
                classes=get_elem_attr(elem, "class", ""),
                visibility=is_visible(elem),
                label=label,
                elem_type=COMPONENTS_CSS_MAP[elem.localName.lower()],
                html=html
            ) 


def render_heading(elem):
    """
    Render Heading component

    Example:

    <Heading id='headingName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 level='1 | 2 | 3 | 4 | 5 | 6'>

        <Properties>
            <Property name='text'><!--[CDATA[Heading text]]--></Property>
        </Properties>
    </Heading>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    level = parse_int(attrs.get("level", "3"), 3)
    if not (6 >= level >= 1):
        level = 3

    return u"""<h{level} class="{classes}" id="{attr_id}" {visibility}>{text}</h{level}>""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        classes=attrs.get("class", ""),
        level=level,
        text=props.get("text", ""),
        visibility=is_visible(elem),
    )

    return html


def render_textbox(elem):
    """
    Render TextBox component

    Example:

    <TextBox id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Label]]--></Property>
            <Property name='defaultValue'><!--[CDATA[Test]]--></Property>
        </Properties>
    </TextBox>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    html = u"""<input type="text" name="{attr_id}" value="{value}" {disabled} {readonly} />""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        value=escape_quote(props.get("defaultvalue", "")),
        disabled=is_disabled(elem),
        readonly=is_readonly(elem)
    )

    return make_div_row(html, elem, props.get("label", ""))


def render_password(elem):
    """
    Render Password component

    Example:

    <Password id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Label]]--></Property>
            <Property name='defaultValue'><!--[CDATA[Test]]--></Property>
        </Properties>
    </Password>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    html = u"""<input type="password" name="{attr_id}" value="{value}" {disabled} {readonly} />""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        value=escape_quote(props.get("defaultvalue", "")),
        disabled=is_disabled(elem),
        readonly=is_readonly(elem)
    )

    return make_div_row(html, elem, props.get("label", ""))


def render_dropdown(elem):
    """
    Render DropDown component

    Example:

    <DropDown id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 sort='0 | 1 | 2 | key | value'
                 order='0 | 1 | 2 | asc | desc'
                 multiple='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Test]]--></Property>
            <Property name='rows'><!--[CDATA[10]]--></Property>
            <Property name='selected'><!--[CDATA[key1,key3]]--></Property>
            <Property name='disabled'><!--[CDATA[key1,key2]]--></Property>
            <Property name='options'>
                <option id='key2'>val2</option>
                <option id='key1'>val1</option>
                <option id='key3'>val3</option>
            </Property>
        </Properties>
    </DropDown>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    rows = parse_int(props.get("rows", "0"), 0)
    options = get_elem_options(props.get("options", []))
    sort_type = SORT_MAP.get(attrs.get("sort", "0"), "default")
    sort_order = SORT_ORDER_MAP.get(attrs.get("order", "0"), "default")

    if sort_type != "default":
        options = sorted(options, key=sort_type)

        if sort_order == "desc":
            options = reversed(options)

    selected_keys = [key.strip() for key in props.get("selected", "").split(",")]
    disabled_keys = [key.strip() for key in props.get("disabled", "").split(",")]

    multiple = is_multiple(elem)
    if not multiple and len(selected_keys) > 1:
        selected_keys = selected_keys[-1:]

    options_html = []
    for key, value in options:
        selected = u"""selected="selected\"""" if key in selected_keys and not (key in disabled_keys) else u""
        disabled = u"""disabled="disabled\"""" if key in disabled_keys else u""

        options_html.append(u"""<option value="{key}" {selected} {disabled}>{value}</option>""".format(
            key=escape_quote(key),
            value=value,
            selected=selected,
            disabled=disabled
        ))

    html = u"""<select name="{attr_id}" {size} {multiple} {disabled}>{options}</select>""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        size=u"""size="{}\"""".format(rows) if rows else u"",
        multiple=multiple,
        disabled=is_disabled(elem),
        options=u"".join(options_html)
    )

    return make_div_row(html, elem, props.get("label", ""))


def render_radiobutton(elem):
    """
    Render RadioButton component

    Example:

    <RadioButton id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'
                 sort='0 | 1 | 2 | key | value'
                 order='0 | 1 | 2 | asc | desc'
                 breakline='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Test]]--></Property>
            <Property name='selected'><!--[CDATA[key1]]--></Property>
            <Property name='options'>
                <option id='key2'>val2</option>
                <option id='key1'>val1</option>
                <option id='key3'>val3</option>
            </Property>
        </Properties>
    </RadioButton>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    disabled = is_disabled(elem)
    selected_key = props.get("selected", "").strip()
    options = get_elem_options(props.get("options", []))
    sort_type = SORT_MAP.get(attrs.get("sort", "0"), "default")
    sort_order = SORT_ORDER_MAP.get(attrs.get("order", "0"), "default")
    breakline = u"<br/>" if to_bool(attrs.get("breakline", "0"), False) else u""

    if sort_type != "default":
        options = sorted(options, key=sort_type)

        if sort_order == "desc":
            options = reversed(options)

    elem_id = escape_quote(attrs.get("id", ""))
    options_html = []
    for key, value in options:
        selected = u"""checked="checked\"""" if key == selected_key else u""
        
        options_html.append(u"""<label><input autocomplete="off" type="radio" name="{attr_id}" value="{key}" {selected} {disabled} />&nbsp;{label}</label>{breakline}""".format(
            attr_id=elem_id,
            selected=selected,
            disabled=disabled,
            label=value,
            key=escape_quote(key),
            breakline=breakline
        ))

    return make_div_row(u"".join(options_html), elem, props.get("label", ""))


def render_checkbox(elem):
    """
    Render CheckBox component

    Example:

    <CheckBox id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 sort='0 | 1 | 2 | key | value'
                 order='0 | 1 | 2 | asc | desc'
                 breakline='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Test]]--></Property>
            <Property name='selected'><!--[CDATA[key1,key2]]--></Property>
            <Property name='disabled'><!--[CDATA[key1,key3]]--></Property>
            <Property name='options'>
                <option id='key2'>val2</option>
                <option id='key1'>val1</option>
                <option id='key3'>val3</option>
            </Property>
        </Properties>
    </CheckBox>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    disabled = is_disabled(elem)
    options = get_elem_options(props.get("options", []))
    sort_type = SORT_MAP.get(attrs.get("sort", "0"), "default")
    sort_order = SORT_ORDER_MAP.get(attrs.get("order", "0"), "default")
    breakline = u"<br/>" if to_bool(attrs.get("breakline", "0"), False) else u""

    if sort_type != "default":
        options = sorted(options, key=sort_type)

        if sort_order == "desc":
            options = reversed(options)

    selected_keys = [key.strip() for key in props.get("selected", "").split(",")]
    disabled_keys = [key.strip() for key in props.get("disabled", "").split(",")]

    options_html = []
    elem_id = escape_quote(attrs.get("id", ""))

    for key, value in options:
        selected = u"""checked="checked\"""" if key in selected_keys else u""
        inactive = u"""disabled="disabled\"""" if disabled or key in disabled_keys else u""
        
        options_html.append(u"""<label><input autocomplete="off" type="checkbox" name="{attr_id}[{key}]" {selected} {disabled} />&nbsp;{label}</label>{breakline}""".format(
            attr_id=elem_id,
            selected=selected,
            disabled=inactive,
            label=value,
            key=escape_quote(key),
            breakline=breakline
        ))

    return make_div_row(u"".join(options_html), elem, props.get("label", ""))


def render_textarea(elem):
    """
    Render TextArea component

    Example:

    <TextArea id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Label]]--></Property>
            <Property name='defaultValue'><!--[CDATA[Test]]--></Property>
            <Property name='width'><!--[CDATA[400]]--></Property>
            <Property name='height'><!--[CDATA[500]]--></Property>
        </Properties>
    </TextArea>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    width = parse_int(props.get("width", "0"), 0)
    height = parse_int(props.get("height", "0"), 0)

    style = u"""style="{width}{height}\"""".format( 
        width=u"width: {}px;".format(width) if width else u"", 
        height=u"height: {}px;".format(height) if height else u""
    )
        
    html = u"""<textarea name="{attr_id}" {disabled} {readonly} {style}>{value}</textarea>""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        disabled=is_disabled(elem),
        readonly=is_readonly(elem),
        style=style,
        value=props.get("defaultvalue", "")
    )       
    
    return make_div_row(html, elem, props.get("label", ""))

def render_hypertext(elem):
    """
    Render Hypertext component

    Example:

    <Hypertext id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'>

        <Properties>
            <Property name='value'><!--[CDATA[<span>blabla</span>]]--></Property>
        </Properties>
    </Hypertext>
    """
    props = get_elem_props(elem) 
    return make_div_row(props.get("value", ""), elem, props.get("label", ""))


def render_button(elem):
    """
    Render Button component

    Example:

    <Button id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 disabled='1 | 0 | true | false'>

        <Properties>
            <Property name='label'><!--[CDATA[Label]]--></Property>
            <Property name='buttonAlign'><!--[CDATA[center | justify | left | right | start | end]]--></Property>
            <Property name='buttonImage'><!--[CDATA[/path/to/image.png]]--></Property>
        </Properties>
    </Button>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    align = props.get("buttonalign", "").strip().replace("'",'&acute;')
    image = props.get("buttonimage", "").strip().replace("'",'&acute;')
    label = props.get("label", "").replace("'",'&acute;')

    if image:
        button = u"""<input type="image" alt="{label}" title="{label}" src="{img}" {disabled} />""".format( 
            label=label,
            img=image,
            disabled=is_disabled(elem)
        )

    else:
        button = u"""<input type="submit" value="{label}" {disabled} />""".format(
            label=label,
            disabled=is_disabled(elem)
        )

    return (u"""<div class="row" {visible}>"""
            u"""<div id='{attr_id}' class="submit {classes}" style="text-align: {align}">"""
            u"""{button}"""
            u"""</div>"""
            u"""</div>""").format(
                visible=is_visible(elem),
                align=align,
                button=button,
                classes=attrs.get('class', ''),
                attr_id=escape_quote(attrs.get('id', ''))
            )


def render_default_button():
    """
    Render default form button
    """
    return u"""<div class="submit"><input type="submit" /></div>"""


def render_container(elem):
    """
    Render Container component

    Example:

    <Container id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'>
        <Properties>
            <Property name='width'><!--[CDATA[400px | 100%]]--></Property>
            <Property name='height'><!--[CDATA[500px | 100%]]--></Property>
        </Properties>  
        <Components>
            <Button>...
            <DropDown>...
            <Container>...
        </Components>
    </Container>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    width = props.get("width", "")
    height = props.get("height", "")

    style = u"""style="{width}{height}{visibility}\"""".format( 
        width=u"width: {};".format(width) if width else u"", 
        height=u"height: {};".format(height) if height else u"",
        visibility=u"display: none;" if is_visible(elem) else u"" ,
    )

    components = elem.getElementsByTagName('Components')
    components = render_components(components[0]) if components else u""    

    return (u"""<div id="{attr_id}" class="row fullsize {classes}" {style}>"""
            u"""<div class="item">"""
            u"""{components}"""
            u"""</div>"""
            u"""</div>""").format(
                attr_id=escape_quote(attrs.get("id", "")),
                classes=attrs.get("classes", ""),
                style=style,
                components=components
            )    


def render_livesearch(elem):
    """
    Render LiveSearch component

    Example:

    <LiveSearch id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 fullsize='1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'>
        <Properties>
            <Property name='label'><!--[CDATA[LiveSearch]]--></Property>
            <Property name='sourceURI'><!--[CDATA[/blabla/livesearch]]--></Property>
            <Property name='sourceEvent'><!--[CDATA[something or empty]]--></Property>
            <Property name='sourceData'><!--[CDATA[["key1", "key2", "key3", "key4"] | [{label: '', value: ''}, {label: '', value: ''}]]]--></Property>                   
        </Properties>  
    </LiveSearch>

    If sourceEvent presented: callback 'liveSearch' will be executed, so do not forget register it.
    Params are:
        textarea - textarea object
        term - search query

    You need return data in format presented in sourceData
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    html = u"""<div id="xml-dialog-lvs-{attr_id}-data">{sourceData}</div><input id="xml-dialog-lvs-{attr_id}" name="{attr_id}" {disabled} {readonly} sourceuri="{sourceURI}" sourceevent="{sourceEvent}" value="{value}" />""".format(

        attr_id=escape_quote(attrs.get("id", "")),
        value=escape_quote(props.get("defaultvalue", "")),
        disabled=is_disabled(elem),
        readonly=is_readonly(elem),
        sourceURI=escape_quote(props.get("sourceuri", "")),
        sourceEvent=escape_quote(props.get("sourceevent", "")),
        sourceData=props.get("sourcedata", "").replace("&", "&amp;").replace("<", "&lt;")
    )

    return make_div_row(html, elem, props.get("label", ""))


def render_richtextarea(elem):
    """
    Render RichTextAreat component

    Example:

    <RichTextArea id='inputName'
                 class='css class'
                 visible= '1 | 0 | true | false'
                 disabled='1 | 0 | true | false'
                 readonly='1 | 0 | true | false'>
        <Properties>
            <Property name='label'><!--[CDATA[Rich Text Area]]--></Property>
            <Property name='defaultValue'><!--[CDATA[default value]]--></Property>
            <Property name='height'><!--[CDATA[500]]--></Property>
        </Properties>  
    </RichTextArea>
    """
    attrs = get_elem_attrs(elem)
    props = get_elem_props(elem)

    html = u"""<textarea id="xml-dialog-rte-{attr_id}" name="{attr_id}" {disabled} {readonly} eheight="{height}">{value}</textarea>""".format(
        attr_id=escape_quote(attrs.get("id", "")),
        value=escape_quote(props.get("defaultvalue", "")),
        disabled=is_disabled(elem),
        readonly=is_readonly(elem),
        height=props.get("height", ""),
    )

    return make_div_row(html, elem, props.get("label", ""))


def render_fileupload(elem):
    """
    Render FileUpload component
    """
    pass


COMPONENTS_MAP = {
    "heading" : render_heading,
    "textbox" : render_textbox,
    "password" : render_password,
    "dropdown" : render_dropdown,
    "radiobutton" : render_radiobutton,
    "checkbox" : render_checkbox,
    "textarea" : render_textarea,
    "hypertext" : render_hypertext,
    "button" : render_button,
    "livesearch": render_livesearch,
    "container": render_container,
    "fileupload" : render_fileupload,
    "richtextarea": render_richtextarea,
}


def render_components(components):
    """
    Render XML components to HTML
    """
    result = []

    for elem in components.childNodes:
        if elem.nodeType != elem.ELEMENT_NODE:
            continue

        render = COMPONENTS_MAP.get(elem.localName.lower(), None)
        if render:
            result.append(render(elem))

    return "".join(result)


# try:
#     parent_class = VDOM_object

# except Exception as ex:
#     parent_class = object

#     VDOM_CONFIG_1 = {
#         "ENABLE-PAGE-DEBUG": "1",
#         "DEBUG": "1"
#     }


class VDOM_xmldialog(VDOM_object):
    """
    XML Dialog class
    """
        
    def exception_to_str(self, error, is_wysiwyg=False):
        """
        Exception to string
        """
        err_str = u""
        
        if is_wysiwyg or VDOM_CONFIG_1["ENABLE-PAGE-DEBUG"] == "1":
            err_str = u"""<p style="color:#ff0000;"><b>Error:</b> {0}</p>""".format(error)

        else:
            if VDOM_CONFIG_1["DEBUG"]=="1" :
                err_str = u"""<!--<p>Error: {0}</p>-->""".format(error)
                
        return err_str
    
    def xml_to_html(self, is_wysiwyg=False):
        """
        Conver XML data to HTML
        """
        if not self.xmldata:
            return u""

        try:
            xml_data = self.xmldata.encode("utf8")

        except Exception as ex:
            raise
            return self.exception_to_str(ex, is_wysiwyg=is_wysiwyg)

        xml_data = xml_data.replace('<!--[CDATA[', '<![CDATA[')\
                           .replace(']]-->', ']'+']>')

        if is_wysiwyg:
            # if WYSIWYG render - remove <script></script> from XML
            xml_data = RE_REMOVE_SCRIPT.sub("", xml_data)

        try:
            dom = parseString(xml_data)

        except Exception as ex:
            raise
            return self.exception_to_str(ex, is_wysiwyg=is_wysiwyg)

        components = dom.getElementsByTagName('Components')

        try:
            output = render_components(components[0]) if components else u""

        except Exception as ex:
            raise
            return self.exception_to_str(ex, is_wysiwyg=is_wysiwyg)

        if not dom.getElementsByTagName("Button"):
            output += render_default_button()

        return self.parse_dialog_title(dom), u"""<form action="" method="post" enctype="multipart/form-data" class="xml-dialog-form">{}</form>""".format(output)

    def parse_dialog_title(self, elem):
        """
        Parse title value from DOM
        """
        default_title = self.title

        vdomf = elem.getElementsByTagName("VDOMFormContainer")
        if not vdomf:
            return default_title

        props = get_elem_props(vdomf[0])
        return props["label"] if "label" in props else default_title

    def render(self, parent, contents=""):
        """
        VDOM Object render
        """
        idn = (self.id).replace('-', '_')
        oid = u'o_' + idn

        show = "false" if self.show == "0" else "true"
        modal = "false" if self.modal == "0" else "true"
        
        render_result = self.xml_to_html()
        if isinstance(render_result, (list, tuple)):
            title, html = render_result

        else:
            title, html = '', render_result
        
        if VDOM_CONFIG_1["DEBUG"] == "1":
            debug_info = u"objtype='xmldialog' objname='%s' ver='%s'" % (self.name, self.type.version)
        else:
            debug_info = u""

        result = """
<div style='display:none' %(debug_info)s><div id='%(id)s'>%(data)s</div></div>
<script type='text/javascript'>$q(function(){
    $q("#%(id)s").data('ev','1');
    $q("#%(id)s:ui-dialog").dialog("destroy");
    $q("#%(id)s").dialog({
        title: "%(title)s",
        width: %(width)s,
        height: %(height)s,
        modal: %(modal)s,
        draggable: !%(modal)s,
        resizable: false,
        autoOpen: %(show)s,
        open: function(e,u) {
            var dialog = $q("#%(id)s");
            if (dialog.data('ev')=='1') execEventBinded('%(idn)s', "show", {});

            vdom_xd_create_richtextarea(dialog);
            vdom_xd_create_livesearch(dialog);

            $j.datepicker.setDefaults($j.datepicker.regional['fr']);
            $j('#%(id)s input.date, #%(id)s .date input').datepicker('destroy').datepicker({
                dateFormat: 'dd/mm/yy', showButtonPanel: true
            }).blur();
        },
        close: function(e,u) {
            $j('#ui-datepicker-div,#ColorDropdown_selector').fadeOut();
            if ($q("#%(id)s").data('ev')=='1') execEventBinded('%(idn)s', "hide", {});
        }
    });
    $q("#%(id)s form.xml-dialog-form").live('submit',function(e){
        e.preventDefault;
        for (var i in window["xmlDialogTinyEditors"])
            window["xmlDialogTinyEditors"][i].post();

        var x=[], a=$q(this).serializeArray();
        for (k in a) if(typeof a[k].name !== 'undefined' && typeof a[k].value !== 'undefined') x[a[k].name]=a[k].value;
        execEventBinded('%(idn)s', "submit", x);
        return false;
    });
});</script>""" % {
            "data":   html,
            "id":     oid,
            "idn":    idn,
            "width":  self.width,
            "height": self.height,
            "title":  title.replace('"','&quot;'),
            "show":   show,
            "modal":  modal,
            "debug_info": debug_info
        }

        return  VDOM_object.render(self, parent, contents=result)

    def wysiwyg(self, parent, contents=""):
        """
        WYSIWYG render
        """
        dialog_width = int(self.width) if int(self.width) >= 150 else 150
        dialog_height = int(self.height) if int(self.height) >= 50 else 50
        
        render_result = self.xml_to_html(True)
        if isinstance(render_result, (list, tuple)):
            title, html = render_result

        else:
            title, html = '', render_result

        title = title.replace('"','&quot;')

        result= \
            u"""<container id="{id}" hierarchy="{hierarchy}" order="{order}" 
                            top="{top}" left="{left}" width="{width}" height="{height}" overflow="visible">
                    <svg>
                        <rect x="0" y="0" rx="7" ry="5" width="{width}" height="{height}" fill="#eeeeee"/>
                        <rect x="3" y="3" rx="7" ry="5" width="{rect_width}" height="30" fill="#333333"/>
                        <line x1="{line_x1}"  y1="14" x2="{line_x2}"   y2="22" style="stroke:#eeeeee; stroke-width:3;"/>
                        <line x1="{line_x1}"  y1="22" x2="{line_x2}"   y2="14" style="stroke:#eeeeee; stroke-width:3;"/>
                        <text x="13" y="22" width="{title_width}" fill="#eeeeee" font-size="14">{dlg_title}</text>
                    </svg>
                    
                    <htmltext top="35" left="10" width="{content_width}" height="{content_height}">
                        <div>{xmldata}</div>
                    </htmltext>
                </container>
            """.format( 
                id=self.id,
                hierarchy=self.hierarchy,
                order=self.order, 
                top=self.top,
                left=self.left, 
                width=self.width,
                height=self.height,
                rect_width=dialog_width-6,
                line_x1=dialog_width-20,
                line_x2=dialog_width-12,
                title_width=dialog_width-25,
                content_height=dialog_height-40,
                content_width=dialog_width-20,
                xmldata=html,
                dlg_title=title
            )

        return VDOM_object.wysiwyg(self, parent, contents=result)


# if __name__ == "__main__":

#     xml_dialog = VDOM_xmldialog()
#     xml_dialog.title = "Default title"
#     xml_dialog.id = "9f1c05cd-fee2-6055-2ef4-16fae6375ed7"
#     xml_dialog.show = "1"
#     xml_dialog.modal = "1"
#     xml_dialog.width = "300"
#     xml_dialog.height = "300"
#     xml_dialog.top = "0"
#     xml_dialog.left = "0"
#     xml_dialog.hierarchy = "0"
#     xml_dialog.order = "0"
#     xml_dialog.name = "xmldialog"

#     xml_dialog.xmldata = \
# u"""<?xml version='1.0' encoding='utf-8'?>
# <VDOMFormContainer>
#     <Properties>
#         <Property name='label'><!--[CDATA[Default Email Composer]]--></Property>
#     </Properties>
#     <Components>
#     <RichTextArea id='inputName'
#                  class='css class'
#                  visible= '1 | 0 | true | false'
#                  fullsize='1 | 0 | true | false'
#                  disabled='1 | 0 | true | false'
#                  readonly='1 | 0 | true | false'>
#         <Properties>
#             <Property name='label'><!--[CDATA[Rich Text Area]]--></Property>
#             <Property name='defaultValue'><!--[CDATA[default value]]--></Property>
#         </Properties>  
#     </RichTextArea>
#     </Components>
# </VDOMFormContainer>"""

#     print xml_dialog.wysiwyg('', '')
#     print xml_dialog.render('', '')

		]]></SourceCode>
  <Libraries>
    <Library Target="HTML"><![CDATA[<link rel="stylesheet" media="screen" type="text/css" href="/9f1c05cd-fee2-6055-2ef4-16fae66214c8.res" />
<script type="text/javascript" src="/9f1c05cd-fee2-6055-2ef4-16fae32145d0.res"></script>
<script type="text/javascript" src="/9f1c05cd-fee2-6055-2ef4-16fae32bafe5.res"></script>
<script type="text/javascript" src="/9f1c05cd-fee2-6055-2ef4-16fae6cbdfa6.res"></script>
]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="hide" Help="#Lang(505)">
          <Parameters/>
        </Event>
        <Event Name="show" Help="#Lang(506)">
          <Parameters/>
        </Event>
        <Event Name="submit" Help="#Lang(507)">
          <Parameters>
            <Parameter Name="params" Order="" VbType="" Help="#Lang(901)"/>
          </Parameters>
        </Event>
        <Event Name="customEvent" Help="#Lang(507)">
          <Parameters>
            <Parameter Name="macros_id" Order="" VbType="" Help="#Lang(901)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(701)" ScriptName="fade" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog('close');
]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(702)" ScriptName="fade" Help="#Lang(802)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog('open');
]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="resizeTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(703)" ScriptName="width" Help="#Lang(803)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(704)" ScriptName="height" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog("option",{width:parseInt(width,10),height:parseInt(height,10)});
]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="loadData">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="xmldata" Help="#Lang(805)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
vdom_xd_load("#"+this.domCont.id,xmldata);
]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="executeCallback">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="callbackName" Help="#Lang(805)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="params" Help="#Lang(805)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[
$q("#"+this.domCont.id).dialog('executeCallback', callbackName, params);
]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>